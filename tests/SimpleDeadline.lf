// Test local deadline, where a deadline is associated with a reaction
// definition. This test triggers a reaction exactly once with a
// deadline violation.
target C;
reactor Deadline(threshold:time(100 msec)) {
    input x:int;
    output deadlineViolation:bool;
    reaction(x) -> deadlineViolation {=
        printf("ERROR: Deadline violation was not detected!\n");
        exit(1);
    =} deadline(threshold) {=
        printf("Deadline violation detected.\n");
        SET(deadlineViolation, true);
    =}
}
reactor Print {
    input in:bool;
    reaction(in) {=
        if (in) {
            printf("Output successfully produced by deadline handler.\n");
        }
    =}
}
main reactor SimpleDeadline {
    timer start;
    d = new Deadline(threshold = 10 msec);
    p = new Print();
    d.deadlineViolation -> p.in;
    reaction(start) -> d.x {=
        struct timespec sleep_time = {(time_t) 0, (long)20000000};
        struct timespec remaining_time;
        nanosleep(&sleep_time, &remaining_time);
        SET(d.x, 42);
    =}
} 