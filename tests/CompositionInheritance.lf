// This test connects a simple counting source to tester
// that checks against its own count.
target C {
    fast: true,
    timeout: 10 sec
};
reactor Source(period:time(2 sec)) {
    input foo:int;
	output y:int;
	timer t(1 sec, period);
	state count:int(0);
	reaction(t) -> y {=
		printf("Hello World. My count is: %d.\n", self->count);
		SET(y, self->count);
	=}
}

reactor SourceExtended extends Source {
	output y2: int;
	timer t2(1 sec, 3 sec);
	reaction(t2) -> y2 {=
		(self->count)++;
		printf("Source sending %d.\n", self->count);
		SET(y2, self->count);
	=}
}

reactor Test {
	input x:int;
	state count:int(0);
	reaction(x) {=
		(self->count)++;
		printf("Received %d\n", x->value);
		if (x->value != self->count) { 
			fprintf(stderr, "FAILURE: Expected %d\n", self->count);
			exit(1); 
		}
	=}
	reaction(shutdown) {=
	    if (self->count == 0) {
	        fprintf(stderr, "FAILURE: No data received.\n");
	    }
	=}
}
main reactor Composition {
	s = new SourceExtended();
	
	d = new Test();
	s.y2 -> d.x;
}