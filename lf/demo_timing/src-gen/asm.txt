
hello.riscv:     file format elf32-littleriscv


Disassembly of section .text.init:

80000000 <_start>:
#endif

  .section ".text.init"
  .globl _start
_start:
  li  x1, 0
80000000:	00000093          	li	ra,0
  li  x2, 0
80000004:	00000113          	li	sp,0
  li  x3, 0
80000008:	00000193          	li	gp,0
  li  x4, 0
8000000c:	00000213          	li	tp,0
  li  x5, 0
80000010:	00000293          	li	t0,0
  li  x6, 0
80000014:	00000313          	li	t1,0
  li  x7, 0
80000018:	00000393          	li	t2,0
  li  x8, 0
8000001c:	00000413          	li	s0,0
  li  x9, 0
80000020:	00000493          	li	s1,0
  li  x10,0
80000024:	00000513          	li	a0,0
  li  x11,0
80000028:	00000593          	li	a1,0
  li  x12,0
8000002c:	00000613          	li	a2,0
  li  x13,0
80000030:	00000693          	li	a3,0
  li  x14,0
80000034:	00000713          	li	a4,0
  li  x15,0
80000038:	00000793          	li	a5,0
  li  x16,0
8000003c:	00000813          	li	a6,0
  li  x17,0
80000040:	00000893          	li	a7,0
  li  x18,0
80000044:	00000913          	li	s2,0
  li  x19,0
80000048:	00000993          	li	s3,0
  li  x20,0
8000004c:	00000a13          	li	s4,0
  li  x21,0
80000050:	00000a93          	li	s5,0
  li  x22,0
80000054:	00000b13          	li	s6,0
  li  x23,0
80000058:	00000b93          	li	s7,0
  li  x24,0
8000005c:	00000c13          	li	s8,0
  li  x25,0
80000060:	00000c93          	li	s9,0
  li  x26,0
80000064:	00000d13          	li	s10,0
  li  x27,0
80000068:	00000d93          	li	s11,0
  li  x28,0
8000006c:	00000e13          	li	t3,0
  li  x29,0
80000070:	00000e93          	li	t4,0
  li  x30,0
80000074:	00000f13          	li	t5,0
  li  x31,0
80000078:	00000f93          	li	t6,0

  # enable FPU and accelerator if present
  li t0, MSTATUS_FS | MSTATUS_XS
8000007c:	0001e2b7          	lui	t0,0x1e
  csrs mstatus, t0
80000080:	3002a073          	csrs	mstatus,t0

  # make sure XLEN agrees with compilation choice
  li t0, 1
80000084:	00100293          	li	t0,1
  slli t0, t0, 31
80000088:	01f29293          	slli	t0,t0,0x1f
#if __riscv_xlen == 64
  bgez t0, 1f
#else
  bltz t0, 1f
8000008c:	0002ca63          	bltz	t0,800000a0 <_start+0xa0>
#endif
2:
  li a0, 1
80000090:	00100513          	li	a0,1
  sw a0, tohost, t0
80000094:	00001297          	auipc	t0,0x1
80000098:	f6a2a623          	sw	a0,-148(t0) # 80001000 <tohost>
  j 2b
8000009c:	ff5ff06f          	j	80000090 <_start+0x90>
  fmv.s.x f31,x0
1:
#endif

  # initialize trap vector
  la t0, trap_entry
800000a0:	00000297          	auipc	t0,0x0
800000a4:	04028293          	addi	t0,t0,64 # 800000e0 <trap_entry>
  csrw mtvec, t0
800000a8:	30529073          	csrw	mtvec,t0

  # initialize global pointer
.option push
.option norelax
  la gp, __global_pointer$
800000ac:	0000e197          	auipc	gp,0xe
800000b0:	18418193          	addi	gp,gp,388 # 8000e230 <__global_pointer$>
.option pop

  la  tp, _end + 63
800000b4:	98f18213          	addi	tp,gp,-1649 # 8000dbbf <_end+0x3f>
  and tp, tp, -64
800000b8:	fc027213          	andi	tp,tp,-64

  # get core id
  csrr a0, mhartid
800000bc:	f1402573          	csrr	a0,mhartid
  # for now, assume only 1 core
  li a1, 1
800000c0:	00100593          	li	a1,1
1:bgeu a0, a1, 1b
800000c4:	00b57063          	bleu	a1,a0,800000c4 <_start+0xc4>

  # give each core 128KB of stack + TLS
#define STKSHIFT 17
  add sp, a0, 1
800000c8:	00150113          	addi	sp,a0,1
  sll sp, sp, STKSHIFT
800000cc:	01111113          	slli	sp,sp,0x11
  add sp, sp, tp
800000d0:	00410133          	add	sp,sp,tp
  sll a2, a0, STKSHIFT
800000d4:	01151613          	slli	a2,a0,0x11
  add tp, tp, a2
800000d8:	00c20233          	add	tp,tp,a2

  j _init
800000dc:	1ad0806f          	j	80008a88 <_init>

800000e0 <trap_entry>:

  .align 2
trap_entry:
  addi sp, sp, -272
800000e0:	ef010113          	addi	sp,sp,-272

  SREG x1, 1*REGBYTES(sp)
800000e4:	00112223          	sw	ra,4(sp)
  SREG x2, 2*REGBYTES(sp)
800000e8:	00212423          	sw	sp,8(sp)
  SREG x3, 3*REGBYTES(sp)
800000ec:	00312623          	sw	gp,12(sp)
  SREG x4, 4*REGBYTES(sp)
800000f0:	00412823          	sw	tp,16(sp)
  SREG x5, 5*REGBYTES(sp)
800000f4:	00512a23          	sw	t0,20(sp)
  SREG x6, 6*REGBYTES(sp)
800000f8:	00612c23          	sw	t1,24(sp)
  SREG x7, 7*REGBYTES(sp)
800000fc:	00712e23          	sw	t2,28(sp)
  SREG x8, 8*REGBYTES(sp)
80000100:	02812023          	sw	s0,32(sp)
  SREG x9, 9*REGBYTES(sp)
80000104:	02912223          	sw	s1,36(sp)
  SREG x10, 10*REGBYTES(sp)
80000108:	02a12423          	sw	a0,40(sp)
  SREG x11, 11*REGBYTES(sp)
8000010c:	02b12623          	sw	a1,44(sp)
  SREG x12, 12*REGBYTES(sp)
80000110:	02c12823          	sw	a2,48(sp)
  SREG x13, 13*REGBYTES(sp)
80000114:	02d12a23          	sw	a3,52(sp)
  SREG x14, 14*REGBYTES(sp)
80000118:	02e12c23          	sw	a4,56(sp)
  SREG x15, 15*REGBYTES(sp)
8000011c:	02f12e23          	sw	a5,60(sp)
  SREG x16, 16*REGBYTES(sp)
80000120:	05012023          	sw	a6,64(sp)
  SREG x17, 17*REGBYTES(sp)
80000124:	05112223          	sw	a7,68(sp)
  SREG x18, 18*REGBYTES(sp)
80000128:	05212423          	sw	s2,72(sp)
  SREG x19, 19*REGBYTES(sp)
8000012c:	05312623          	sw	s3,76(sp)
  SREG x20, 20*REGBYTES(sp)
80000130:	05412823          	sw	s4,80(sp)
  SREG x21, 21*REGBYTES(sp)
80000134:	05512a23          	sw	s5,84(sp)
  SREG x22, 22*REGBYTES(sp)
80000138:	05612c23          	sw	s6,88(sp)
  SREG x23, 23*REGBYTES(sp)
8000013c:	05712e23          	sw	s7,92(sp)
  SREG x24, 24*REGBYTES(sp)
80000140:	07812023          	sw	s8,96(sp)
  SREG x25, 25*REGBYTES(sp)
80000144:	07912223          	sw	s9,100(sp)
  SREG x26, 26*REGBYTES(sp)
80000148:	07a12423          	sw	s10,104(sp)
  SREG x27, 27*REGBYTES(sp)
8000014c:	07b12623          	sw	s11,108(sp)
  SREG x28, 28*REGBYTES(sp)
80000150:	07c12823          	sw	t3,112(sp)
  SREG x29, 29*REGBYTES(sp)
80000154:	07d12a23          	sw	t4,116(sp)
  SREG x30, 30*REGBYTES(sp)
80000158:	07e12c23          	sw	t5,120(sp)
  SREG x31, 31*REGBYTES(sp)
8000015c:	07f12e23          	sw	t6,124(sp)

  csrr a0, mcause
80000160:	34202573          	csrr	a0,mcause
  csrr a1, mepc
80000164:	341025f3          	csrr	a1,mepc
  mv a2, sp
80000168:	00010613          	mv	a2,sp
  jal handle_trap
8000016c:	75c080ef          	jal	ra,800088c8 <handle_trap>
  csrw mepc, a0
80000170:	34151073          	csrw	mepc,a0

  # Remain in M-mode after eret
  li t0, MSTATUS_MPP
80000174:	000022b7          	lui	t0,0x2
80000178:	80028293          	addi	t0,t0,-2048 # 1800 <buflen.2800+0x177c>
  csrs mstatus, t0
8000017c:	3002a073          	csrs	mstatus,t0

  LREG x1, 1*REGBYTES(sp)
80000180:	00412083          	lw	ra,4(sp)
  LREG x2, 2*REGBYTES(sp)
80000184:	00812103          	lw	sp,8(sp)
  LREG x3, 3*REGBYTES(sp)
80000188:	00c12183          	lw	gp,12(sp)
  LREG x4, 4*REGBYTES(sp)
8000018c:	01012203          	lw	tp,16(sp)
  LREG x5, 5*REGBYTES(sp)
80000190:	01412283          	lw	t0,20(sp)
  LREG x6, 6*REGBYTES(sp)
80000194:	01812303          	lw	t1,24(sp)
  LREG x7, 7*REGBYTES(sp)
80000198:	01c12383          	lw	t2,28(sp)
  LREG x8, 8*REGBYTES(sp)
8000019c:	02012403          	lw	s0,32(sp)
  LREG x9, 9*REGBYTES(sp)
800001a0:	02412483          	lw	s1,36(sp)
  LREG x10, 10*REGBYTES(sp)
800001a4:	02812503          	lw	a0,40(sp)
  LREG x11, 11*REGBYTES(sp)
800001a8:	02c12583          	lw	a1,44(sp)
  LREG x12, 12*REGBYTES(sp)
800001ac:	03012603          	lw	a2,48(sp)
  LREG x13, 13*REGBYTES(sp)
800001b0:	03412683          	lw	a3,52(sp)
  LREG x14, 14*REGBYTES(sp)
800001b4:	03812703          	lw	a4,56(sp)
  LREG x15, 15*REGBYTES(sp)
800001b8:	03c12783          	lw	a5,60(sp)
  LREG x16, 16*REGBYTES(sp)
800001bc:	04012803          	lw	a6,64(sp)
  LREG x17, 17*REGBYTES(sp)
800001c0:	04412883          	lw	a7,68(sp)
  LREG x18, 18*REGBYTES(sp)
800001c4:	04812903          	lw	s2,72(sp)
  LREG x19, 19*REGBYTES(sp)
800001c8:	04c12983          	lw	s3,76(sp)
  LREG x20, 20*REGBYTES(sp)
800001cc:	05012a03          	lw	s4,80(sp)
  LREG x21, 21*REGBYTES(sp)
800001d0:	05412a83          	lw	s5,84(sp)
  LREG x22, 22*REGBYTES(sp)
800001d4:	05812b03          	lw	s6,88(sp)
  LREG x23, 23*REGBYTES(sp)
800001d8:	05c12b83          	lw	s7,92(sp)
  LREG x24, 24*REGBYTES(sp)
800001dc:	06012c03          	lw	s8,96(sp)
  LREG x25, 25*REGBYTES(sp)
800001e0:	06412c83          	lw	s9,100(sp)
  LREG x26, 26*REGBYTES(sp)
800001e4:	06812d03          	lw	s10,104(sp)
  LREG x27, 27*REGBYTES(sp)
800001e8:	06c12d83          	lw	s11,108(sp)
  LREG x28, 28*REGBYTES(sp)
800001ec:	07012e03          	lw	t3,112(sp)
  LREG x29, 29*REGBYTES(sp)
800001f0:	07412e83          	lw	t4,116(sp)
  LREG x30, 30*REGBYTES(sp)
800001f4:	07812f03          	lw	t5,120(sp)
  LREG x31, 31*REGBYTES(sp)
800001f8:	07c12f83          	lw	t6,124(sp)

  addi sp, sp, 272
800001fc:	11010113          	addi	sp,sp,272
  mret
80000200:	30200073          	mret

Disassembly of section .text:

80001048 <schedule>:
 * See schedule_token(), which this uses, for details.
 * @param action Pointer to an action on the self struct.
 * @param offset The time offset over and above that in the action.
 * @return A handle to the event, or 0 if no event was scheduled, or -1 for error.
 */
handle_t schedule(void* action, interval_t offset) {
80001048:	fe010113          	addi	sp,sp,-32
8000104c:	00112e23          	sw	ra,28(sp)
80001050:	00812c23          	sw	s0,24(sp)
80001054:	02010413          	addi	s0,sp,32
80001058:	fea42623          	sw	a0,-20(s0)
8000105c:	feb42023          	sw	a1,-32(s0)
80001060:	fec42223          	sw	a2,-28(s0)
    return _lf_schedule_token(action, offset, NULL);
80001064:	00000693          	li	a3,0
80001068:	fe042583          	lw	a1,-32(s0)
8000106c:	fe442603          	lw	a2,-28(s0)
80001070:	fec42503          	lw	a0,-20(s0)
80001074:	301040ef          	jal	ra,80005b74 <_lf_schedule_token>
80001078:	00050793          	mv	a5,a0
}
8000107c:	00078513          	mv	a0,a5
80001080:	01c12083          	lw	ra,28(sp)
80001084:	01812403          	lw	s0,24(sp)
80001088:	02010113          	addi	sp,sp,32
8000108c:	00008067          	ret

80001090 <schedule_int>:
 * Variant of schedule_value when the value is an integer.
 * See reactor.h for documentation.
 * @param action Pointer to an action on the self struct.
 */
handle_t schedule_int(void* action, interval_t extra_delay, int value)
{
80001090:	fe010113          	addi	sp,sp,-32
80001094:	00112e23          	sw	ra,28(sp)
80001098:	00812c23          	sw	s0,24(sp)
8000109c:	02010413          	addi	s0,sp,32
800010a0:	fea42623          	sw	a0,-20(s0)
800010a4:	feb42023          	sw	a1,-32(s0)
800010a8:	fec42223          	sw	a2,-28(s0)
800010ac:	fed42423          	sw	a3,-24(s0)
    return _lf_schedule_int(action, extra_delay, value);
800010b0:	fe842683          	lw	a3,-24(s0)
800010b4:	fe042583          	lw	a1,-32(s0)
800010b8:	fe442603          	lw	a2,-28(s0)
800010bc:	fec42503          	lw	a0,-20(s0)
800010c0:	780030ef          	jal	ra,80004840 <_lf_schedule_int>
800010c4:	00050793          	mv	a5,a0
}
800010c8:	00078513          	mv	a0,a5
800010cc:	01c12083          	lw	ra,28(sp)
800010d0:	01812403          	lw	s0,24(sp)
800010d4:	02010113          	addi	sp,sp,32
800010d8:	00008067          	ret

800010dc <schedule_token>:
/**
 * Schedule the specified trigger at current_time plus the offset of the
 * specified trigger plus the delay.
 * See reactor.h for documentation.
 */
handle_t schedule_token(void* action, interval_t extra_delay, lf_token_t* token) {
800010dc:	fe010113          	addi	sp,sp,-32
800010e0:	00112e23          	sw	ra,28(sp)
800010e4:	00812c23          	sw	s0,24(sp)
800010e8:	02010413          	addi	s0,sp,32
800010ec:	fea42623          	sw	a0,-20(s0)
800010f0:	feb42023          	sw	a1,-32(s0)
800010f4:	fec42223          	sw	a2,-28(s0)
800010f8:	fed42423          	sw	a3,-24(s0)
    return _lf_schedule_token(action, extra_delay, token);
800010fc:	fe842683          	lw	a3,-24(s0)
80001100:	fe042583          	lw	a1,-32(s0)
80001104:	fe442603          	lw	a2,-28(s0)
80001108:	fec42503          	lw	a0,-20(s0)
8000110c:	269040ef          	jal	ra,80005b74 <_lf_schedule_token>
80001110:	00050793          	mv	a5,a0
}
80001114:	00078513          	mv	a0,a5
80001118:	01c12083          	lw	ra,28(sp)
8000111c:	01812403          	lw	s0,24(sp)
80001120:	02010113          	addi	sp,sp,32
80001124:	00008067          	ret

80001128 <schedule_copy>:
/**
 * Schedule an action to occur with the specified value and time offset
 * with a copy of the specified value.
 * See reactor.h for documentation.
 */
handle_t schedule_copy(void* action, interval_t offset, void* value, int length) {
80001128:	fd010113          	addi	sp,sp,-48
8000112c:	02112623          	sw	ra,44(sp)
80001130:	02812423          	sw	s0,40(sp)
80001134:	03010413          	addi	s0,sp,48
80001138:	fea42623          	sw	a0,-20(s0)
8000113c:	feb42023          	sw	a1,-32(s0)
80001140:	fec42223          	sw	a2,-28(s0)
80001144:	fed42423          	sw	a3,-24(s0)
80001148:	fce42e23          	sw	a4,-36(s0)
    return _lf_schedule_copy(action, offset, value, length);
8000114c:	fdc42703          	lw	a4,-36(s0)
80001150:	fe842683          	lw	a3,-24(s0)
80001154:	fe042583          	lw	a1,-32(s0)
80001158:	fe442603          	lw	a2,-28(s0)
8000115c:	fec42503          	lw	a0,-20(s0)
80001160:	2f5040ef          	jal	ra,80005c54 <_lf_schedule_copy>
80001164:	00050793          	mv	a5,a0
}
80001168:	00078513          	mv	a0,a5
8000116c:	02c12083          	lw	ra,44(sp)
80001170:	02812403          	lw	s0,40(sp)
80001174:	03010113          	addi	sp,sp,48
80001178:	00008067          	ret

8000117c <schedule_value>:

/**
 * Variant of schedule_token that creates a token to carry the specified value.
 * See reactor.h for documentation.
 */
handle_t schedule_value(void* action, interval_t extra_delay, void* value, int length) {
8000117c:	fd010113          	addi	sp,sp,-48
80001180:	02112623          	sw	ra,44(sp)
80001184:	02812423          	sw	s0,40(sp)
80001188:	03010413          	addi	s0,sp,48
8000118c:	fea42623          	sw	a0,-20(s0)
80001190:	feb42023          	sw	a1,-32(s0)
80001194:	fec42223          	sw	a2,-28(s0)
80001198:	fed42423          	sw	a3,-24(s0)
8000119c:	fce42e23          	sw	a4,-36(s0)
    return _lf_schedule_value(action, extra_delay, value, length);
800011a0:	fdc42703          	lw	a4,-36(s0)
800011a4:	fe842683          	lw	a3,-24(s0)
800011a8:	fe042583          	lw	a1,-32(s0)
800011ac:	fe442603          	lw	a2,-28(s0)
800011b0:	fec42503          	lw	a0,-20(s0)
800011b4:	219040ef          	jal	ra,80005bcc <_lf_schedule_value>
800011b8:	00050793          	mv	a5,a0
}
800011bc:	00078513          	mv	a0,a5
800011c0:	02c12083          	lw	ra,44(sp)
800011c4:	02812403          	lw	s0,40(sp)
800011c8:	03010113          	addi	sp,sp,48
800011cc:	00008067          	ret

800011d0 <verify>:
#include <stdint.h>

#define static_assert(cond) switch(0) { case 0: case !!(long)(cond): ; }

static int verify(int n, const volatile int* test, const int* verify)
{
800011d0:	fc010113          	addi	sp,sp,-64
800011d4:	02812e23          	sw	s0,60(sp)
800011d8:	04010413          	addi	s0,sp,64
800011dc:	fca42623          	sw	a0,-52(s0)
800011e0:	fcb42423          	sw	a1,-56(s0)
800011e4:	fcc42223          	sw	a2,-60(s0)
  int i;
  // Unrolled for faster verification
  for (i = 0; i < n/2*2; i+=2)
800011e8:	fe042623          	sw	zero,-20(s0)
800011ec:	0a80006f          	j	80001294 <verify+0xc4>
  {
    int t0 = test[i], t1 = test[i+1];
800011f0:	fec42783          	lw	a5,-20(s0)
800011f4:	00279793          	slli	a5,a5,0x2
800011f8:	fc842703          	lw	a4,-56(s0)
800011fc:	00f707b3          	add	a5,a4,a5
80001200:	0007a783          	lw	a5,0(a5)
80001204:	fef42423          	sw	a5,-24(s0)
80001208:	fec42783          	lw	a5,-20(s0)
8000120c:	00178793          	addi	a5,a5,1
80001210:	00279793          	slli	a5,a5,0x2
80001214:	fc842703          	lw	a4,-56(s0)
80001218:	00f707b3          	add	a5,a4,a5
8000121c:	0007a783          	lw	a5,0(a5)
80001220:	fef42223          	sw	a5,-28(s0)
    int v0 = verify[i], v1 = verify[i+1];
80001224:	fec42783          	lw	a5,-20(s0)
80001228:	00279793          	slli	a5,a5,0x2
8000122c:	fc442703          	lw	a4,-60(s0)
80001230:	00f707b3          	add	a5,a4,a5
80001234:	0007a783          	lw	a5,0(a5)
80001238:	fef42023          	sw	a5,-32(s0)
8000123c:	fec42783          	lw	a5,-20(s0)
80001240:	00178793          	addi	a5,a5,1
80001244:	00279793          	slli	a5,a5,0x2
80001248:	fc442703          	lw	a4,-60(s0)
8000124c:	00f707b3          	add	a5,a4,a5
80001250:	0007a783          	lw	a5,0(a5)
80001254:	fcf42e23          	sw	a5,-36(s0)
    if (t0 != v0) return i+1;
80001258:	fe842703          	lw	a4,-24(s0)
8000125c:	fe042783          	lw	a5,-32(s0)
80001260:	00f70863          	beq	a4,a5,80001270 <verify+0xa0>
80001264:	fec42783          	lw	a5,-20(s0)
80001268:	00178793          	addi	a5,a5,1
8000126c:	0a00006f          	j	8000130c <verify+0x13c>
    if (t1 != v1) return i+2;
80001270:	fe442703          	lw	a4,-28(s0)
80001274:	fdc42783          	lw	a5,-36(s0)
80001278:	00f70863          	beq	a4,a5,80001288 <verify+0xb8>
8000127c:	fec42783          	lw	a5,-20(s0)
80001280:	00278793          	addi	a5,a5,2
80001284:	0880006f          	j	8000130c <verify+0x13c>
  for (i = 0; i < n/2*2; i+=2)
80001288:	fec42783          	lw	a5,-20(s0)
8000128c:	00278793          	addi	a5,a5,2
80001290:	fef42623          	sw	a5,-20(s0)
80001294:	fcc42783          	lw	a5,-52(s0)
80001298:	01f7d713          	srli	a4,a5,0x1f
8000129c:	00f707b3          	add	a5,a4,a5
800012a0:	4017d793          	srai	a5,a5,0x1
800012a4:	00179793          	slli	a5,a5,0x1
800012a8:	fec42703          	lw	a4,-20(s0)
800012ac:	f4f742e3          	blt	a4,a5,800011f0 <verify+0x20>
  }
  if (n % 2 != 0 && test[n-1] != verify[n-1])
800012b0:	fcc42783          	lw	a5,-52(s0)
800012b4:	0017f793          	andi	a5,a5,1
800012b8:	04078863          	beqz	a5,80001308 <verify+0x138>
800012bc:	fcc42703          	lw	a4,-52(s0)
800012c0:	400007b7          	lui	a5,0x40000
800012c4:	fff78793          	addi	a5,a5,-1 # 3fffffff <buflen.2800+0x3fffff7b>
800012c8:	00f707b3          	add	a5,a4,a5
800012cc:	00279793          	slli	a5,a5,0x2
800012d0:	fc842703          	lw	a4,-56(s0)
800012d4:	00f707b3          	add	a5,a4,a5
800012d8:	0007a703          	lw	a4,0(a5)
800012dc:	fcc42683          	lw	a3,-52(s0)
800012e0:	400007b7          	lui	a5,0x40000
800012e4:	fff78793          	addi	a5,a5,-1 # 3fffffff <buflen.2800+0x3fffff7b>
800012e8:	00f687b3          	add	a5,a3,a5
800012ec:	00279793          	slli	a5,a5,0x2
800012f0:	fc442683          	lw	a3,-60(s0)
800012f4:	00f687b3          	add	a5,a3,a5
800012f8:	0007a783          	lw	a5,0(a5)
800012fc:	00f70663          	beq	a4,a5,80001308 <verify+0x138>
    return n;
80001300:	fcc42783          	lw	a5,-52(s0)
80001304:	0080006f          	j	8000130c <verify+0x13c>
  return 0;
80001308:	00000793          	li	a5,0
}
8000130c:	00078513          	mv	a0,a5
80001310:	03c12403          	lw	s0,60(sp)
80001314:	04010113          	addi	sp,sp,64
80001318:	00008067          	ret

8000131c <verifyDouble>:

static int verifyDouble(int n, const volatile double* test, const double* verify)
{
8000131c:	fb010113          	addi	sp,sp,-80
80001320:	04112623          	sw	ra,76(sp)
80001324:	04812423          	sw	s0,72(sp)
80001328:	04912223          	sw	s1,68(sp)
8000132c:	05010413          	addi	s0,sp,80
80001330:	faa42e23          	sw	a0,-68(s0)
80001334:	fab42c23          	sw	a1,-72(s0)
80001338:	fac42a23          	sw	a2,-76(s0)
  int i;
  // Unrolled for faster verification
  for (i = 0; i < n/2*2; i+=2)
8000133c:	fe042623          	sw	zero,-20(s0)
80001340:	1140006f          	j	80001454 <verifyDouble+0x138>
  {
    double t0 = test[i], t1 = test[i+1];
80001344:	fec42783          	lw	a5,-20(s0)
80001348:	00379793          	slli	a5,a5,0x3
8000134c:	fb842703          	lw	a4,-72(s0)
80001350:	00f707b3          	add	a5,a4,a5
80001354:	0047a803          	lw	a6,4(a5)
80001358:	0007a783          	lw	a5,0(a5)
8000135c:	fef42023          	sw	a5,-32(s0)
80001360:	ff042223          	sw	a6,-28(s0)
80001364:	fec42783          	lw	a5,-20(s0)
80001368:	00178793          	addi	a5,a5,1
8000136c:	00379793          	slli	a5,a5,0x3
80001370:	fb842703          	lw	a4,-72(s0)
80001374:	00f707b3          	add	a5,a4,a5
80001378:	0047a803          	lw	a6,4(a5)
8000137c:	0007a783          	lw	a5,0(a5)
80001380:	fcf42c23          	sw	a5,-40(s0)
80001384:	fd042e23          	sw	a6,-36(s0)
    double v0 = verify[i], v1 = verify[i+1];
80001388:	fec42783          	lw	a5,-20(s0)
8000138c:	00379793          	slli	a5,a5,0x3
80001390:	fb442703          	lw	a4,-76(s0)
80001394:	00f707b3          	add	a5,a4,a5
80001398:	0047a803          	lw	a6,4(a5)
8000139c:	0007a783          	lw	a5,0(a5)
800013a0:	fcf42823          	sw	a5,-48(s0)
800013a4:	fd042a23          	sw	a6,-44(s0)
800013a8:	fec42783          	lw	a5,-20(s0)
800013ac:	00178793          	addi	a5,a5,1
800013b0:	00379793          	slli	a5,a5,0x3
800013b4:	fb442703          	lw	a4,-76(s0)
800013b8:	00f707b3          	add	a5,a4,a5
800013bc:	0047a803          	lw	a6,4(a5)
800013c0:	0007a783          	lw	a5,0(a5)
800013c4:	fcf42423          	sw	a5,-56(s0)
800013c8:	fd042623          	sw	a6,-52(s0)
    int eq1 = t0 == v0, eq2 = t1 == v1;
800013cc:	00100493          	li	s1,1
800013d0:	fd042603          	lw	a2,-48(s0)
800013d4:	fd442683          	lw	a3,-44(s0)
800013d8:	fe042503          	lw	a0,-32(s0)
800013dc:	fe442583          	lw	a1,-28(s0)
800013e0:	7cc090ef          	jal	ra,8000abac <__eqdf2>
800013e4:	00050793          	mv	a5,a0
800013e8:	00078463          	beqz	a5,800013f0 <verifyDouble+0xd4>
800013ec:	00000493          	li	s1,0
800013f0:	0ff4f793          	andi	a5,s1,255
800013f4:	fcf42223          	sw	a5,-60(s0)
800013f8:	00100493          	li	s1,1
800013fc:	fc842603          	lw	a2,-56(s0)
80001400:	fcc42683          	lw	a3,-52(s0)
80001404:	fd842503          	lw	a0,-40(s0)
80001408:	fdc42583          	lw	a1,-36(s0)
8000140c:	7a0090ef          	jal	ra,8000abac <__eqdf2>
80001410:	00050793          	mv	a5,a0
80001414:	00078463          	beqz	a5,8000141c <verifyDouble+0x100>
80001418:	00000493          	li	s1,0
8000141c:	0ff4f793          	andi	a5,s1,255
80001420:	fcf42023          	sw	a5,-64(s0)
    if (!(eq1 & eq2)) return i+1+eq1;
80001424:	fc442703          	lw	a4,-60(s0)
80001428:	fc042783          	lw	a5,-64(s0)
8000142c:	00f777b3          	and	a5,a4,a5
80001430:	00079c63          	bnez	a5,80001448 <verifyDouble+0x12c>
80001434:	fec42783          	lw	a5,-20(s0)
80001438:	00178713          	addi	a4,a5,1
8000143c:	fc442783          	lw	a5,-60(s0)
80001440:	00f707b3          	add	a5,a4,a5
80001444:	0a80006f          	j	800014ec <verifyDouble+0x1d0>
  for (i = 0; i < n/2*2; i+=2)
80001448:	fec42783          	lw	a5,-20(s0)
8000144c:	00278793          	addi	a5,a5,2
80001450:	fef42623          	sw	a5,-20(s0)
80001454:	fbc42783          	lw	a5,-68(s0)
80001458:	01f7d713          	srli	a4,a5,0x1f
8000145c:	00f707b3          	add	a5,a4,a5
80001460:	4017d793          	srai	a5,a5,0x1
80001464:	00179793          	slli	a5,a5,0x1
80001468:	fec42703          	lw	a4,-20(s0)
8000146c:	ecf74ce3          	blt	a4,a5,80001344 <verifyDouble+0x28>
  }
  if (n % 2 != 0 && test[n-1] != verify[n-1])
80001470:	fbc42783          	lw	a5,-68(s0)
80001474:	0017f793          	andi	a5,a5,1
80001478:	06078863          	beqz	a5,800014e8 <verifyDouble+0x1cc>
8000147c:	fbc42703          	lw	a4,-68(s0)
80001480:	200007b7          	lui	a5,0x20000
80001484:	fff78793          	addi	a5,a5,-1 # 1fffffff <buflen.2800+0x1fffff7b>
80001488:	00f707b3          	add	a5,a4,a5
8000148c:	00379793          	slli	a5,a5,0x3
80001490:	fb842703          	lw	a4,-72(s0)
80001494:	00f707b3          	add	a5,a4,a5
80001498:	0047a803          	lw	a6,4(a5)
8000149c:	0007a783          	lw	a5,0(a5)
800014a0:	fbc42683          	lw	a3,-68(s0)
800014a4:	20000737          	lui	a4,0x20000
800014a8:	fff70713          	addi	a4,a4,-1 # 1fffffff <buflen.2800+0x1fffff7b>
800014ac:	00e68733          	add	a4,a3,a4
800014b0:	00371713          	slli	a4,a4,0x3
800014b4:	fb442683          	lw	a3,-76(s0)
800014b8:	00e68733          	add	a4,a3,a4
800014bc:	00072683          	lw	a3,0(a4)
800014c0:	00472703          	lw	a4,4(a4)
800014c4:	00068613          	mv	a2,a3
800014c8:	00070693          	mv	a3,a4
800014cc:	00078513          	mv	a0,a5
800014d0:	00080593          	mv	a1,a6
800014d4:	6d8090ef          	jal	ra,8000abac <__eqdf2>
800014d8:	00050793          	mv	a5,a0
800014dc:	00078663          	beqz	a5,800014e8 <verifyDouble+0x1cc>
    return n;
800014e0:	fbc42783          	lw	a5,-68(s0)
800014e4:	0080006f          	j	800014ec <verifyDouble+0x1d0>
  return 0;
800014e8:	00000793          	li	a5,0
}
800014ec:	00078513          	mv	a0,a5
800014f0:	04c12083          	lw	ra,76(sp)
800014f4:	04812403          	lw	s0,72(sp)
800014f8:	04412483          	lw	s1,68(sp)
800014fc:	05010113          	addi	sp,sp,80
80001500:	00008067          	ret

80001504 <barrier>:

static void __attribute__((noinline)) barrier(int ncores)
{
80001504:	fe010113          	addi	sp,sp,-32
80001508:	00812e23          	sw	s0,28(sp)
8000150c:	02010413          	addi	s0,sp,32
80001510:	fea42623          	sw	a0,-20(s0)
  static volatile int sense;
  static volatile int count;
  static __thread int threadsense;

  __sync_synchronize();
80001514:	0ff0000f          	fence

  threadsense = !threadsense;
80001518:	00022783          	lw	a5,0(tp) # 0 <threadsense.3419>
8000151c:	0017b793          	seqz	a5,a5
80001520:	0ff7f793          	andi	a5,a5,255
80001524:	00078713          	mv	a4,a5
80001528:	00e22023          	sw	a4,0(tp) # 0 <threadsense.3419>
  if (__sync_fetch_and_add(&count, 1) == ncores-1)
8000152c:	8d018793          	addi	a5,gp,-1840 # 8000db00 <count.3418>
80001530:	00100713          	li	a4,1
80001534:	0f50000f          	fence	iorw,ow
80001538:	04e7a6af          	amoadd.w.aq	a3,a4,(a5)
8000153c:	00068713          	mv	a4,a3
80001540:	fec42783          	lw	a5,-20(s0)
80001544:	fff78793          	addi	a5,a5,-1
80001548:	00f71e63          	bne	a4,a5,80001564 <barrier+0x60>
  {
    count = 0;
8000154c:	8d018793          	addi	a5,gp,-1840 # 8000db00 <count.3418>
80001550:	0007a023          	sw	zero,0(a5)
    sense = threadsense;
80001554:	00022703          	lw	a4,0(tp) # 0 <threadsense.3419>
80001558:	8d418793          	addi	a5,gp,-1836 # 8000db04 <sense.3417>
8000155c:	00e7a023          	sw	a4,0(a5)
80001560:	0180006f          	j	80001578 <barrier+0x74>
  }
  else while(sense != threadsense)
80001564:	00000013          	nop
80001568:	8d418793          	addi	a5,gp,-1836 # 8000db04 <sense.3417>
8000156c:	0007a703          	lw	a4,0(a5)
80001570:	00022783          	lw	a5,0(tp) # 0 <threadsense.3419>
80001574:	fef71ae3          	bne	a4,a5,80001568 <barrier+0x64>
    ;

  __sync_synchronize();
80001578:	0ff0000f          	fence
}
8000157c:	00000013          	nop
80001580:	01c12403          	lw	s0,28(sp)
80001584:	02010113          	addi	sp,sp,32
80001588:	00008067          	ret

8000158c <lfsr>:

static uint64_t lfsr(uint64_t x)
{
8000158c:	fd010113          	addi	sp,sp,-48
80001590:	02812623          	sw	s0,44(sp)
80001594:	03010413          	addi	s0,sp,48
80001598:	fca42c23          	sw	a0,-40(s0)
8000159c:	fcb42e23          	sw	a1,-36(s0)
  uint64_t bit = (x ^ (x >> 1)) & 1;
800015a0:	fdc42603          	lw	a2,-36(s0)
800015a4:	01f61613          	slli	a2,a2,0x1f
800015a8:	fd842583          	lw	a1,-40(s0)
800015ac:	0015d693          	srli	a3,a1,0x1
800015b0:	00d666b3          	or	a3,a2,a3
800015b4:	fdc42603          	lw	a2,-36(s0)
800015b8:	00165713          	srli	a4,a2,0x1
800015bc:	fd842603          	lw	a2,-40(s0)
800015c0:	00d64333          	xor	t1,a2,a3
800015c4:	fdc42603          	lw	a2,-36(s0)
800015c8:	00e643b3          	xor	t2,a2,a4
800015cc:	00137713          	andi	a4,t1,1
800015d0:	fee42423          	sw	a4,-24(s0)
800015d4:	0003f713          	andi	a4,t2,0
800015d8:	fee42623          	sw	a4,-20(s0)
  return (x >> 1) | (bit << 62);
800015dc:	fdc42703          	lw	a4,-36(s0)
800015e0:	01f71713          	slli	a4,a4,0x1f
800015e4:	fd842683          	lw	a3,-40(s0)
800015e8:	0016d793          	srli	a5,a3,0x1
800015ec:	00f767b3          	or	a5,a4,a5
800015f0:	fdc42703          	lw	a4,-36(s0)
800015f4:	00175813          	srli	a6,a4,0x1
800015f8:	fe842703          	lw	a4,-24(s0)
800015fc:	01e71e93          	slli	t4,a4,0x1e
80001600:	00000e13          	li	t3,0
80001604:	01c7ef33          	or	t5,a5,t3
80001608:	01d86fb3          	or	t6,a6,t4
8000160c:	000f0793          	mv	a5,t5
80001610:	000f8813          	mv	a6,t6
}
80001614:	00078513          	mv	a0,a5
80001618:	00080593          	mv	a1,a6
8000161c:	02c12403          	lw	s0,44(sp)
80001620:	03010113          	addi	sp,sp,48
80001624:	00008067          	ret

80001628 <insn_len>:

static uintptr_t insn_len(uintptr_t pc)
{
80001628:	fe010113          	addi	sp,sp,-32
8000162c:	00812e23          	sw	s0,28(sp)
80001630:	02010413          	addi	s0,sp,32
80001634:	fea42623          	sw	a0,-20(s0)
  return (*(unsigned short*)pc & 3) ? 4 : 2;
80001638:	fec42783          	lw	a5,-20(s0)
8000163c:	0007d783          	lhu	a5,0(a5)
80001640:	0037f793          	andi	a5,a5,3
80001644:	00078663          	beqz	a5,80001650 <insn_len+0x28>
80001648:	00400793          	li	a5,4
8000164c:	0080006f          	j	80001654 <insn_len+0x2c>
80001650:	00200793          	li	a5,2
}
80001654:	00078513          	mv	a0,a5
80001658:	01c12403          	lw	s0,28(sp)
8000165c:	02010113          	addi	sp,sp,32
80001660:	00008067          	ret

80001664 <compare_tags>:
 * is greater.
 * @param tag1
 * @param tag2
 * @return -1, 0, or 1 depending on the relation.
 */
int compare_tags(tag_t tag1, tag_t tag2) {
80001664:	ff010113          	addi	sp,sp,-16
80001668:	00812623          	sw	s0,12(sp)
8000166c:	00912423          	sw	s1,8(sp)
80001670:	01212223          	sw	s2,4(sp)
80001674:	01010413          	addi	s0,sp,16
80001678:	00050913          	mv	s2,a0
8000167c:	00058493          	mv	s1,a1
    if (tag1.time < tag2.time) {
80001680:	00092783          	lw	a5,0(s2)
80001684:	00492803          	lw	a6,4(s2)
80001688:	0004a683          	lw	a3,0(s1)
8000168c:	0044a703          	lw	a4,4(s1)
80001690:	00070593          	mv	a1,a4
80001694:	00080613          	mv	a2,a6
80001698:	00b64c63          	blt	a2,a1,800016b0 <compare_tags+0x4c>
8000169c:	00070593          	mv	a1,a4
800016a0:	00080613          	mv	a2,a6
800016a4:	00c59a63          	bne	a1,a2,800016b8 <compare_tags+0x54>
800016a8:	00068713          	mv	a4,a3
800016ac:	00e7f663          	bleu	a4,a5,800016b8 <compare_tags+0x54>
        return -1;
800016b0:	fff00793          	li	a5,-1
800016b4:	0680006f          	j	8000171c <compare_tags+0xb8>
    } else if (tag1.time > tag2.time) {
800016b8:	00092683          	lw	a3,0(s2)
800016bc:	00492703          	lw	a4,4(s2)
800016c0:	0004a783          	lw	a5,0(s1)
800016c4:	0044a803          	lw	a6,4(s1)
800016c8:	00070593          	mv	a1,a4
800016cc:	00080613          	mv	a2,a6
800016d0:	00b64c63          	blt	a2,a1,800016e8 <compare_tags+0x84>
800016d4:	00070593          	mv	a1,a4
800016d8:	00080613          	mv	a2,a6
800016dc:	00c59a63          	bne	a1,a2,800016f0 <compare_tags+0x8c>
800016e0:	00068713          	mv	a4,a3
800016e4:	00e7f663          	bleu	a4,a5,800016f0 <compare_tags+0x8c>
        return 1;
800016e8:	00100793          	li	a5,1
800016ec:	0300006f          	j	8000171c <compare_tags+0xb8>
    } else if (tag1.microstep < tag2.microstep) {
800016f0:	00892703          	lw	a4,8(s2)
800016f4:	0084a783          	lw	a5,8(s1)
800016f8:	00f77663          	bleu	a5,a4,80001704 <compare_tags+0xa0>
        return -1;
800016fc:	fff00793          	li	a5,-1
80001700:	01c0006f          	j	8000171c <compare_tags+0xb8>
    } else if (tag1.microstep > tag2.microstep) {
80001704:	00892703          	lw	a4,8(s2)
80001708:	0084a783          	lw	a5,8(s1)
8000170c:	00e7f663          	bleu	a4,a5,80001718 <compare_tags+0xb4>
        return 1;
80001710:	00100793          	li	a5,1
80001714:	0080006f          	j	8000171c <compare_tags+0xb8>
    } else {
        return 0;
80001718:	00000793          	li	a5,0
    }
}
8000171c:	00078513          	mv	a0,a5
80001720:	00c12403          	lw	s0,12(sp)
80001724:	00812483          	lw	s1,8(sp)
80001728:	00412903          	lw	s2,4(sp)
8000172c:	01010113          	addi	sp,sp,16
80001730:	00008067          	ret

80001734 <compare_tags2>:
 * is greater.
 * @param tag1
 * @param tag2
 * @return -1, 0, or 1 depending on the relation.
 */
int compare_tags2(instant_t time1, microstep_t microstep1, instant_t time2, microstep_t microstep2) {
80001734:	fd010113          	addi	sp,sp,-48
80001738:	02812623          	sw	s0,44(sp)
8000173c:	03010413          	addi	s0,sp,48
80001740:	fea42423          	sw	a0,-24(s0)
80001744:	feb42623          	sw	a1,-20(s0)
80001748:	fec42223          	sw	a2,-28(s0)
8000174c:	fcd42c23          	sw	a3,-40(s0)
80001750:	fce42e23          	sw	a4,-36(s0)
80001754:	fef42023          	sw	a5,-32(s0)
    if (time1 < time2) {
80001758:	fdc42703          	lw	a4,-36(s0)
8000175c:	fec42783          	lw	a5,-20(s0)
80001760:	00e7ce63          	blt	a5,a4,8000177c <compare_tags2+0x48>
80001764:	fdc42703          	lw	a4,-36(s0)
80001768:	fec42783          	lw	a5,-20(s0)
8000176c:	00f71c63          	bne	a4,a5,80001784 <compare_tags2+0x50>
80001770:	fd842703          	lw	a4,-40(s0)
80001774:	fe842783          	lw	a5,-24(s0)
80001778:	00e7f663          	bleu	a4,a5,80001784 <compare_tags2+0x50>
        return -1;
8000177c:	fff00793          	li	a5,-1
80001780:	05c0006f          	j	800017dc <compare_tags2+0xa8>
    } else if (time1 > time2) {
80001784:	fec42703          	lw	a4,-20(s0)
80001788:	fdc42783          	lw	a5,-36(s0)
8000178c:	00e7ce63          	blt	a5,a4,800017a8 <compare_tags2+0x74>
80001790:	fec42703          	lw	a4,-20(s0)
80001794:	fdc42783          	lw	a5,-36(s0)
80001798:	00f71c63          	bne	a4,a5,800017b0 <compare_tags2+0x7c>
8000179c:	fe842703          	lw	a4,-24(s0)
800017a0:	fd842783          	lw	a5,-40(s0)
800017a4:	00e7f663          	bleu	a4,a5,800017b0 <compare_tags2+0x7c>
        return 1;
800017a8:	00100793          	li	a5,1
800017ac:	0300006f          	j	800017dc <compare_tags2+0xa8>
    } else if (microstep1 < microstep2) {
800017b0:	fe442703          	lw	a4,-28(s0)
800017b4:	fe042783          	lw	a5,-32(s0)
800017b8:	00f77663          	bleu	a5,a4,800017c4 <compare_tags2+0x90>
        return -1;
800017bc:	fff00793          	li	a5,-1
800017c0:	01c0006f          	j	800017dc <compare_tags2+0xa8>
    } else if (microstep1 > microstep2) {
800017c4:	fe442703          	lw	a4,-28(s0)
800017c8:	fe042783          	lw	a5,-32(s0)
800017cc:	00e7f663          	bleu	a4,a5,800017d8 <compare_tags2+0xa4>
        return 1;
800017d0:	00100793          	li	a5,1
800017d4:	0080006f          	j	800017dc <compare_tags2+0xa8>
    } else {
        return 0;
800017d8:	00000793          	li	a5,0
    }
}
800017dc:	00078513          	mv	a0,a5
800017e0:	02c12403          	lw	s0,44(sp)
800017e4:	03010113          	addi	sp,sp,48
800017e8:	00008067          	ret

800017ec <get_elapsed_logical_time>:

/**
 * Return the elapsed logical time in nanoseconds since the start of execution.
 */
interval_t get_elapsed_logical_time() {
800017ec:	ff010113          	addi	sp,sp,-16
800017f0:	00812623          	sw	s0,12(sp)
800017f4:	01010413          	addi	s0,sp,16
    return current_tag.time - start_time;
800017f8:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
800017fc:	0047a803          	lw	a6,4(a5)
80001800:	0007a783          	lw	a5,0(a5)
80001804:	0000c717          	auipc	a4,0xc
80001808:	23470713          	addi	a4,a4,564 # 8000da38 <start_time>
8000180c:	00072583          	lw	a1,0(a4)
80001810:	00472603          	lw	a2,4(a4)
80001814:	40b786b3          	sub	a3,a5,a1
80001818:	00068513          	mv	a0,a3
8000181c:	00a7b533          	sltu	a0,a5,a0
80001820:	40c80733          	sub	a4,a6,a2
80001824:	40a707b3          	sub	a5,a4,a0
80001828:	00078713          	mv	a4,a5
8000182c:	00068793          	mv	a5,a3
80001830:	00070813          	mv	a6,a4
}
80001834:	00078513          	mv	a0,a5
80001838:	00080593          	mv	a1,a6
8000183c:	00c12403          	lw	s0,12(sp)
80001840:	01010113          	addi	sp,sp,16
80001844:	00008067          	ret

80001848 <get_current_tag>:

/**
 * Return the current tag, a logical time, microstep pair.
 */
tag_t get_current_tag() {
80001848:	fe010113          	addi	sp,sp,-32
8000184c:	00812e23          	sw	s0,28(sp)
80001850:	02010413          	addi	s0,sp,32
80001854:	fea42623          	sw	a0,-20(s0)
    return current_tag;
80001858:	fec42783          	lw	a5,-20(s0)
8000185c:	8b818713          	addi	a4,gp,-1864 # 8000dae8 <current_tag>
80001860:	00072583          	lw	a1,0(a4)
80001864:	00472603          	lw	a2,4(a4)
80001868:	00872683          	lw	a3,8(a4)
8000186c:	00c72703          	lw	a4,12(a4)
80001870:	00b7a023          	sw	a1,0(a5)
80001874:	00c7a223          	sw	a2,4(a5)
80001878:	00d7a423          	sw	a3,8(a5)
8000187c:	00e7a623          	sw	a4,12(a5)
}
80001880:	fec42503          	lw	a0,-20(s0)
80001884:	01c12403          	lw	s0,28(sp)
80001888:	02010113          	addi	sp,sp,32
8000188c:	00008067          	ret

80001890 <get_logical_time>:

/**
 * Return the current logical time in nanoseconds since January 1, 1970.
 */
instant_t get_logical_time() {
80001890:	ff010113          	addi	sp,sp,-16
80001894:	00812623          	sw	s0,12(sp)
80001898:	01010413          	addi	s0,sp,16
    return current_tag.time;
8000189c:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
800018a0:	0047a803          	lw	a6,4(a5)
800018a4:	0007a783          	lw	a5,0(a5)
}
800018a8:	00078513          	mv	a0,a5
800018ac:	00080593          	mv	a1,a6
800018b0:	00c12403          	lw	s0,12(sp)
800018b4:	01010113          	addi	sp,sp,16
800018b8:	00008067          	ret

800018bc <get_microstep>:

/**
 * Return the current microstep.
 */
microstep_t get_microstep() {
800018bc:	ff010113          	addi	sp,sp,-16
800018c0:	00812623          	sw	s0,12(sp)
800018c4:	01010413          	addi	s0,sp,16
    return current_tag.microstep;
800018c8:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
800018cc:	0087a783          	lw	a5,8(a5)
}
800018d0:	00078513          	mv	a0,a5
800018d4:	00c12403          	lw	s0,12(sp)
800018d8:	01010113          	addi	sp,sp,16
800018dc:	00008067          	ret

800018e0 <get_physical_time>:

/**
 * Return the current physical time in nanoseconds since January 1, 1970,
 * adjusted by the global physical time offset.
 */
instant_t get_physical_time() {
800018e0:	fd010113          	addi	sp,sp,-48
800018e4:	02112623          	sw	ra,44(sp)
800018e8:	02812423          	sw	s0,40(sp)
800018ec:	03212223          	sw	s2,36(sp)
800018f0:	03312023          	sw	s3,32(sp)
800018f4:	01412e23          	sw	s4,28(sp)
800018f8:	01512c23          	sw	s5,24(sp)
800018fc:	01612a23          	sw	s6,20(sp)
80001900:	01712823          	sw	s7,16(sp)
80001904:	03010413          	addi	s0,sp,48
    struct timespec physicalTime;
    clock_gettime(CLOCK_REALTIME, &physicalTime);
80001908:	fd840793          	addi	a5,s0,-40
8000190c:	00078593          	mv	a1,a5
80001910:	00100513          	li	a0,1
80001914:	164040ef          	jal	ra,80005a78 <clock_gettime>
    return (physicalTime.tv_sec * BILLION + physicalTime.tv_nsec) + _lf_global_physical_time_offset;
80001918:	fd842783          	lw	a5,-40(s0)
8000191c:	00078a13          	mv	s4,a5
80001920:	41f7d793          	srai	a5,a5,0x1f
80001924:	00078a93          	mv	s5,a5
80001928:	3b9ad7b7          	lui	a5,0x3b9ad
8000192c:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80001930:	02fa8733          	mul	a4,s5,a5
80001934:	00000793          	li	a5,0
80001938:	02fa07b3          	mul	a5,s4,a5
8000193c:	00f70733          	add	a4,a4,a5
80001940:	3b9ad7b7          	lui	a5,0x3b9ad
80001944:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80001948:	02fa06b3          	mul	a3,s4,a5
8000194c:	02fa39b3          	mulhu	s3,s4,a5
80001950:	00068913          	mv	s2,a3
80001954:	013707b3          	add	a5,a4,s3
80001958:	00078993          	mv	s3,a5
8000195c:	fdc42783          	lw	a5,-36(s0)
80001960:	00078b13          	mv	s6,a5
80001964:	41f7d793          	srai	a5,a5,0x1f
80001968:	00078b93          	mv	s7,a5
8000196c:	016907b3          	add	a5,s2,s6
80001970:	00078713          	mv	a4,a5
80001974:	01273733          	sltu	a4,a4,s2
80001978:	01798833          	add	a6,s3,s7
8000197c:	01070733          	add	a4,a4,a6
80001980:	00070813          	mv	a6,a4
80001984:	00078693          	mv	a3,a5
80001988:	00080713          	mv	a4,a6
8000198c:	0000c797          	auipc	a5,0xc
80001990:	0e478793          	addi	a5,a5,228 # 8000da70 <_lf_global_physical_time_offset>
80001994:	0007a583          	lw	a1,0(a5)
80001998:	0047a603          	lw	a2,4(a5)
8000199c:	00b687b3          	add	a5,a3,a1
800019a0:	00078513          	mv	a0,a5
800019a4:	00d53533          	sltu	a0,a0,a3
800019a8:	00c70833          	add	a6,a4,a2
800019ac:	01050733          	add	a4,a0,a6
800019b0:	00070813          	mv	a6,a4
}
800019b4:	00078513          	mv	a0,a5
800019b8:	00080593          	mv	a1,a6
800019bc:	02c12083          	lw	ra,44(sp)
800019c0:	02812403          	lw	s0,40(sp)
800019c4:	02412903          	lw	s2,36(sp)
800019c8:	02012983          	lw	s3,32(sp)
800019cc:	01c12a03          	lw	s4,28(sp)
800019d0:	01812a83          	lw	s5,24(sp)
800019d4:	01412b03          	lw	s6,20(sp)
800019d8:	01012b83          	lw	s7,16(sp)
800019dc:	03010113          	addi	sp,sp,48
800019e0:	00008067          	ret

800019e4 <get_start_time>:
 * Return the physical time of the start of execution in nanoseconds.
 * On many platforms, this is the number of nanoseconds
 * since January 1, 1970, but it is actually platform dependent.
 * @return A time instant.
 */
instant_t get_start_time() {
800019e4:	ff010113          	addi	sp,sp,-16
800019e8:	00812623          	sw	s0,12(sp)
800019ec:	01010413          	addi	s0,sp,16
    return start_time;
800019f0:	0000c797          	auipc	a5,0xc
800019f4:	04878793          	addi	a5,a5,72 # 8000da38 <start_time>
800019f8:	0047a803          	lw	a6,4(a5)
800019fc:	0007a783          	lw	a5,0(a5)
}
80001a00:	00078513          	mv	a0,a5
80001a04:	00080593          	mv	a1,a6
80001a08:	00c12403          	lw	s0,12(sp)
80001a0c:	01010113          	addi	sp,sp,16
80001a10:	00008067          	ret

80001a14 <get_elapsed_physical_time>:


/**
 * Return the elapsed physical time in nanoseconds.
 */
instant_t get_elapsed_physical_time() {
80001a14:	fd010113          	addi	sp,sp,-48
80001a18:	02112623          	sw	ra,44(sp)
80001a1c:	02812423          	sw	s0,40(sp)
80001a20:	03212223          	sw	s2,36(sp)
80001a24:	03312023          	sw	s3,32(sp)
80001a28:	01412e23          	sw	s4,28(sp)
80001a2c:	01512c23          	sw	s5,24(sp)
80001a30:	01612a23          	sw	s6,20(sp)
80001a34:	01712823          	sw	s7,16(sp)
80001a38:	03010413          	addi	s0,sp,48
    struct timespec physicalTime;
    clock_gettime(CLOCK_REALTIME, &physicalTime);
80001a3c:	fd840793          	addi	a5,s0,-40
80001a40:	00078593          	mv	a1,a5
80001a44:	00100513          	li	a0,1
80001a48:	030040ef          	jal	ra,80005a78 <clock_gettime>
    return physicalTime.tv_sec * BILLION + physicalTime.tv_nsec - physical_start_time;
80001a4c:	fd842783          	lw	a5,-40(s0)
80001a50:	00078a13          	mv	s4,a5
80001a54:	41f7d793          	srai	a5,a5,0x1f
80001a58:	00078a93          	mv	s5,a5
80001a5c:	3b9ad7b7          	lui	a5,0x3b9ad
80001a60:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80001a64:	02fa8733          	mul	a4,s5,a5
80001a68:	00000793          	li	a5,0
80001a6c:	02fa07b3          	mul	a5,s4,a5
80001a70:	00f70733          	add	a4,a4,a5
80001a74:	3b9ad7b7          	lui	a5,0x3b9ad
80001a78:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80001a7c:	02fa06b3          	mul	a3,s4,a5
80001a80:	02fa39b3          	mulhu	s3,s4,a5
80001a84:	00068913          	mv	s2,a3
80001a88:	013707b3          	add	a5,a4,s3
80001a8c:	00078993          	mv	s3,a5
80001a90:	fdc42783          	lw	a5,-36(s0)
80001a94:	00078b13          	mv	s6,a5
80001a98:	41f7d793          	srai	a5,a5,0x1f
80001a9c:	00078b93          	mv	s7,a5
80001aa0:	016907b3          	add	a5,s2,s6
80001aa4:	00078713          	mv	a4,a5
80001aa8:	01273733          	sltu	a4,a4,s2
80001aac:	01798833          	add	a6,s3,s7
80001ab0:	01070733          	add	a4,a4,a6
80001ab4:	00070813          	mv	a6,a4
80001ab8:	00078693          	mv	a3,a5
80001abc:	00080713          	mv	a4,a6
80001ac0:	0000c797          	auipc	a5,0xc
80001ac4:	f7078793          	addi	a5,a5,-144 # 8000da30 <physical_start_time>
80001ac8:	0007a583          	lw	a1,0(a5)
80001acc:	0047a603          	lw	a2,4(a5)
80001ad0:	40b687b3          	sub	a5,a3,a1
80001ad4:	00078513          	mv	a0,a5
80001ad8:	00a6b533          	sltu	a0,a3,a0
80001adc:	40c70833          	sub	a6,a4,a2
80001ae0:	40a80733          	sub	a4,a6,a0
80001ae4:	00070813          	mv	a6,a4
}
80001ae8:	00078513          	mv	a0,a5
80001aec:	00080593          	mv	a1,a6
80001af0:	02c12083          	lw	ra,44(sp)
80001af4:	02812403          	lw	s0,40(sp)
80001af8:	02412903          	lw	s2,36(sp)
80001afc:	02012983          	lw	s3,32(sp)
80001b00:	01c12a03          	lw	s4,28(sp)
80001b04:	01812a83          	lw	s5,24(sp)
80001b08:	01412b03          	lw	s6,20(sp)
80001b0c:	01012b83          	lw	s7,16(sp)
80001b10:	03010113          	addi	sp,sp,48
80001b14:	00008067          	ret

80001b18 <convert_volatile_tag_to_nonvolatile>:
#else
/**
 * @note This is an undefined behavior in C and should
 *  be used with utmost caution. See Section 6.7.2 of the C99 standard.
 */
tag_t convert_volatile_tag_to_nonvolatile(tag_t volatile vtag) {
80001b18:	fe010113          	addi	sp,sp,-32
80001b1c:	00812e23          	sw	s0,28(sp)
80001b20:	00912c23          	sw	s1,24(sp)
80001b24:	02010413          	addi	s0,sp,32
80001b28:	fea42623          	sw	a0,-20(s0)
80001b2c:	00058493          	mv	s1,a1
    return vtag;
80001b30:	fec42783          	lw	a5,-20(s0)
80001b34:	0004a583          	lw	a1,0(s1)
80001b38:	0044a603          	lw	a2,4(s1)
80001b3c:	0084a683          	lw	a3,8(s1)
80001b40:	00c4a703          	lw	a4,12(s1)
80001b44:	00b7a023          	sw	a1,0(a5)
80001b48:	00c7a223          	sw	a2,4(a5)
80001b4c:	00d7a423          	sw	a3,8(a5)
80001b50:	00e7a623          	sw	a4,12(a5)
}
80001b54:	fec42503          	lw	a0,-20(s0)
80001b58:	01c12403          	lw	s0,28(sp)
80001b5c:	01812483          	lw	s1,24(sp)
80001b60:	02010113          	addi	sp,sp,32
80001b64:	00008067          	ret

80001b68 <find_equal>:

/**
 * Find an element in the queue that matches the given element up to
 * and including the given maximum priority.
 */ 
void* find_equal(pqueue_t *q, void *e, int pos, pqueue_pri_t max) {
80001b68:	fc010113          	addi	sp,sp,-64
80001b6c:	02112e23          	sw	ra,60(sp)
80001b70:	02812c23          	sw	s0,56(sp)
80001b74:	02912a23          	sw	s1,52(sp)
80001b78:	04010413          	addi	s0,sp,64
80001b7c:	fca42e23          	sw	a0,-36(s0)
80001b80:	fcb42c23          	sw	a1,-40(s0)
80001b84:	fcc42a23          	sw	a2,-44(s0)
80001b88:	fcd42423          	sw	a3,-56(s0)
80001b8c:	fce42623          	sw	a4,-52(s0)
    void* rval;
    void* curr = q->d[pos];
80001b90:	fdc42783          	lw	a5,-36(s0)
80001b94:	0247a703          	lw	a4,36(a5)
80001b98:	fd442783          	lw	a5,-44(s0)
80001b9c:	00279793          	slli	a5,a5,0x2
80001ba0:	00f707b3          	add	a5,a4,a5
80001ba4:	0007a783          	lw	a5,0(a5)
80001ba8:	fef42623          	sw	a5,-20(s0)
    // Stop the recursion when we've reached the end of the 
    // queue or once we've surpassed the maximum priority.
    if (!q || pos >= q->size || !curr || q->cmppri(q->getpri(curr), max)) {
80001bac:	fdc42783          	lw	a5,-36(s0)
80001bb0:	04078c63          	beqz	a5,80001c08 <find_equal+0xa0>
80001bb4:	fdc42783          	lw	a5,-36(s0)
80001bb8:	0007a703          	lw	a4,0(a5)
80001bbc:	fd442783          	lw	a5,-44(s0)
80001bc0:	04e7f463          	bleu	a4,a5,80001c08 <find_equal+0xa0>
80001bc4:	fec42783          	lw	a5,-20(s0)
80001bc8:	04078063          	beqz	a5,80001c08 <find_equal+0xa0>
80001bcc:	fdc42783          	lw	a5,-36(s0)
80001bd0:	00c7a483          	lw	s1,12(a5)
80001bd4:	fdc42783          	lw	a5,-36(s0)
80001bd8:	0107a783          	lw	a5,16(a5)
80001bdc:	fec42503          	lw	a0,-20(s0)
80001be0:	000780e7          	jalr	a5
80001be4:	00050793          	mv	a5,a0
80001be8:	00058813          	mv	a6,a1
80001bec:	fc842603          	lw	a2,-56(s0)
80001bf0:	fcc42683          	lw	a3,-52(s0)
80001bf4:	00078513          	mv	a0,a5
80001bf8:	00080593          	mv	a1,a6
80001bfc:	000480e7          	jalr	s1
80001c00:	00050793          	mv	a5,a0
80001c04:	00078663          	beqz	a5,80001c10 <find_equal+0xa8>
        return NULL;
80001c08:	00000793          	li	a5,0
80001c0c:	0840006f          	j	80001c90 <find_equal+0x128>
    }
    
    if (q->eqelem(curr, e)) {
80001c10:	fdc42783          	lw	a5,-36(s0)
80001c14:	01c7a783          	lw	a5,28(a5)
80001c18:	fd842583          	lw	a1,-40(s0)
80001c1c:	fec42503          	lw	a0,-20(s0)
80001c20:	000780e7          	jalr	a5
80001c24:	00050793          	mv	a5,a0
80001c28:	00078663          	beqz	a5,80001c34 <find_equal+0xcc>
        return curr;
80001c2c:	fec42783          	lw	a5,-20(s0)
80001c30:	0600006f          	j	80001c90 <find_equal+0x128>
    } else {
        rval = find_equal(q, e, left(pos), max);
80001c34:	fd442783          	lw	a5,-44(s0)
80001c38:	00179793          	slli	a5,a5,0x1
80001c3c:	fc842683          	lw	a3,-56(s0)
80001c40:	fcc42703          	lw	a4,-52(s0)
80001c44:	00078613          	mv	a2,a5
80001c48:	fd842583          	lw	a1,-40(s0)
80001c4c:	fdc42503          	lw	a0,-36(s0)
80001c50:	f19ff0ef          	jal	ra,80001b68 <find_equal>
80001c54:	fea42423          	sw	a0,-24(s0)
        if (rval) 
80001c58:	fe842783          	lw	a5,-24(s0)
80001c5c:	00078663          	beqz	a5,80001c68 <find_equal+0x100>
            return rval;
80001c60:	fe842783          	lw	a5,-24(s0)
80001c64:	02c0006f          	j	80001c90 <find_equal+0x128>
        else
            return find_equal(q, e, right(pos), max);
80001c68:	fd442783          	lw	a5,-44(s0)
80001c6c:	00179793          	slli	a5,a5,0x1
80001c70:	00178793          	addi	a5,a5,1
80001c74:	fc842683          	lw	a3,-56(s0)
80001c78:	fcc42703          	lw	a4,-52(s0)
80001c7c:	00078613          	mv	a2,a5
80001c80:	fd842583          	lw	a1,-40(s0)
80001c84:	fdc42503          	lw	a0,-36(s0)
80001c88:	ee1ff0ef          	jal	ra,80001b68 <find_equal>
80001c8c:	00050793          	mv	a5,a0
    }
    return NULL;
}
80001c90:	00078513          	mv	a0,a5
80001c94:	03c12083          	lw	ra,60(sp)
80001c98:	03812403          	lw	s0,56(sp)
80001c9c:	03412483          	lw	s1,52(sp)
80001ca0:	04010113          	addi	sp,sp,64
80001ca4:	00008067          	ret

80001ca8 <find_equal_same_priority>:
/**
 * Find an element in the queue that matches the given element up to
 * but not including the given maximum priority. The matching element
 * has to _also_ have the same priority.
 */ 
void* find_equal_same_priority(pqueue_t *q, void *e, int pos) {
80001ca8:	fc010113          	addi	sp,sp,-64
80001cac:	02112e23          	sw	ra,60(sp)
80001cb0:	02812c23          	sw	s0,56(sp)
80001cb4:	02912a23          	sw	s1,52(sp)
80001cb8:	03212823          	sw	s2,48(sp)
80001cbc:	03312623          	sw	s3,44(sp)
80001cc0:	04010413          	addi	s0,sp,64
80001cc4:	fca42623          	sw	a0,-52(s0)
80001cc8:	fcb42423          	sw	a1,-56(s0)
80001ccc:	fcc42223          	sw	a2,-60(s0)
    void* rval;
    void* curr = q->d[pos];
80001cd0:	fcc42783          	lw	a5,-52(s0)
80001cd4:	0247a703          	lw	a4,36(a5)
80001cd8:	fc442783          	lw	a5,-60(s0)
80001cdc:	00279793          	slli	a5,a5,0x2
80001ce0:	00f707b3          	add	a5,a4,a5
80001ce4:	0007a783          	lw	a5,0(a5)
80001ce8:	fcf42e23          	sw	a5,-36(s0)
    // Stop the recursion when we've reached the end of the 
    // queue or once we've surpassed the priority of the element
    // we're looking for.
    if (!q || pos >= q->size || !curr || q->cmppri(q->getpri(curr), q->getpri(e))) {
80001cec:	fcc42783          	lw	a5,-52(s0)
80001cf0:	06078863          	beqz	a5,80001d60 <find_equal_same_priority+0xb8>
80001cf4:	fcc42783          	lw	a5,-52(s0)
80001cf8:	0007a703          	lw	a4,0(a5)
80001cfc:	fc442783          	lw	a5,-60(s0)
80001d00:	06e7f063          	bleu	a4,a5,80001d60 <find_equal_same_priority+0xb8>
80001d04:	fdc42783          	lw	a5,-36(s0)
80001d08:	04078c63          	beqz	a5,80001d60 <find_equal_same_priority+0xb8>
80001d0c:	fcc42783          	lw	a5,-52(s0)
80001d10:	00c7a483          	lw	s1,12(a5)
80001d14:	fcc42783          	lw	a5,-52(s0)
80001d18:	0107a783          	lw	a5,16(a5)
80001d1c:	fdc42503          	lw	a0,-36(s0)
80001d20:	000780e7          	jalr	a5
80001d24:	00050913          	mv	s2,a0
80001d28:	00058993          	mv	s3,a1
80001d2c:	fcc42783          	lw	a5,-52(s0)
80001d30:	0107a783          	lw	a5,16(a5)
80001d34:	fc842503          	lw	a0,-56(s0)
80001d38:	000780e7          	jalr	a5
80001d3c:	00050793          	mv	a5,a0
80001d40:	00058813          	mv	a6,a1
80001d44:	00078613          	mv	a2,a5
80001d48:	00080693          	mv	a3,a6
80001d4c:	00090513          	mv	a0,s2
80001d50:	00098593          	mv	a1,s3
80001d54:	000480e7          	jalr	s1
80001d58:	00050793          	mv	a5,a0
80001d5c:	00078663          	beqz	a5,80001d68 <find_equal_same_priority+0xc0>
        return NULL;
80001d60:	00000793          	li	a5,0
80001d64:	0bc0006f          	j	80001e20 <find_equal_same_priority+0x178>
    }
    
    if (q->getpri(curr) == q->getpri(e) && q->eqelem(curr, e)) {
80001d68:	fcc42783          	lw	a5,-52(s0)
80001d6c:	0107a783          	lw	a5,16(a5)
80001d70:	fdc42503          	lw	a0,-36(s0)
80001d74:	000780e7          	jalr	a5
80001d78:	00050913          	mv	s2,a0
80001d7c:	00058993          	mv	s3,a1
80001d80:	fcc42783          	lw	a5,-52(s0)
80001d84:	0107a783          	lw	a5,16(a5)
80001d88:	fc842503          	lw	a0,-56(s0)
80001d8c:	000780e7          	jalr	a5
80001d90:	00050793          	mv	a5,a0
80001d94:	00058813          	mv	a6,a1
80001d98:	00090693          	mv	a3,s2
80001d9c:	00078713          	mv	a4,a5
80001da0:	02e69a63          	bne	a3,a4,80001dd4 <find_equal_same_priority+0x12c>
80001da4:	00098713          	mv	a4,s3
80001da8:	00080793          	mv	a5,a6
80001dac:	02f71463          	bne	a4,a5,80001dd4 <find_equal_same_priority+0x12c>
80001db0:	fcc42783          	lw	a5,-52(s0)
80001db4:	01c7a783          	lw	a5,28(a5)
80001db8:	fc842583          	lw	a1,-56(s0)
80001dbc:	fdc42503          	lw	a0,-36(s0)
80001dc0:	000780e7          	jalr	a5
80001dc4:	00050793          	mv	a5,a0
80001dc8:	00078663          	beqz	a5,80001dd4 <find_equal_same_priority+0x12c>
        return curr;
80001dcc:	fdc42783          	lw	a5,-36(s0)
80001dd0:	0500006f          	j	80001e20 <find_equal_same_priority+0x178>
    } else {
        rval = find_equal_same_priority(q, e, left(pos));
80001dd4:	fc442783          	lw	a5,-60(s0)
80001dd8:	00179793          	slli	a5,a5,0x1
80001ddc:	00078613          	mv	a2,a5
80001de0:	fc842583          	lw	a1,-56(s0)
80001de4:	fcc42503          	lw	a0,-52(s0)
80001de8:	ec1ff0ef          	jal	ra,80001ca8 <find_equal_same_priority>
80001dec:	fca42c23          	sw	a0,-40(s0)
        if (rval) 
80001df0:	fd842783          	lw	a5,-40(s0)
80001df4:	00078663          	beqz	a5,80001e00 <find_equal_same_priority+0x158>
            return rval;
80001df8:	fd842783          	lw	a5,-40(s0)
80001dfc:	0240006f          	j	80001e20 <find_equal_same_priority+0x178>
        else
            return find_equal_same_priority(q, e, right(pos));   
80001e00:	fc442783          	lw	a5,-60(s0)
80001e04:	00179793          	slli	a5,a5,0x1
80001e08:	00178793          	addi	a5,a5,1
80001e0c:	00078613          	mv	a2,a5
80001e10:	fc842583          	lw	a1,-56(s0)
80001e14:	fcc42503          	lw	a0,-52(s0)
80001e18:	e91ff0ef          	jal	ra,80001ca8 <find_equal_same_priority>
80001e1c:	00050793          	mv	a5,a0
    //     if (q->d[i] == e) {
    //         return q->d[i];
    //     }
    // }
    return NULL;
}
80001e20:	00078513          	mv	a0,a5
80001e24:	03c12083          	lw	ra,60(sp)
80001e28:	03812403          	lw	s0,56(sp)
80001e2c:	03412483          	lw	s1,52(sp)
80001e30:	03012903          	lw	s2,48(sp)
80001e34:	02c12983          	lw	s3,44(sp)
80001e38:	04010113          	addi	sp,sp,64
80001e3c:	00008067          	ret

80001e40 <pqueue_init>:
                       pqueue_cmp_pri_f cmppri,
                       pqueue_get_pri_f getpri,
                       pqueue_get_pos_f getpos,
                       pqueue_set_pos_f setpos,
                       pqueue_eq_elem_f eqelem,
                       pqueue_print_entry_f prt) {
80001e40:	fc010113          	addi	sp,sp,-64
80001e44:	02112e23          	sw	ra,60(sp)
80001e48:	02812c23          	sw	s0,56(sp)
80001e4c:	04010413          	addi	s0,sp,64
80001e50:	fca42e23          	sw	a0,-36(s0)
80001e54:	fcb42c23          	sw	a1,-40(s0)
80001e58:	fcc42a23          	sw	a2,-44(s0)
80001e5c:	fcd42823          	sw	a3,-48(s0)
80001e60:	fce42623          	sw	a4,-52(s0)
80001e64:	fcf42423          	sw	a5,-56(s0)
80001e68:	fd042223          	sw	a6,-60(s0)
    pqueue_t *q;

    if (!(q = (pqueue_t*)malloc(sizeof(pqueue_t))))
80001e6c:	02800513          	li	a0,40
80001e70:	36c090ef          	jal	ra,8000b1dc <malloc>
80001e74:	00050793          	mv	a5,a0
80001e78:	fef42623          	sw	a5,-20(s0)
80001e7c:	fec42783          	lw	a5,-20(s0)
80001e80:	00079663          	bnez	a5,80001e8c <pqueue_init+0x4c>
        return NULL;
80001e84:	00000793          	li	a5,0
80001e88:	0bc0006f          	j	80001f44 <pqueue_init+0x104>

    /* Need to allocate n+1 elements since element 0 isn't used. */
    if (!(q->d = (void**)malloc((n + 1) * sizeof(void *)))) {
80001e8c:	fdc42783          	lw	a5,-36(s0)
80001e90:	00178793          	addi	a5,a5,1
80001e94:	00279793          	slli	a5,a5,0x2
80001e98:	00078513          	mv	a0,a5
80001e9c:	340090ef          	jal	ra,8000b1dc <malloc>
80001ea0:	00050793          	mv	a5,a0
80001ea4:	00078713          	mv	a4,a5
80001ea8:	fec42783          	lw	a5,-20(s0)
80001eac:	02e7a223          	sw	a4,36(a5)
80001eb0:	fec42783          	lw	a5,-20(s0)
80001eb4:	0247a783          	lw	a5,36(a5)
80001eb8:	00079a63          	bnez	a5,80001ecc <pqueue_init+0x8c>
        free(q);
80001ebc:	fec42503          	lw	a0,-20(s0)
80001ec0:	328090ef          	jal	ra,8000b1e8 <free>
        return NULL;
80001ec4:	00000793          	li	a5,0
80001ec8:	07c0006f          	j	80001f44 <pqueue_init+0x104>
    }

    q->size = 1;
80001ecc:	fec42783          	lw	a5,-20(s0)
80001ed0:	00100713          	li	a4,1
80001ed4:	00e7a023          	sw	a4,0(a5)
    q->avail = q->step = (n+1);  /* see comment above about n+1 */
80001ed8:	fdc42783          	lw	a5,-36(s0)
80001edc:	00178713          	addi	a4,a5,1
80001ee0:	fec42783          	lw	a5,-20(s0)
80001ee4:	00e7a423          	sw	a4,8(a5)
80001ee8:	fec42783          	lw	a5,-20(s0)
80001eec:	0087a703          	lw	a4,8(a5)
80001ef0:	fec42783          	lw	a5,-20(s0)
80001ef4:	00e7a223          	sw	a4,4(a5)
    q->cmppri = cmppri;
80001ef8:	fec42783          	lw	a5,-20(s0)
80001efc:	fd842703          	lw	a4,-40(s0)
80001f00:	00e7a623          	sw	a4,12(a5)
    q->getpri = getpri;
80001f04:	fec42783          	lw	a5,-20(s0)
80001f08:	fd442703          	lw	a4,-44(s0)
80001f0c:	00e7a823          	sw	a4,16(a5)
    q->getpos = getpos;
80001f10:	fec42783          	lw	a5,-20(s0)
80001f14:	fd042703          	lw	a4,-48(s0)
80001f18:	00e7aa23          	sw	a4,20(a5)
    q->setpos = setpos;
80001f1c:	fec42783          	lw	a5,-20(s0)
80001f20:	fcc42703          	lw	a4,-52(s0)
80001f24:	00e7ac23          	sw	a4,24(a5)
    q->eqelem = eqelem;
80001f28:	fec42783          	lw	a5,-20(s0)
80001f2c:	fc842703          	lw	a4,-56(s0)
80001f30:	00e7ae23          	sw	a4,28(a5)
    q->prt = prt;
80001f34:	fec42783          	lw	a5,-20(s0)
80001f38:	fc442703          	lw	a4,-60(s0)
80001f3c:	02e7a023          	sw	a4,32(a5)
    return q;
80001f40:	fec42783          	lw	a5,-20(s0)
}
80001f44:	00078513          	mv	a0,a5
80001f48:	03c12083          	lw	ra,60(sp)
80001f4c:	03812403          	lw	s0,56(sp)
80001f50:	04010113          	addi	sp,sp,64
80001f54:	00008067          	ret

80001f58 <pqueue_free>:

void pqueue_free(pqueue_t *q) {
80001f58:	fe010113          	addi	sp,sp,-32
80001f5c:	00112e23          	sw	ra,28(sp)
80001f60:	00812c23          	sw	s0,24(sp)
80001f64:	02010413          	addi	s0,sp,32
80001f68:	fea42623          	sw	a0,-20(s0)
    free(q->d);
80001f6c:	fec42783          	lw	a5,-20(s0)
80001f70:	0247a783          	lw	a5,36(a5)
80001f74:	00078513          	mv	a0,a5
80001f78:	270090ef          	jal	ra,8000b1e8 <free>
    free(q);
80001f7c:	fec42503          	lw	a0,-20(s0)
80001f80:	268090ef          	jal	ra,8000b1e8 <free>
}
80001f84:	00000013          	nop
80001f88:	01c12083          	lw	ra,28(sp)
80001f8c:	01812403          	lw	s0,24(sp)
80001f90:	02010113          	addi	sp,sp,32
80001f94:	00008067          	ret

80001f98 <pqueue_size>:

size_t pqueue_size(pqueue_t *q) {
80001f98:	fe010113          	addi	sp,sp,-32
80001f9c:	00812e23          	sw	s0,28(sp)
80001fa0:	02010413          	addi	s0,sp,32
80001fa4:	fea42623          	sw	a0,-20(s0)
    // Queue element 0 exists but doesn't count since it isn't used.
    return (q->size - 1);
80001fa8:	fec42783          	lw	a5,-20(s0)
80001fac:	0007a783          	lw	a5,0(a5)
80001fb0:	fff78793          	addi	a5,a5,-1
}
80001fb4:	00078513          	mv	a0,a5
80001fb8:	01c12403          	lw	s0,28(sp)
80001fbc:	02010113          	addi	sp,sp,32
80001fc0:	00008067          	ret

80001fc4 <maxchild>:

static size_t maxchild(pqueue_t *q, size_t i) {
80001fc4:	fc010113          	addi	sp,sp,-64
80001fc8:	02112e23          	sw	ra,60(sp)
80001fcc:	02812c23          	sw	s0,56(sp)
80001fd0:	02912a23          	sw	s1,52(sp)
80001fd4:	03212823          	sw	s2,48(sp)
80001fd8:	03312623          	sw	s3,44(sp)
80001fdc:	04010413          	addi	s0,sp,64
80001fe0:	fca42623          	sw	a0,-52(s0)
80001fe4:	fcb42423          	sw	a1,-56(s0)
    size_t child_node = left(i);
80001fe8:	fc842783          	lw	a5,-56(s0)
80001fec:	00179793          	slli	a5,a5,0x1
80001ff0:	fcf42e23          	sw	a5,-36(s0)

    if (child_node >= q->size)
80001ff4:	fcc42783          	lw	a5,-52(s0)
80001ff8:	0007a783          	lw	a5,0(a5)
80001ffc:	fdc42703          	lw	a4,-36(s0)
80002000:	00f76663          	bltu	a4,a5,8000200c <maxchild+0x48>
        return 0;
80002004:	00000793          	li	a5,0
80002008:	0b00006f          	j	800020b8 <maxchild+0xf4>

    if ((child_node+1) < q->size &&
8000200c:	fdc42783          	lw	a5,-36(s0)
80002010:	00178713          	addi	a4,a5,1
80002014:	fcc42783          	lw	a5,-52(s0)
80002018:	0007a783          	lw	a5,0(a5)
8000201c:	08f77c63          	bleu	a5,a4,800020b4 <maxchild+0xf0>
        (q->cmppri(q->getpri(q->d[child_node]), q->getpri(q->d[child_node+1])))) 
80002020:	fcc42783          	lw	a5,-52(s0)
80002024:	00c7a483          	lw	s1,12(a5)
80002028:	fcc42783          	lw	a5,-52(s0)
8000202c:	0107a683          	lw	a3,16(a5)
80002030:	fcc42783          	lw	a5,-52(s0)
80002034:	0247a703          	lw	a4,36(a5)
80002038:	fdc42783          	lw	a5,-36(s0)
8000203c:	00279793          	slli	a5,a5,0x2
80002040:	00f707b3          	add	a5,a4,a5
80002044:	0007a783          	lw	a5,0(a5)
80002048:	00078513          	mv	a0,a5
8000204c:	000680e7          	jalr	a3
80002050:	00050913          	mv	s2,a0
80002054:	00058993          	mv	s3,a1
80002058:	fcc42783          	lw	a5,-52(s0)
8000205c:	0107a683          	lw	a3,16(a5)
80002060:	fcc42783          	lw	a5,-52(s0)
80002064:	0247a703          	lw	a4,36(a5)
80002068:	fdc42783          	lw	a5,-36(s0)
8000206c:	00178793          	addi	a5,a5,1
80002070:	00279793          	slli	a5,a5,0x2
80002074:	00f707b3          	add	a5,a4,a5
80002078:	0007a783          	lw	a5,0(a5)
8000207c:	00078513          	mv	a0,a5
80002080:	000680e7          	jalr	a3
80002084:	00050793          	mv	a5,a0
80002088:	00058813          	mv	a6,a1
8000208c:	00078613          	mv	a2,a5
80002090:	00080693          	mv	a3,a6
80002094:	00090513          	mv	a0,s2
80002098:	00098593          	mv	a1,s3
8000209c:	000480e7          	jalr	s1
800020a0:	00050793          	mv	a5,a0
    if ((child_node+1) < q->size &&
800020a4:	00078863          	beqz	a5,800020b4 <maxchild+0xf0>
        child_node++; /* use right child instead of left */
800020a8:	fdc42783          	lw	a5,-36(s0)
800020ac:	00178793          	addi	a5,a5,1
800020b0:	fcf42e23          	sw	a5,-36(s0)

    return child_node;
800020b4:	fdc42783          	lw	a5,-36(s0)
}
800020b8:	00078513          	mv	a0,a5
800020bc:	03c12083          	lw	ra,60(sp)
800020c0:	03812403          	lw	s0,56(sp)
800020c4:	03412483          	lw	s1,52(sp)
800020c8:	03012903          	lw	s2,48(sp)
800020cc:	02c12983          	lw	s3,44(sp)
800020d0:	04010113          	addi	sp,sp,64
800020d4:	00008067          	ret

800020d8 <bubble_up>:

static size_t bubble_up(pqueue_t *q, size_t i) {
800020d8:	fd010113          	addi	sp,sp,-48
800020dc:	02112623          	sw	ra,44(sp)
800020e0:	02812423          	sw	s0,40(sp)
800020e4:	02912223          	sw	s1,36(sp)
800020e8:	03010413          	addi	s0,sp,48
800020ec:	fca42e23          	sw	a0,-36(s0)
800020f0:	fcb42c23          	sw	a1,-40(s0)
    size_t parent_node;
    void *moving_node = q->d[i];
800020f4:	fdc42783          	lw	a5,-36(s0)
800020f8:	0247a703          	lw	a4,36(a5)
800020fc:	fd842783          	lw	a5,-40(s0)
80002100:	00279793          	slli	a5,a5,0x2
80002104:	00f707b3          	add	a5,a4,a5
80002108:	0007a783          	lw	a5,0(a5)
8000210c:	fef42423          	sw	a5,-24(s0)
    pqueue_pri_t moving_pri = q->getpri(moving_node);
80002110:	fdc42783          	lw	a5,-36(s0)
80002114:	0107a783          	lw	a5,16(a5)
80002118:	fe842503          	lw	a0,-24(s0)
8000211c:	000780e7          	jalr	a5
80002120:	fea42023          	sw	a0,-32(s0)
80002124:	feb42223          	sw	a1,-28(s0)

    for (parent_node = parent(i);
80002128:	fd842783          	lw	a5,-40(s0)
8000212c:	0017d793          	srli	a5,a5,0x1
80002130:	fef42623          	sw	a5,-20(s0)
80002134:	0740006f          	j	800021a8 <bubble_up+0xd0>
         ((i > 1) && q->cmppri(q->getpri(q->d[parent_node]), moving_pri));
         i = parent_node, parent_node = parent(i))
    {
        q->d[i] = q->d[parent_node];
80002138:	fdc42783          	lw	a5,-36(s0)
8000213c:	0247a703          	lw	a4,36(a5)
80002140:	fec42783          	lw	a5,-20(s0)
80002144:	00279793          	slli	a5,a5,0x2
80002148:	00f70733          	add	a4,a4,a5
8000214c:	fdc42783          	lw	a5,-36(s0)
80002150:	0247a683          	lw	a3,36(a5)
80002154:	fd842783          	lw	a5,-40(s0)
80002158:	00279793          	slli	a5,a5,0x2
8000215c:	00f687b3          	add	a5,a3,a5
80002160:	00072703          	lw	a4,0(a4)
80002164:	00e7a023          	sw	a4,0(a5)
        q->setpos(q->d[i], i);
80002168:	fdc42783          	lw	a5,-36(s0)
8000216c:	0187a683          	lw	a3,24(a5)
80002170:	fdc42783          	lw	a5,-36(s0)
80002174:	0247a703          	lw	a4,36(a5)
80002178:	fd842783          	lw	a5,-40(s0)
8000217c:	00279793          	slli	a5,a5,0x2
80002180:	00f707b3          	add	a5,a4,a5
80002184:	0007a783          	lw	a5,0(a5)
80002188:	fd842583          	lw	a1,-40(s0)
8000218c:	00078513          	mv	a0,a5
80002190:	000680e7          	jalr	a3
         i = parent_node, parent_node = parent(i))
80002194:	fec42783          	lw	a5,-20(s0)
80002198:	fcf42c23          	sw	a5,-40(s0)
8000219c:	fd842783          	lw	a5,-40(s0)
800021a0:	0017d793          	srli	a5,a5,0x1
800021a4:	fef42623          	sw	a5,-20(s0)
    for (parent_node = parent(i);
800021a8:	fd842703          	lw	a4,-40(s0)
800021ac:	00100793          	li	a5,1
800021b0:	04e7fc63          	bleu	a4,a5,80002208 <bubble_up+0x130>
         ((i > 1) && q->cmppri(q->getpri(q->d[parent_node]), moving_pri));
800021b4:	fdc42783          	lw	a5,-36(s0)
800021b8:	00c7a483          	lw	s1,12(a5)
800021bc:	fdc42783          	lw	a5,-36(s0)
800021c0:	0107a683          	lw	a3,16(a5)
800021c4:	fdc42783          	lw	a5,-36(s0)
800021c8:	0247a703          	lw	a4,36(a5)
800021cc:	fec42783          	lw	a5,-20(s0)
800021d0:	00279793          	slli	a5,a5,0x2
800021d4:	00f707b3          	add	a5,a4,a5
800021d8:	0007a783          	lw	a5,0(a5)
800021dc:	00078513          	mv	a0,a5
800021e0:	000680e7          	jalr	a3
800021e4:	00050793          	mv	a5,a0
800021e8:	00058813          	mv	a6,a1
800021ec:	fe042603          	lw	a2,-32(s0)
800021f0:	fe442683          	lw	a3,-28(s0)
800021f4:	00078513          	mv	a0,a5
800021f8:	00080593          	mv	a1,a6
800021fc:	000480e7          	jalr	s1
80002200:	00050793          	mv	a5,a0
80002204:	f2079ae3          	bnez	a5,80002138 <bubble_up+0x60>
    }

    q->d[i] = moving_node;
80002208:	fdc42783          	lw	a5,-36(s0)
8000220c:	0247a703          	lw	a4,36(a5)
80002210:	fd842783          	lw	a5,-40(s0)
80002214:	00279793          	slli	a5,a5,0x2
80002218:	00f707b3          	add	a5,a4,a5
8000221c:	fe842703          	lw	a4,-24(s0)
80002220:	00e7a023          	sw	a4,0(a5)
    q->setpos(moving_node, i);
80002224:	fdc42783          	lw	a5,-36(s0)
80002228:	0187a783          	lw	a5,24(a5)
8000222c:	fd842583          	lw	a1,-40(s0)
80002230:	fe842503          	lw	a0,-24(s0)
80002234:	000780e7          	jalr	a5
    return i;
80002238:	fd842783          	lw	a5,-40(s0)
}
8000223c:	00078513          	mv	a0,a5
80002240:	02c12083          	lw	ra,44(sp)
80002244:	02812403          	lw	s0,40(sp)
80002248:	02412483          	lw	s1,36(sp)
8000224c:	03010113          	addi	sp,sp,48
80002250:	00008067          	ret

80002254 <percolate_down>:

static void percolate_down(pqueue_t *q, size_t i) {
80002254:	fc010113          	addi	sp,sp,-64
80002258:	02112e23          	sw	ra,60(sp)
8000225c:	02812c23          	sw	s0,56(sp)
80002260:	02912a23          	sw	s1,52(sp)
80002264:	04010413          	addi	s0,sp,64
80002268:	fca42623          	sw	a0,-52(s0)
8000226c:	fcb42423          	sw	a1,-56(s0)
    size_t child_node;
    void *moving_node = q->d[i];
80002270:	fcc42783          	lw	a5,-52(s0)
80002274:	0247a703          	lw	a4,36(a5)
80002278:	fc842783          	lw	a5,-56(s0)
8000227c:	00279793          	slli	a5,a5,0x2
80002280:	00f707b3          	add	a5,a4,a5
80002284:	0007a783          	lw	a5,0(a5)
80002288:	fef42623          	sw	a5,-20(s0)
    pqueue_pri_t moving_pri = q->getpri(moving_node);
8000228c:	fcc42783          	lw	a5,-52(s0)
80002290:	0107a783          	lw	a5,16(a5)
80002294:	fec42503          	lw	a0,-20(s0)
80002298:	000780e7          	jalr	a5
8000229c:	fea42023          	sw	a0,-32(s0)
800022a0:	feb42223          	sw	a1,-28(s0)

    while ((child_node = maxchild(q, i)) &&
800022a4:	0680006f          	j	8000230c <percolate_down+0xb8>
           q->cmppri(moving_pri, q->getpri(q->d[child_node])))
    {
        q->d[i] = q->d[child_node];
800022a8:	fcc42783          	lw	a5,-52(s0)
800022ac:	0247a703          	lw	a4,36(a5)
800022b0:	fdc42783          	lw	a5,-36(s0)
800022b4:	00279793          	slli	a5,a5,0x2
800022b8:	00f70733          	add	a4,a4,a5
800022bc:	fcc42783          	lw	a5,-52(s0)
800022c0:	0247a683          	lw	a3,36(a5)
800022c4:	fc842783          	lw	a5,-56(s0)
800022c8:	00279793          	slli	a5,a5,0x2
800022cc:	00f687b3          	add	a5,a3,a5
800022d0:	00072703          	lw	a4,0(a4)
800022d4:	00e7a023          	sw	a4,0(a5)
        q->setpos(q->d[i], i);
800022d8:	fcc42783          	lw	a5,-52(s0)
800022dc:	0187a683          	lw	a3,24(a5)
800022e0:	fcc42783          	lw	a5,-52(s0)
800022e4:	0247a703          	lw	a4,36(a5)
800022e8:	fc842783          	lw	a5,-56(s0)
800022ec:	00279793          	slli	a5,a5,0x2
800022f0:	00f707b3          	add	a5,a4,a5
800022f4:	0007a783          	lw	a5,0(a5)
800022f8:	fc842583          	lw	a1,-56(s0)
800022fc:	00078513          	mv	a0,a5
80002300:	000680e7          	jalr	a3
        i = child_node;
80002304:	fdc42783          	lw	a5,-36(s0)
80002308:	fcf42423          	sw	a5,-56(s0)
    while ((child_node = maxchild(q, i)) &&
8000230c:	fc842583          	lw	a1,-56(s0)
80002310:	fcc42503          	lw	a0,-52(s0)
80002314:	cb1ff0ef          	jal	ra,80001fc4 <maxchild>
80002318:	fca42e23          	sw	a0,-36(s0)
8000231c:	fdc42783          	lw	a5,-36(s0)
80002320:	04078c63          	beqz	a5,80002378 <percolate_down+0x124>
           q->cmppri(moving_pri, q->getpri(q->d[child_node])))
80002324:	fcc42783          	lw	a5,-52(s0)
80002328:	00c7a483          	lw	s1,12(a5)
8000232c:	fcc42783          	lw	a5,-52(s0)
80002330:	0107a683          	lw	a3,16(a5)
80002334:	fcc42783          	lw	a5,-52(s0)
80002338:	0247a703          	lw	a4,36(a5)
8000233c:	fdc42783          	lw	a5,-36(s0)
80002340:	00279793          	slli	a5,a5,0x2
80002344:	00f707b3          	add	a5,a4,a5
80002348:	0007a783          	lw	a5,0(a5)
8000234c:	00078513          	mv	a0,a5
80002350:	000680e7          	jalr	a3
80002354:	00050793          	mv	a5,a0
80002358:	00058813          	mv	a6,a1
8000235c:	00078613          	mv	a2,a5
80002360:	00080693          	mv	a3,a6
80002364:	fe042503          	lw	a0,-32(s0)
80002368:	fe442583          	lw	a1,-28(s0)
8000236c:	000480e7          	jalr	s1
80002370:	00050793          	mv	a5,a0
    while ((child_node = maxchild(q, i)) &&
80002374:	f2079ae3          	bnez	a5,800022a8 <percolate_down+0x54>
    }

    q->d[i] = moving_node;
80002378:	fcc42783          	lw	a5,-52(s0)
8000237c:	0247a703          	lw	a4,36(a5)
80002380:	fc842783          	lw	a5,-56(s0)
80002384:	00279793          	slli	a5,a5,0x2
80002388:	00f707b3          	add	a5,a4,a5
8000238c:	fec42703          	lw	a4,-20(s0)
80002390:	00e7a023          	sw	a4,0(a5)
    q->setpos(moving_node, i);
80002394:	fcc42783          	lw	a5,-52(s0)
80002398:	0187a783          	lw	a5,24(a5)
8000239c:	fc842583          	lw	a1,-56(s0)
800023a0:	fec42503          	lw	a0,-20(s0)
800023a4:	000780e7          	jalr	a5
}
800023a8:	00000013          	nop
800023ac:	03c12083          	lw	ra,60(sp)
800023b0:	03812403          	lw	s0,56(sp)
800023b4:	03412483          	lw	s1,52(sp)
800023b8:	04010113          	addi	sp,sp,64
800023bc:	00008067          	ret

800023c0 <pqueue_find_equal_same_priority>:

void* pqueue_find_equal_same_priority(pqueue_t *q, void *e) {
800023c0:	fe010113          	addi	sp,sp,-32
800023c4:	00112e23          	sw	ra,28(sp)
800023c8:	00812c23          	sw	s0,24(sp)
800023cc:	02010413          	addi	s0,sp,32
800023d0:	fea42623          	sw	a0,-20(s0)
800023d4:	feb42423          	sw	a1,-24(s0)
    return find_equal_same_priority(q, e, 1);
800023d8:	00100613          	li	a2,1
800023dc:	fe842583          	lw	a1,-24(s0)
800023e0:	fec42503          	lw	a0,-20(s0)
800023e4:	8c5ff0ef          	jal	ra,80001ca8 <find_equal_same_priority>
800023e8:	00050793          	mv	a5,a0
}
800023ec:	00078513          	mv	a0,a5
800023f0:	01c12083          	lw	ra,28(sp)
800023f4:	01812403          	lw	s0,24(sp)
800023f8:	02010113          	addi	sp,sp,32
800023fc:	00008067          	ret

80002400 <pqueue_find_equal>:

void* pqueue_find_equal(pqueue_t *q, void *e, pqueue_pri_t max) {
80002400:	fe010113          	addi	sp,sp,-32
80002404:	00112e23          	sw	ra,28(sp)
80002408:	00812c23          	sw	s0,24(sp)
8000240c:	02010413          	addi	s0,sp,32
80002410:	fea42623          	sw	a0,-20(s0)
80002414:	feb42423          	sw	a1,-24(s0)
80002418:	fec42023          	sw	a2,-32(s0)
8000241c:	fed42223          	sw	a3,-28(s0)
    return find_equal(q, e, 1, max);
80002420:	fe042683          	lw	a3,-32(s0)
80002424:	fe442703          	lw	a4,-28(s0)
80002428:	00100613          	li	a2,1
8000242c:	fe842583          	lw	a1,-24(s0)
80002430:	fec42503          	lw	a0,-20(s0)
80002434:	f34ff0ef          	jal	ra,80001b68 <find_equal>
80002438:	00050793          	mv	a5,a0
}
8000243c:	00078513          	mv	a0,a5
80002440:	01c12083          	lw	ra,28(sp)
80002444:	01812403          	lw	s0,24(sp)
80002448:	02010113          	addi	sp,sp,32
8000244c:	00008067          	ret

80002450 <pqueue_insert>:

int pqueue_insert(pqueue_t *q, void *d) {
80002450:	fd010113          	addi	sp,sp,-48
80002454:	02112623          	sw	ra,44(sp)
80002458:	02812423          	sw	s0,40(sp)
8000245c:	03010413          	addi	s0,sp,48
80002460:	fca42e23          	sw	a0,-36(s0)
80002464:	fcb42c23          	sw	a1,-40(s0)
    void **tmp;
    size_t i;
    size_t newsize;

    if (!q) return 1;
80002468:	fdc42783          	lw	a5,-36(s0)
8000246c:	00079663          	bnez	a5,80002478 <pqueue_insert+0x28>
80002470:	00100793          	li	a5,1
80002474:	0bc0006f          	j	80002530 <pqueue_insert+0xe0>
    //         exit(1);
    //     }
    // }

    /* allocate more memory if necessary */
    if (q->size >= q->avail) {
80002478:	fdc42783          	lw	a5,-36(s0)
8000247c:	0007a703          	lw	a4,0(a5)
80002480:	fdc42783          	lw	a5,-36(s0)
80002484:	0047a783          	lw	a5,4(a5)
80002488:	06f76263          	bltu	a4,a5,800024ec <pqueue_insert+0x9c>
        newsize = q->size + q->step;
8000248c:	fdc42783          	lw	a5,-36(s0)
80002490:	0007a703          	lw	a4,0(a5)
80002494:	fdc42783          	lw	a5,-36(s0)
80002498:	0087a783          	lw	a5,8(a5)
8000249c:	00f707b3          	add	a5,a4,a5
800024a0:	fef42623          	sw	a5,-20(s0)
        if (!(tmp = (void**)realloc(q->d, sizeof(void *) * newsize)))
800024a4:	fdc42783          	lw	a5,-36(s0)
800024a8:	0247a703          	lw	a4,36(a5)
800024ac:	fec42783          	lw	a5,-20(s0)
800024b0:	00279793          	slli	a5,a5,0x2
800024b4:	00078593          	mv	a1,a5
800024b8:	00070513          	mv	a0,a4
800024bc:	384090ef          	jal	ra,8000b840 <realloc>
800024c0:	fea42423          	sw	a0,-24(s0)
800024c4:	fe842783          	lw	a5,-24(s0)
800024c8:	00079663          	bnez	a5,800024d4 <pqueue_insert+0x84>
            return 1;
800024cc:	00100793          	li	a5,1
800024d0:	0600006f          	j	80002530 <pqueue_insert+0xe0>
        q->d = tmp;
800024d4:	fdc42783          	lw	a5,-36(s0)
800024d8:	fe842703          	lw	a4,-24(s0)
800024dc:	02e7a223          	sw	a4,36(a5)
        q->avail = newsize;
800024e0:	fdc42783          	lw	a5,-36(s0)
800024e4:	fec42703          	lw	a4,-20(s0)
800024e8:	00e7a223          	sw	a4,4(a5)
    }
    /* insert item and organize the tree */
    i = q->size++;
800024ec:	fdc42783          	lw	a5,-36(s0)
800024f0:	0007a783          	lw	a5,0(a5)
800024f4:	00178693          	addi	a3,a5,1
800024f8:	fdc42703          	lw	a4,-36(s0)
800024fc:	00d72023          	sw	a3,0(a4)
80002500:	fef42223          	sw	a5,-28(s0)
    q->d[i] = d;
80002504:	fdc42783          	lw	a5,-36(s0)
80002508:	0247a703          	lw	a4,36(a5)
8000250c:	fe442783          	lw	a5,-28(s0)
80002510:	00279793          	slli	a5,a5,0x2
80002514:	00f707b3          	add	a5,a4,a5
80002518:	fd842703          	lw	a4,-40(s0)
8000251c:	00e7a023          	sw	a4,0(a5)
    bubble_up(q, i);
80002520:	fe442583          	lw	a1,-28(s0)
80002524:	fdc42503          	lw	a0,-36(s0)
80002528:	bb1ff0ef          	jal	ra,800020d8 <bubble_up>
    // if (!pqueue_is_valid(q)) {
    //     pqueue_dump(q, stdout, q->prt);
    //     exit(1);
    // }

    return 0;
8000252c:	00000793          	li	a5,0
}
80002530:	00078513          	mv	a0,a5
80002534:	02c12083          	lw	ra,44(sp)
80002538:	02812403          	lw	s0,40(sp)
8000253c:	03010113          	addi	sp,sp,48
80002540:	00008067          	ret

80002544 <pqueue_remove>:

int pqueue_remove(pqueue_t *q, void *d) {
80002544:	fc010113          	addi	sp,sp,-64
80002548:	02112e23          	sw	ra,60(sp)
8000254c:	02812c23          	sw	s0,56(sp)
80002550:	02912a23          	sw	s1,52(sp)
80002554:	03212823          	sw	s2,48(sp)
80002558:	03312623          	sw	s3,44(sp)
8000255c:	04010413          	addi	s0,sp,64
80002560:	fca42623          	sw	a0,-52(s0)
80002564:	fcb42423          	sw	a1,-56(s0)
    size_t posn = q->getpos(d);
80002568:	fcc42783          	lw	a5,-52(s0)
8000256c:	0147a783          	lw	a5,20(a5)
80002570:	fc842503          	lw	a0,-56(s0)
80002574:	000780e7          	jalr	a5
80002578:	fca42e23          	sw	a0,-36(s0)
    q->d[posn] = q->d[--q->size];
8000257c:	fcc42783          	lw	a5,-52(s0)
80002580:	0247a703          	lw	a4,36(a5)
80002584:	fcc42783          	lw	a5,-52(s0)
80002588:	0007a783          	lw	a5,0(a5)
8000258c:	fff78693          	addi	a3,a5,-1
80002590:	fcc42783          	lw	a5,-52(s0)
80002594:	00d7a023          	sw	a3,0(a5)
80002598:	fcc42783          	lw	a5,-52(s0)
8000259c:	0007a783          	lw	a5,0(a5)
800025a0:	00279793          	slli	a5,a5,0x2
800025a4:	00f70733          	add	a4,a4,a5
800025a8:	fcc42783          	lw	a5,-52(s0)
800025ac:	0247a683          	lw	a3,36(a5)
800025b0:	fdc42783          	lw	a5,-36(s0)
800025b4:	00279793          	slli	a5,a5,0x2
800025b8:	00f687b3          	add	a5,a3,a5
800025bc:	00072703          	lw	a4,0(a4)
800025c0:	00e7a023          	sw	a4,0(a5)
    if (q->cmppri(q->getpri(d), q->getpri(q->d[posn])))
800025c4:	fcc42783          	lw	a5,-52(s0)
800025c8:	00c7a483          	lw	s1,12(a5)
800025cc:	fcc42783          	lw	a5,-52(s0)
800025d0:	0107a783          	lw	a5,16(a5)
800025d4:	fc842503          	lw	a0,-56(s0)
800025d8:	000780e7          	jalr	a5
800025dc:	00050913          	mv	s2,a0
800025e0:	00058993          	mv	s3,a1
800025e4:	fcc42783          	lw	a5,-52(s0)
800025e8:	0107a683          	lw	a3,16(a5)
800025ec:	fcc42783          	lw	a5,-52(s0)
800025f0:	0247a703          	lw	a4,36(a5)
800025f4:	fdc42783          	lw	a5,-36(s0)
800025f8:	00279793          	slli	a5,a5,0x2
800025fc:	00f707b3          	add	a5,a4,a5
80002600:	0007a783          	lw	a5,0(a5)
80002604:	00078513          	mv	a0,a5
80002608:	000680e7          	jalr	a3
8000260c:	00050793          	mv	a5,a0
80002610:	00058813          	mv	a6,a1
80002614:	00078613          	mv	a2,a5
80002618:	00080693          	mv	a3,a6
8000261c:	00090513          	mv	a0,s2
80002620:	00098593          	mv	a1,s3
80002624:	000480e7          	jalr	s1
80002628:	00050793          	mv	a5,a0
8000262c:	00078a63          	beqz	a5,80002640 <pqueue_remove+0xfc>
        bubble_up(q, posn);
80002630:	fdc42583          	lw	a1,-36(s0)
80002634:	fcc42503          	lw	a0,-52(s0)
80002638:	aa1ff0ef          	jal	ra,800020d8 <bubble_up>
8000263c:	0100006f          	j	8000264c <pqueue_remove+0x108>
    else
        percolate_down(q, posn);
80002640:	fdc42583          	lw	a1,-36(s0)
80002644:	fcc42503          	lw	a0,-52(s0)
80002648:	c0dff0ef          	jal	ra,80002254 <percolate_down>

    return 0;
8000264c:	00000793          	li	a5,0
}
80002650:	00078513          	mv	a0,a5
80002654:	03c12083          	lw	ra,60(sp)
80002658:	03812403          	lw	s0,56(sp)
8000265c:	03412483          	lw	s1,52(sp)
80002660:	03012903          	lw	s2,48(sp)
80002664:	02c12983          	lw	s3,44(sp)
80002668:	04010113          	addi	sp,sp,64
8000266c:	00008067          	ret

80002670 <pqueue_pop>:

void* pqueue_pop(pqueue_t *q) {
80002670:	fd010113          	addi	sp,sp,-48
80002674:	02112623          	sw	ra,44(sp)
80002678:	02812423          	sw	s0,40(sp)
8000267c:	03010413          	addi	s0,sp,48
80002680:	fca42e23          	sw	a0,-36(s0)
    void* head;
    
    if (!q || q->size == 1)
80002684:	fdc42783          	lw	a5,-36(s0)
80002688:	00078a63          	beqz	a5,8000269c <pqueue_pop+0x2c>
8000268c:	fdc42783          	lw	a5,-36(s0)
80002690:	0007a703          	lw	a4,0(a5)
80002694:	00100793          	li	a5,1
80002698:	00f71663          	bne	a4,a5,800026a4 <pqueue_pop+0x34>
        return NULL;
8000269c:	00000793          	li	a5,0
800026a0:	0640006f          	j	80002704 <pqueue_pop+0x94>
        
    head = q->d[1];
800026a4:	fdc42783          	lw	a5,-36(s0)
800026a8:	0247a783          	lw	a5,36(a5)
800026ac:	0047a783          	lw	a5,4(a5)
800026b0:	fef42623          	sw	a5,-20(s0)
    q->d[1] = q->d[--q->size];
800026b4:	fdc42783          	lw	a5,-36(s0)
800026b8:	0247a703          	lw	a4,36(a5)
800026bc:	fdc42783          	lw	a5,-36(s0)
800026c0:	0007a783          	lw	a5,0(a5)
800026c4:	fff78693          	addi	a3,a5,-1
800026c8:	fdc42783          	lw	a5,-36(s0)
800026cc:	00d7a023          	sw	a3,0(a5)
800026d0:	fdc42783          	lw	a5,-36(s0)
800026d4:	0007a783          	lw	a5,0(a5)
800026d8:	00279793          	slli	a5,a5,0x2
800026dc:	00f70733          	add	a4,a4,a5
800026e0:	fdc42783          	lw	a5,-36(s0)
800026e4:	0247a783          	lw	a5,36(a5)
800026e8:	00478793          	addi	a5,a5,4
800026ec:	00072703          	lw	a4,0(a4)
800026f0:	00e7a023          	sw	a4,0(a5)
    percolate_down(q, 1);
800026f4:	00100593          	li	a1,1
800026f8:	fdc42503          	lw	a0,-36(s0)
800026fc:	b59ff0ef          	jal	ra,80002254 <percolate_down>
    
    return head;
80002700:	fec42783          	lw	a5,-20(s0)
}
80002704:	00078513          	mv	a0,a5
80002708:	02c12083          	lw	ra,44(sp)
8000270c:	02812403          	lw	s0,40(sp)
80002710:	03010113          	addi	sp,sp,48
80002714:	00008067          	ret

80002718 <pqueue_peek>:

void* pqueue_peek(pqueue_t *q) {
80002718:	fd010113          	addi	sp,sp,-48
8000271c:	02812623          	sw	s0,44(sp)
80002720:	03010413          	addi	s0,sp,48
80002724:	fca42e23          	sw	a0,-36(s0)
    void *d;
    if (!q || q->size == 1)
80002728:	fdc42783          	lw	a5,-36(s0)
8000272c:	00078a63          	beqz	a5,80002740 <pqueue_peek+0x28>
80002730:	fdc42783          	lw	a5,-36(s0)
80002734:	0007a703          	lw	a4,0(a5)
80002738:	00100793          	li	a5,1
8000273c:	00f71663          	bne	a4,a5,80002748 <pqueue_peek+0x30>
        return NULL;
80002740:	00000793          	li	a5,0
80002744:	0180006f          	j	8000275c <pqueue_peek+0x44>
    d = q->d[1];
80002748:	fdc42783          	lw	a5,-36(s0)
8000274c:	0247a783          	lw	a5,36(a5)
80002750:	0047a783          	lw	a5,4(a5)
80002754:	fef42623          	sw	a5,-20(s0)
    return d;
80002758:	fec42783          	lw	a5,-20(s0)
}
8000275c:	00078513          	mv	a0,a5
80002760:	02c12403          	lw	s0,44(sp)
80002764:	03010113          	addi	sp,sp,48
80002768:	00008067          	ret

8000276c <pqueue_dump>:

void pqueue_dump(pqueue_t *q, FILE *out, pqueue_print_entry_f print) {
8000276c:	fd010113          	addi	sp,sp,-48
80002770:	02812623          	sw	s0,44(sp)
80002774:	03010413          	addi	s0,sp,48
80002778:	fca42e23          	sw	a0,-36(s0)
8000277c:	fcb42c23          	sw	a1,-40(s0)
80002780:	fcc42a23          	sw	a2,-44(s0)
    int i;

    // fprintf(stdout,"posn\tleft\tright\tparent\tmaxchild\t...\n");
    for (i = 1; i < q->size ;i++) {
80002784:	00100793          	li	a5,1
80002788:	fef42623          	sw	a5,-20(s0)
8000278c:	0100006f          	j	8000279c <pqueue_dump+0x30>
80002790:	fec42783          	lw	a5,-20(s0)
80002794:	00178793          	addi	a5,a5,1
80002798:	fef42623          	sw	a5,-20(s0)
8000279c:	fdc42783          	lw	a5,-36(s0)
800027a0:	0007a703          	lw	a4,0(a5)
800027a4:	fec42783          	lw	a5,-20(s0)
800027a8:	fee7e4e3          	bltu	a5,a4,80002790 <pqueue_dump+0x24>
                left(i), right(i), parent(i),
                (unsigned int)maxchild(q, i));
        print(out, q->d[i]);
        */
    }
}
800027ac:	00000013          	nop
800027b0:	02c12403          	lw	s0,44(sp)
800027b4:	03010113          	addi	sp,sp,48
800027b8:	00008067          	ret

800027bc <pqueue_print>:

void pqueue_print(pqueue_t *q, FILE *out, pqueue_print_entry_f print) {
800027bc:	fd010113          	addi	sp,sp,-48
800027c0:	02112623          	sw	ra,44(sp)
800027c4:	02812423          	sw	s0,40(sp)
800027c8:	03010413          	addi	s0,sp,48
800027cc:	fca42e23          	sw	a0,-36(s0)
800027d0:	fcb42c23          	sw	a1,-40(s0)
800027d4:	fcc42a23          	sw	a2,-44(s0)
    pqueue_t *dup;
	void *e;

    dup = pqueue_init(q->size,
800027d8:	fdc42783          	lw	a5,-36(s0)
800027dc:	0007a503          	lw	a0,0(a5)
800027e0:	fdc42783          	lw	a5,-36(s0)
800027e4:	00c7a583          	lw	a1,12(a5)
800027e8:	fdc42783          	lw	a5,-36(s0)
800027ec:	0107a603          	lw	a2,16(a5)
800027f0:	fdc42783          	lw	a5,-36(s0)
800027f4:	0147a683          	lw	a3,20(a5)
800027f8:	fdc42783          	lw	a5,-36(s0)
800027fc:	0187a703          	lw	a4,24(a5)
80002800:	fdc42783          	lw	a5,-36(s0)
80002804:	01c7a883          	lw	a7,28(a5)
80002808:	fdc42783          	lw	a5,-36(s0)
8000280c:	0207a783          	lw	a5,32(a5)
80002810:	00078813          	mv	a6,a5
80002814:	00088793          	mv	a5,a7
80002818:	e28ff0ef          	jal	ra,80001e40 <pqueue_init>
8000281c:	fea42623          	sw	a0,-20(s0)
                      q->cmppri, q->getpri,
                      q->getpos, q->setpos, q->eqelem, q->prt);
    dup->size = q->size;
80002820:	fdc42783          	lw	a5,-36(s0)
80002824:	0007a703          	lw	a4,0(a5)
80002828:	fec42783          	lw	a5,-20(s0)
8000282c:	00e7a023          	sw	a4,0(a5)
    dup->avail = q->avail;
80002830:	fdc42783          	lw	a5,-36(s0)
80002834:	0047a703          	lw	a4,4(a5)
80002838:	fec42783          	lw	a5,-20(s0)
8000283c:	00e7a223          	sw	a4,4(a5)
    dup->step = q->step;
80002840:	fdc42783          	lw	a5,-36(s0)
80002844:	0087a703          	lw	a4,8(a5)
80002848:	fec42783          	lw	a5,-20(s0)
8000284c:	00e7a423          	sw	a4,8(a5)

    memcpy(dup->d, q->d, (q->size * sizeof(void *)));
80002850:	fec42783          	lw	a5,-20(s0)
80002854:	0247a703          	lw	a4,36(a5)
80002858:	fdc42783          	lw	a5,-36(s0)
8000285c:	0247a683          	lw	a3,36(a5)
80002860:	fdc42783          	lw	a5,-36(s0)
80002864:	0007a783          	lw	a5,0(a5)
80002868:	00279793          	slli	a5,a5,0x2
8000286c:	00078613          	mv	a2,a5
80002870:	00068593          	mv	a1,a3
80002874:	00070513          	mv	a0,a4
80002878:	591060ef          	jal	ra,80009608 <memcpy>

    while ((e = pqueue_pop(dup)))
8000287c:	0140006f          	j	80002890 <pqueue_print+0xd4>
		print(out, e);
80002880:	fd442783          	lw	a5,-44(s0)
80002884:	fe842583          	lw	a1,-24(s0)
80002888:	fd842503          	lw	a0,-40(s0)
8000288c:	000780e7          	jalr	a5
    while ((e = pqueue_pop(dup)))
80002890:	fec42503          	lw	a0,-20(s0)
80002894:	dddff0ef          	jal	ra,80002670 <pqueue_pop>
80002898:	fea42423          	sw	a0,-24(s0)
8000289c:	fe842783          	lw	a5,-24(s0)
800028a0:	fe0790e3          	bnez	a5,80002880 <pqueue_print+0xc4>

    pqueue_free(dup);
800028a4:	fec42503          	lw	a0,-20(s0)
800028a8:	eb0ff0ef          	jal	ra,80001f58 <pqueue_free>
}
800028ac:	00000013          	nop
800028b0:	02c12083          	lw	ra,44(sp)
800028b4:	02812403          	lw	s0,40(sp)
800028b8:	03010113          	addi	sp,sp,48
800028bc:	00008067          	ret

800028c0 <subtree_is_valid>:

static int subtree_is_valid(pqueue_t *q, int pos) {
800028c0:	fd010113          	addi	sp,sp,-48
800028c4:	02112623          	sw	ra,44(sp)
800028c8:	02812423          	sw	s0,40(sp)
800028cc:	02912223          	sw	s1,36(sp)
800028d0:	03212023          	sw	s2,32(sp)
800028d4:	01312e23          	sw	s3,28(sp)
800028d8:	03010413          	addi	s0,sp,48
800028dc:	fca42e23          	sw	a0,-36(s0)
800028e0:	fcb42c23          	sw	a1,-40(s0)
    if (left(pos) < q->size) {
800028e4:	fd842783          	lw	a5,-40(s0)
800028e8:	00179793          	slli	a5,a5,0x1
800028ec:	00078713          	mv	a4,a5
800028f0:	fdc42783          	lw	a5,-36(s0)
800028f4:	0007a783          	lw	a5,0(a5)
800028f8:	0af77c63          	bleu	a5,a4,800029b0 <subtree_is_valid+0xf0>
        /* has a left child */
        if (q->cmppri(q->getpri(q->d[pos]), q->getpri(q->d[left(pos)])))
800028fc:	fdc42783          	lw	a5,-36(s0)
80002900:	00c7a483          	lw	s1,12(a5)
80002904:	fdc42783          	lw	a5,-36(s0)
80002908:	0107a683          	lw	a3,16(a5)
8000290c:	fdc42783          	lw	a5,-36(s0)
80002910:	0247a703          	lw	a4,36(a5)
80002914:	fd842783          	lw	a5,-40(s0)
80002918:	00279793          	slli	a5,a5,0x2
8000291c:	00f707b3          	add	a5,a4,a5
80002920:	0007a783          	lw	a5,0(a5)
80002924:	00078513          	mv	a0,a5
80002928:	000680e7          	jalr	a3
8000292c:	00050913          	mv	s2,a0
80002930:	00058993          	mv	s3,a1
80002934:	fdc42783          	lw	a5,-36(s0)
80002938:	0107a683          	lw	a3,16(a5)
8000293c:	fdc42783          	lw	a5,-36(s0)
80002940:	0247a703          	lw	a4,36(a5)
80002944:	fd842783          	lw	a5,-40(s0)
80002948:	00179793          	slli	a5,a5,0x1
8000294c:	00279793          	slli	a5,a5,0x2
80002950:	00f707b3          	add	a5,a4,a5
80002954:	0007a783          	lw	a5,0(a5)
80002958:	00078513          	mv	a0,a5
8000295c:	000680e7          	jalr	a3
80002960:	00050793          	mv	a5,a0
80002964:	00058813          	mv	a6,a1
80002968:	00078613          	mv	a2,a5
8000296c:	00080693          	mv	a3,a6
80002970:	00090513          	mv	a0,s2
80002974:	00098593          	mv	a1,s3
80002978:	000480e7          	jalr	s1
8000297c:	00050793          	mv	a5,a0
80002980:	00078663          	beqz	a5,8000298c <subtree_is_valid+0xcc>
            return 0;
80002984:	00000793          	li	a5,0
80002988:	1040006f          	j	80002a8c <subtree_is_valid+0x1cc>
        if (!subtree_is_valid(q, left(pos)))
8000298c:	fd842783          	lw	a5,-40(s0)
80002990:	00179793          	slli	a5,a5,0x1
80002994:	00078593          	mv	a1,a5
80002998:	fdc42503          	lw	a0,-36(s0)
8000299c:	f25ff0ef          	jal	ra,800028c0 <subtree_is_valid>
800029a0:	00050793          	mv	a5,a0
800029a4:	00079663          	bnez	a5,800029b0 <subtree_is_valid+0xf0>
            return 0;
800029a8:	00000793          	li	a5,0
800029ac:	0e00006f          	j	80002a8c <subtree_is_valid+0x1cc>
    }
    if (right(pos) < q->size) {
800029b0:	fd842783          	lw	a5,-40(s0)
800029b4:	00179793          	slli	a5,a5,0x1
800029b8:	00178793          	addi	a5,a5,1
800029bc:	00078713          	mv	a4,a5
800029c0:	fdc42783          	lw	a5,-36(s0)
800029c4:	0007a783          	lw	a5,0(a5)
800029c8:	0cf77063          	bleu	a5,a4,80002a88 <subtree_is_valid+0x1c8>
        /* has a right child */
        if (q->cmppri(q->getpri(q->d[pos]), q->getpri(q->d[right(pos)])))
800029cc:	fdc42783          	lw	a5,-36(s0)
800029d0:	00c7a483          	lw	s1,12(a5)
800029d4:	fdc42783          	lw	a5,-36(s0)
800029d8:	0107a683          	lw	a3,16(a5)
800029dc:	fdc42783          	lw	a5,-36(s0)
800029e0:	0247a703          	lw	a4,36(a5)
800029e4:	fd842783          	lw	a5,-40(s0)
800029e8:	00279793          	slli	a5,a5,0x2
800029ec:	00f707b3          	add	a5,a4,a5
800029f0:	0007a783          	lw	a5,0(a5)
800029f4:	00078513          	mv	a0,a5
800029f8:	000680e7          	jalr	a3
800029fc:	00050913          	mv	s2,a0
80002a00:	00058993          	mv	s3,a1
80002a04:	fdc42783          	lw	a5,-36(s0)
80002a08:	0107a683          	lw	a3,16(a5)
80002a0c:	fdc42783          	lw	a5,-36(s0)
80002a10:	0247a703          	lw	a4,36(a5)
80002a14:	fd842783          	lw	a5,-40(s0)
80002a18:	00179793          	slli	a5,a5,0x1
80002a1c:	00178793          	addi	a5,a5,1
80002a20:	00279793          	slli	a5,a5,0x2
80002a24:	00f707b3          	add	a5,a4,a5
80002a28:	0007a783          	lw	a5,0(a5)
80002a2c:	00078513          	mv	a0,a5
80002a30:	000680e7          	jalr	a3
80002a34:	00050793          	mv	a5,a0
80002a38:	00058813          	mv	a6,a1
80002a3c:	00078613          	mv	a2,a5
80002a40:	00080693          	mv	a3,a6
80002a44:	00090513          	mv	a0,s2
80002a48:	00098593          	mv	a1,s3
80002a4c:	000480e7          	jalr	s1
80002a50:	00050793          	mv	a5,a0
80002a54:	00078663          	beqz	a5,80002a60 <subtree_is_valid+0x1a0>
            return 0;
80002a58:	00000793          	li	a5,0
80002a5c:	0300006f          	j	80002a8c <subtree_is_valid+0x1cc>
        if (!subtree_is_valid(q, right(pos)))
80002a60:	fd842783          	lw	a5,-40(s0)
80002a64:	00179793          	slli	a5,a5,0x1
80002a68:	00178793          	addi	a5,a5,1
80002a6c:	00078593          	mv	a1,a5
80002a70:	fdc42503          	lw	a0,-36(s0)
80002a74:	e4dff0ef          	jal	ra,800028c0 <subtree_is_valid>
80002a78:	00050793          	mv	a5,a0
80002a7c:	00079663          	bnez	a5,80002a88 <subtree_is_valid+0x1c8>
            return 0;
80002a80:	00000793          	li	a5,0
80002a84:	0080006f          	j	80002a8c <subtree_is_valid+0x1cc>
    }
    return 1;
80002a88:	00100793          	li	a5,1
}
80002a8c:	00078513          	mv	a0,a5
80002a90:	02c12083          	lw	ra,44(sp)
80002a94:	02812403          	lw	s0,40(sp)
80002a98:	02412483          	lw	s1,36(sp)
80002a9c:	02012903          	lw	s2,32(sp)
80002aa0:	01c12983          	lw	s3,28(sp)
80002aa4:	03010113          	addi	sp,sp,48
80002aa8:	00008067          	ret

80002aac <pqueue_is_valid>:

int pqueue_is_valid(pqueue_t *q) {
80002aac:	fe010113          	addi	sp,sp,-32
80002ab0:	00112e23          	sw	ra,28(sp)
80002ab4:	00812c23          	sw	s0,24(sp)
80002ab8:	02010413          	addi	s0,sp,32
80002abc:	fea42623          	sw	a0,-20(s0)
    return subtree_is_valid(q, 1);
80002ac0:	00100593          	li	a1,1
80002ac4:	fec42503          	lw	a0,-20(s0)
80002ac8:	df9ff0ef          	jal	ra,800028c0 <subtree_is_valid>
80002acc:	00050793          	mv	a5,a0
}
80002ad0:	00078513          	mv	a0,a5
80002ad4:	01c12083          	lw	ra,28(sp)
80002ad8:	01812403          	lw	s0,24(sp)
80002adc:	02010113          	addi	sp,sp,32
80002ae0:	00008067          	ret

80002ae4 <_lf_set_stop_tag>:
 * of the provided tag and stop_tag
 * 
 * @note In threaded programs, the mutex must be locked before
 *  calling this function.
 */
void _lf_set_stop_tag(tag_t tag) {
80002ae4:	fd010113          	addi	sp,sp,-48
80002ae8:	02112623          	sw	ra,44(sp)
80002aec:	02812423          	sw	s0,40(sp)
80002af0:	02912223          	sw	s1,36(sp)
80002af4:	03010413          	addi	s0,sp,48
80002af8:	00050493          	mv	s1,a0
    if (compare_tags(tag, stop_tag) < 0) {
80002afc:	0004a603          	lw	a2,0(s1)
80002b00:	0044a683          	lw	a3,4(s1)
80002b04:	0084a703          	lw	a4,8(s1)
80002b08:	00c4a783          	lw	a5,12(s1)
80002b0c:	fec42023          	sw	a2,-32(s0)
80002b10:	fed42223          	sw	a3,-28(s0)
80002b14:	fee42423          	sw	a4,-24(s0)
80002b18:	fef42623          	sw	a5,-20(s0)
80002b1c:	0000a797          	auipc	a5,0xa
80002b20:	56478793          	addi	a5,a5,1380 # 8000d080 <stop_tag>
80002b24:	0007a603          	lw	a2,0(a5)
80002b28:	0047a683          	lw	a3,4(a5)
80002b2c:	0087a703          	lw	a4,8(a5)
80002b30:	00c7a783          	lw	a5,12(a5)
80002b34:	fcc42823          	sw	a2,-48(s0)
80002b38:	fcd42a23          	sw	a3,-44(s0)
80002b3c:	fce42c23          	sw	a4,-40(s0)
80002b40:	fcf42e23          	sw	a5,-36(s0)
80002b44:	fd040713          	addi	a4,s0,-48
80002b48:	fe040793          	addi	a5,s0,-32
80002b4c:	00070593          	mv	a1,a4
80002b50:	00078513          	mv	a0,a5
80002b54:	b11fe0ef          	jal	ra,80001664 <compare_tags>
80002b58:	00050793          	mv	a5,a0
80002b5c:	0207d663          	bgez	a5,80002b88 <_lf_set_stop_tag+0xa4>
        stop_tag = tag;
80002b60:	0000a797          	auipc	a5,0xa
80002b64:	52078793          	addi	a5,a5,1312 # 8000d080 <stop_tag>
80002b68:	0004a583          	lw	a1,0(s1)
80002b6c:	0044a603          	lw	a2,4(s1)
80002b70:	0084a683          	lw	a3,8(s1)
80002b74:	00c4a703          	lw	a4,12(s1)
80002b78:	00b7a023          	sw	a1,0(a5)
80002b7c:	00c7a223          	sw	a2,4(a5)
80002b80:	00d7a423          	sw	a3,8(a5)
80002b84:	00e7a623          	sw	a4,12(a5)
    }
}
80002b88:	00000013          	nop
80002b8c:	02c12083          	lw	ra,44(sp)
80002b90:	02812403          	lw	s0,40(sp)
80002b94:	02412483          	lw	s1,36(sp)
80002b98:	03010113          	addi	sp,sp,48
80002b9c:	00008067          	ret

80002ba0 <get_stp_offset>:

/**
 * Return the global STP offset on advancement of logical
 * time for federated execution.
 */
interval_t get_stp_offset() {
80002ba0:	ff010113          	addi	sp,sp,-16
80002ba4:	00812623          	sw	s0,12(sp)
80002ba8:	01010413          	addi	s0,sp,16
    return _lf_global_time_STP_offset;
80002bac:	87018793          	addi	a5,gp,-1936 # 8000daa0 <_lf_global_time_STP_offset>
80002bb0:	0047a803          	lw	a6,4(a5)
80002bb4:	0007a783          	lw	a5,0(a5)
}
80002bb8:	00078513          	mv	a0,a5
80002bbc:	00080593          	mv	a1,a6
80002bc0:	00c12403          	lw	s0,12(sp)
80002bc4:	01010113          	addi	sp,sp,16
80002bc8:	00008067          	ret

80002bcc <set_stp_offset>:
 * time for federated execution.
 * 
 * @param offset A positive time value to be applied
 *  as the STP offset.
 */
void set_stp_offset(interval_t offset) {
80002bcc:	fe010113          	addi	sp,sp,-32
80002bd0:	00812e23          	sw	s0,28(sp)
80002bd4:	02010413          	addi	s0,sp,32
80002bd8:	fea42423          	sw	a0,-24(s0)
80002bdc:	feb42623          	sw	a1,-20(s0)
    if (offset > 0) {
80002be0:	fec42783          	lw	a5,-20(s0)
80002be4:	00f04c63          	bgtz	a5,80002bfc <set_stp_offset+0x30>
80002be8:	fec42783          	lw	a5,-20(s0)
80002bec:	02079263          	bnez	a5,80002c10 <set_stp_offset+0x44>
80002bf0:	fe842783          	lw	a5,-24(s0)
80002bf4:	00079463          	bnez	a5,80002bfc <set_stp_offset+0x30>
        _lf_global_time_STP_offset = offset;
    }
}
80002bf8:	0180006f          	j	80002c10 <set_stp_offset+0x44>
        _lf_global_time_STP_offset = offset;
80002bfc:	87018713          	addi	a4,gp,-1936 # 8000daa0 <_lf_global_time_STP_offset>
80002c00:	fe842783          	lw	a5,-24(s0)
80002c04:	fec42803          	lw	a6,-20(s0)
80002c08:	00f72023          	sw	a5,0(a4)
80002c0c:	01072223          	sw	a6,4(a4)
}
80002c10:	00000013          	nop
80002c14:	01c12403          	lw	s0,28(sp)
80002c18:	02010113          	addi	sp,sp,32
80002c1c:	00008067          	ret

80002c20 <print_time>:
 * followed by a carriage return. Ideally, this would use the locale to
 * use periods if appropriate, but I haven't found a sufficiently portable
 * way to do that.
 * @param time A time value.
 */
void print_time(instant_t time) {
80002c20:	fd010113          	addi	sp,sp,-48
80002c24:	02112623          	sw	ra,44(sp)
80002c28:	02812423          	sw	s0,40(sp)
80002c2c:	03010413          	addi	s0,sp,48
80002c30:	fca42c23          	sw	a0,-40(s0)
80002c34:	fcb42e23          	sw	a1,-36(s0)
    if (time < 1000LL || time < 0LL) {
80002c38:	fdc42783          	lw	a5,-36(s0)
80002c3c:	00f04e63          	bgtz	a5,80002c58 <print_time+0x38>
80002c40:	fdc42783          	lw	a5,-36(s0)
80002c44:	06079c63          	bnez	a5,80002cbc <print_time+0x9c>
80002c48:	fd842703          	lw	a4,-40(s0)
80002c4c:	3e700793          	li	a5,999
80002c50:	00e7e463          	bltu	a5,a4,80002c58 <print_time+0x38>
        // printf("%lld", time);
        return;
80002c54:	0680006f          	j	80002cbc <print_time+0x9c>
    if (time < 1000LL || time < 0LL) {
80002c58:	fdc42783          	lw	a5,-36(s0)
80002c5c:	0607c063          	bltz	a5,80002cbc <print_time+0x9c>
    }
    print_time(time/1000LL);
80002c60:	fd842783          	lw	a5,-40(s0)
80002c64:	fdc42803          	lw	a6,-36(s0)
80002c68:	3e800613          	li	a2,1000
80002c6c:	00000693          	li	a3,0
80002c70:	00078513          	mv	a0,a5
80002c74:	00080593          	mv	a1,a6
80002c78:	619060ef          	jal	ra,80009a90 <__divdi3>
80002c7c:	00050793          	mv	a5,a0
80002c80:	00058813          	mv	a6,a1
80002c84:	00078513          	mv	a0,a5
80002c88:	00080593          	mv	a1,a6
80002c8c:	f95ff0ef          	jal	ra,80002c20 <print_time>
    int to_print = time%1000;
80002c90:	fd842783          	lw	a5,-40(s0)
80002c94:	fdc42803          	lw	a6,-36(s0)
80002c98:	3e800613          	li	a2,1000
80002c9c:	00000693          	li	a3,0
80002ca0:	00078513          	mv	a0,a5
80002ca4:	00080593          	mv	a1,a6
80002ca8:	268070ef          	jal	ra,80009f10 <__moddi3>
80002cac:	00050793          	mv	a5,a0
80002cb0:	00058813          	mv	a6,a1
80002cb4:	fef42623          	sw	a5,-20(s0)
80002cb8:	0080006f          	j	80002cc0 <print_time+0xa0>
        return;
80002cbc:	00000013          	nop
    // printf (",%03d", to_print);
}
80002cc0:	02c12083          	lw	ra,44(sp)
80002cc4:	02812403          	lw	s0,40(sp)
80002cc8:	03010113          	addi	sp,sp,48
80002ccc:	00008067          	ret

80002cd0 <in_reverse_order>:
// ********** Priority Queue Support Start

/**
 * Return whether the first and second argument are given in reverse order.
 */
static int in_reverse_order(pqueue_pri_t thiz, pqueue_pri_t that) {
80002cd0:	fe010113          	addi	sp,sp,-32
80002cd4:	00812e23          	sw	s0,28(sp)
80002cd8:	02010413          	addi	s0,sp,32
80002cdc:	fea42423          	sw	a0,-24(s0)
80002ce0:	feb42623          	sw	a1,-20(s0)
80002ce4:	fec42023          	sw	a2,-32(s0)
80002ce8:	fed42223          	sw	a3,-28(s0)
    return (thiz > that);
80002cec:	00100693          	li	a3,1
80002cf0:	fec42703          	lw	a4,-20(s0)
80002cf4:	fe442783          	lw	a5,-28(s0)
80002cf8:	02e7e063          	bltu	a5,a4,80002d18 <in_reverse_order+0x48>
80002cfc:	fec42703          	lw	a4,-20(s0)
80002d00:	fe442783          	lw	a5,-28(s0)
80002d04:	00f71863          	bne	a4,a5,80002d14 <in_reverse_order+0x44>
80002d08:	fe842703          	lw	a4,-24(s0)
80002d0c:	fe042783          	lw	a5,-32(s0)
80002d10:	00e7e463          	bltu	a5,a4,80002d18 <in_reverse_order+0x48>
80002d14:	00000693          	li	a3,0
80002d18:	0ff6f793          	andi	a5,a3,255
}
80002d1c:	00078513          	mv	a0,a5
80002d20:	01c12403          	lw	s0,28(sp)
80002d24:	02010113          	addi	sp,sp,32
80002d28:	00008067          	ret

80002d2c <in_no_particular_order>:

/**
 * Return whether the first and second argument are given in reverse order.
 */
static int in_no_particular_order(pqueue_pri_t thiz, pqueue_pri_t that) {
80002d2c:	fe010113          	addi	sp,sp,-32
80002d30:	00812e23          	sw	s0,28(sp)
80002d34:	02010413          	addi	s0,sp,32
80002d38:	fea42423          	sw	a0,-24(s0)
80002d3c:	feb42623          	sw	a1,-20(s0)
80002d40:	fec42023          	sw	a2,-32(s0)
80002d44:	fed42223          	sw	a3,-28(s0)
    return false;
80002d48:	00000793          	li	a5,0
}
80002d4c:	00078513          	mv	a0,a5
80002d50:	01c12403          	lw	s0,28(sp)
80002d54:	02010113          	addi	sp,sp,32
80002d58:	00008067          	ret

80002d5c <event_matches>:

/**
 * Return whether or not the given events have matching triggers.
 */
static int event_matches(void* next, void* curr) {
80002d5c:	fe010113          	addi	sp,sp,-32
80002d60:	00812e23          	sw	s0,28(sp)
80002d64:	02010413          	addi	s0,sp,32
80002d68:	fea42623          	sw	a0,-20(s0)
80002d6c:	feb42423          	sw	a1,-24(s0)
    return (((event_t*)next)->trigger == ((event_t*)curr)->trigger);
80002d70:	fec42783          	lw	a5,-20(s0)
80002d74:	0087a703          	lw	a4,8(a5)
80002d78:	fe842783          	lw	a5,-24(s0)
80002d7c:	0087a783          	lw	a5,8(a5)
80002d80:	40f707b3          	sub	a5,a4,a5
80002d84:	0017b793          	seqz	a5,a5
80002d88:	0ff7f793          	andi	a5,a5,255
}
80002d8c:	00078513          	mv	a0,a5
80002d90:	01c12403          	lw	s0,28(sp)
80002d94:	02010113          	addi	sp,sp,32
80002d98:	00008067          	ret

80002d9c <reaction_matches>:

/**
 * Return whether or not the given reaction_t pointers 
 * point to the same struct.
 */
static int reaction_matches(void* next, void* curr) {
80002d9c:	fe010113          	addi	sp,sp,-32
80002da0:	00812e23          	sw	s0,28(sp)
80002da4:	02010413          	addi	s0,sp,32
80002da8:	fea42623          	sw	a0,-20(s0)
80002dac:	feb42423          	sw	a1,-24(s0)
    return (next == curr);
80002db0:	fec42703          	lw	a4,-20(s0)
80002db4:	fe842783          	lw	a5,-24(s0)
80002db8:	40f707b3          	sub	a5,a4,a5
80002dbc:	0017b793          	seqz	a5,a5
80002dc0:	0ff7f793          	andi	a5,a5,255
}
80002dc4:	00078513          	mv	a0,a5
80002dc8:	01c12403          	lw	s0,28(sp)
80002dcc:	02010113          	addi	sp,sp,32
80002dd0:	00008067          	ret

80002dd4 <get_event_time>:

/**
 * Report a priority equal to the time of the given event.
 * Used for sorting pointers to event_t structs in the event queue.
 */
static pqueue_pri_t get_event_time(void *a) {
80002dd4:	fe010113          	addi	sp,sp,-32
80002dd8:	00812e23          	sw	s0,28(sp)
80002ddc:	02010413          	addi	s0,sp,32
80002de0:	fea42623          	sw	a0,-20(s0)
    return (pqueue_pri_t)(((event_t*) a)->time);
80002de4:	fec42783          	lw	a5,-20(s0)
80002de8:	0047a803          	lw	a6,4(a5)
80002dec:	0007a783          	lw	a5,0(a5)
}
80002df0:	00078513          	mv	a0,a5
80002df4:	00080593          	mv	a1,a6
80002df8:	01c12403          	lw	s0,28(sp)
80002dfc:	02010113          	addi	sp,sp,32
80002e00:	00008067          	ret

80002e04 <get_reaction_index>:
/**
 * Report a priority equal to the index of the given reaction.
 * Used for sorting pointers to reaction_t structs in the 
 * blocked and executing queues.
 */
static pqueue_pri_t get_reaction_index(void *a) {
80002e04:	fe010113          	addi	sp,sp,-32
80002e08:	00812e23          	sw	s0,28(sp)
80002e0c:	02010413          	addi	s0,sp,32
80002e10:	fea42623          	sw	a0,-20(s0)
    return ((reaction_t*) a)->index;
80002e14:	fec42783          	lw	a5,-20(s0)
80002e18:	0147a803          	lw	a6,20(a5)
80002e1c:	0107a783          	lw	a5,16(a5)
}
80002e20:	00078513          	mv	a0,a5
80002e24:	00080593          	mv	a1,a6
80002e28:	01c12403          	lw	s0,28(sp)
80002e2c:	02010113          	addi	sp,sp,32
80002e30:	00008067          	ret

80002e34 <get_event_position>:

/**
 * Return the given event's position in the queue.
 */
static size_t get_event_position(void *a) {
80002e34:	fe010113          	addi	sp,sp,-32
80002e38:	00812e23          	sw	s0,28(sp)
80002e3c:	02010413          	addi	s0,sp,32
80002e40:	fea42623          	sw	a0,-20(s0)
    return ((event_t*) a)->pos;
80002e44:	fec42783          	lw	a5,-20(s0)
80002e48:	00c7a783          	lw	a5,12(a5)
}
80002e4c:	00078513          	mv	a0,a5
80002e50:	01c12403          	lw	s0,28(sp)
80002e54:	02010113          	addi	sp,sp,32
80002e58:	00008067          	ret

80002e5c <get_reaction_position>:

/**
 * Return the given reaction's position in the queue.
 */
static size_t get_reaction_position(void *a) {
80002e5c:	fe010113          	addi	sp,sp,-32
80002e60:	00812e23          	sw	s0,28(sp)
80002e64:	02010413          	addi	s0,sp,32
80002e68:	fea42623          	sw	a0,-20(s0)
    return ((reaction_t*) a)->pos;
80002e6c:	fec42783          	lw	a5,-20(s0)
80002e70:	0207a783          	lw	a5,32(a5)
}
80002e74:	00078513          	mv	a0,a5
80002e78:	01c12403          	lw	s0,28(sp)
80002e7c:	02010113          	addi	sp,sp,32
80002e80:	00008067          	ret

80002e84 <set_event_position>:

/**
 * Set the given event's position in the queue.
 */
static void set_event_position(void *a, size_t pos) {
80002e84:	fe010113          	addi	sp,sp,-32
80002e88:	00812e23          	sw	s0,28(sp)
80002e8c:	02010413          	addi	s0,sp,32
80002e90:	fea42623          	sw	a0,-20(s0)
80002e94:	feb42423          	sw	a1,-24(s0)
    ((event_t*) a)->pos = pos;
80002e98:	fec42783          	lw	a5,-20(s0)
80002e9c:	fe842703          	lw	a4,-24(s0)
80002ea0:	00e7a623          	sw	a4,12(a5)
}
80002ea4:	00000013          	nop
80002ea8:	01c12403          	lw	s0,28(sp)
80002eac:	02010113          	addi	sp,sp,32
80002eb0:	00008067          	ret

80002eb4 <set_reaction_position>:

/**
 * Return the given reaction's position in the queue.
 */
static void set_reaction_position(void *a, size_t pos) {
80002eb4:	fe010113          	addi	sp,sp,-32
80002eb8:	00812e23          	sw	s0,28(sp)
80002ebc:	02010413          	addi	s0,sp,32
80002ec0:	fea42623          	sw	a0,-20(s0)
80002ec4:	feb42423          	sw	a1,-24(s0)
    ((reaction_t*) a)->pos = pos;
80002ec8:	fec42783          	lw	a5,-20(s0)
80002ecc:	fe842703          	lw	a4,-24(s0)
80002ed0:	02e7a023          	sw	a4,32(a5)
}
80002ed4:	00000013          	nop
80002ed8:	01c12403          	lw	s0,28(sp)
80002edc:	02010113          	addi	sp,sp,32
80002ee0:	00008067          	ret

80002ee4 <print_reaction>:

/**
 * Print some information about the given reaction.
 */
static void print_reaction(FILE *out, void *reaction) {
80002ee4:	fd010113          	addi	sp,sp,-48
80002ee8:	02812623          	sw	s0,44(sp)
80002eec:	03010413          	addi	s0,sp,48
80002ef0:	fca42e23          	sw	a0,-36(s0)
80002ef4:	fcb42c23          	sw	a1,-40(s0)
	reaction_t *r = (reaction_t*)reaction;
80002ef8:	fd842783          	lw	a5,-40(s0)
80002efc:	fef42623          	sw	a5,-20(s0)
    // fprintf(out, "chain_id:%llu, index: %llu, reaction: %p\n", 
        // r->chain_id, r->index, r);
}
80002f00:	00000013          	nop
80002f04:	02c12403          	lw	s0,44(sp)
80002f08:	03010113          	addi	sp,sp,48
80002f0c:	00008067          	ret

80002f10 <print_event>:

/**
 * Print some information about the given event.
 */
static void print_event(FILE *out, void *event) {
80002f10:	fd010113          	addi	sp,sp,-48
80002f14:	02812623          	sw	s0,44(sp)
80002f18:	03010413          	addi	s0,sp,48
80002f1c:	fca42e23          	sw	a0,-36(s0)
80002f20:	fcb42c23          	sw	a1,-40(s0)
	event_t *e = (event_t*)event;
80002f24:	fd842783          	lw	a5,-40(s0)
80002f28:	fef42623          	sw	a5,-20(s0)
    // fprintf(out, "time: %lld, trigger: %p, token: %p\n",
	// 		e->time, e->trigger, e->token);
}
80002f2c:	00000013          	nop
80002f30:	02c12403          	lw	s0,44(sp)
80002f34:	03010113          	addi	sp,sp,48
80002f38:	00008067          	ret

80002f3c <__done_using>:
 * @param token Pointer to a token.
 * @return NOT_FREED if nothing was freed, VALUE_FREED if the value
 *  was freed, and TOKEN_FREED if both the value and the token were
 *  freed.
 */
token_freed __done_using(lf_token_t* token) {
80002f3c:	fd010113          	addi	sp,sp,-48
80002f40:	02112623          	sw	ra,44(sp)
80002f44:	02812423          	sw	s0,40(sp)
80002f48:	03010413          	addi	s0,sp,48
80002f4c:	fca42e23          	sw	a0,-36(s0)
    token_freed result = NOT_FREED;
80002f50:	fe042623          	sw	zero,-20(s0)
    if (token == NULL) return result;
80002f54:	fdc42783          	lw	a5,-36(s0)
80002f58:	00079663          	bnez	a5,80002f64 <__done_using+0x28>
80002f5c:	fec42783          	lw	a5,-20(s0)
80002f60:	0e80006f          	j	80003048 <__done_using+0x10c>
    if (token->ref_count == 0) {
80002f64:	fdc42783          	lw	a5,-36(s0)
80002f68:	00c7a783          	lw	a5,12(a5)
80002f6c:	00078c63          	beqz	a5,80002f84 <__done_using+0x48>
        // fprintf(stderr, "WARNING: Token being freed that has already been freed: %p\n", token);
    } else {
        token->ref_count--;
80002f70:	fdc42783          	lw	a5,-36(s0)
80002f74:	00c7a783          	lw	a5,12(a5)
80002f78:	fff78713          	addi	a4,a5,-1
80002f7c:	fdc42783          	lw	a5,-36(s0)
80002f80:	00e7a623          	sw	a4,12(a5)
    }
    DEBUG_PRINT("__done_using: ref_count = %d.", token->ref_count);
    if (token->ref_count == 0) {
80002f84:	fdc42783          	lw	a5,-36(s0)
80002f88:	00c7a783          	lw	a5,12(a5)
80002f8c:	0a079c63          	bnez	a5,80003044 <__done_using+0x108>
        if (token->value != NULL) {
80002f90:	fdc42783          	lw	a5,-36(s0)
80002f94:	0007a783          	lw	a5,0(a5)
80002f98:	02078c63          	beqz	a5,80002fd0 <__done_using+0x94>
            // Count frees to issue a warning if this is never freed.
            // Do not free the value field if it is garbage collected.
            __count_payload_allocations--;
80002f9c:	8c818793          	addi	a5,gp,-1848 # 8000daf8 <__count_payload_allocations>
80002fa0:	0007a783          	lw	a5,0(a5)
80002fa4:	fff78713          	addi	a4,a5,-1
80002fa8:	8c818793          	addi	a5,gp,-1848 # 8000daf8 <__count_payload_allocations>
80002fac:	00e7a023          	sw	a4,0(a5)
            if(OK_TO_FREE != token_only) {
                DEBUG_PRINT("__done_using: Freeing allocated memory for payload (token value): %p", token->value);
                free(token->value);
80002fb0:	fdc42783          	lw	a5,-36(s0)
80002fb4:	0007a783          	lw	a5,0(a5)
80002fb8:	00078513          	mv	a0,a5
80002fbc:	22c080ef          	jal	ra,8000b1e8 <free>
            }
            token->value = NULL;
80002fc0:	fdc42783          	lw	a5,-36(s0)
80002fc4:	0007a023          	sw	zero,0(a5)
            result = VALUE_FREED;
80002fc8:	00100793          	li	a5,1
80002fcc:	fef42623          	sw	a5,-20(s0)
        }
        // Tokens that are created at the start of execution and associated with
        // output ports or actions are pointed to by those actions and output
        // ports and should not be freed. They are expected to be reused instead.
        if (token->ok_to_free) {
80002fd0:	fdc42783          	lw	a5,-36(s0)
80002fd4:	0107a783          	lw	a5,16(a5)
80002fd8:	06078663          	beqz	a5,80003044 <__done_using+0x108>
            // Need to free the lf_token_t struct also.
            if (__token_recycling_bin_size < __TOKEN_RECYCLING_BIN_SIZE_LIMIT) {
80002fdc:	88c18793          	addi	a5,gp,-1908 # 8000dabc <__token_recycling_bin_size>
80002fe0:	0007a703          	lw	a4,0(a5)
80002fe4:	1ff00793          	li	a5,511
80002fe8:	02e7cc63          	blt	a5,a4,80003020 <__done_using+0xe4>
                // Recycle instead of freeing.
                token->next_free = __token_recycling_bin;
80002fec:	88818793          	addi	a5,gp,-1912 # 8000dab8 <__token_recycling_bin>
80002ff0:	0007a703          	lw	a4,0(a5)
80002ff4:	fdc42783          	lw	a5,-36(s0)
80002ff8:	00e7aa23          	sw	a4,20(a5)
                __token_recycling_bin = token;
80002ffc:	88818793          	addi	a5,gp,-1912 # 8000dab8 <__token_recycling_bin>
80003000:	fdc42703          	lw	a4,-36(s0)
80003004:	00e7a023          	sw	a4,0(a5)
                __token_recycling_bin_size++;
80003008:	88c18793          	addi	a5,gp,-1908 # 8000dabc <__token_recycling_bin_size>
8000300c:	0007a783          	lw	a5,0(a5)
80003010:	00178713          	addi	a4,a5,1
80003014:	88c18793          	addi	a5,gp,-1908 # 8000dabc <__token_recycling_bin_size>
80003018:	00e7a023          	sw	a4,0(a5)
8000301c:	00c0006f          	j	80003028 <__done_using+0xec>
            } else {
                // Recycling bin is full.
                free(token);
80003020:	fdc42503          	lw	a0,-36(s0)
80003024:	1c4080ef          	jal	ra,8000b1e8 <free>
            }
            __count_token_allocations--;
80003028:	8cc18793          	addi	a5,gp,-1844 # 8000dafc <__count_token_allocations>
8000302c:	0007a783          	lw	a5,0(a5)
80003030:	fff78713          	addi	a4,a5,-1
80003034:	8cc18793          	addi	a5,gp,-1844 # 8000dafc <__count_token_allocations>
80003038:	00e7a023          	sw	a4,0(a5)
            DEBUG_PRINT("__done_using: Freeing allocated memory for token: %p", token);
            result = TOKEN_FREED;
8000303c:	00200793          	li	a5,2
80003040:	fef42623          	sw	a5,-20(s0)
        }
    }
    return result;
80003044:	fec42783          	lw	a5,-20(s0)
}
80003048:	00078513          	mv	a0,a5
8000304c:	02c12083          	lw	ra,44(sp)
80003050:	02812403          	lw	s0,40(sp)
80003054:	03010113          	addi	sp,sp,48
80003058:	00008067          	ret

8000305c <__start_time_step>:
 * Use tables to reset is_present fields to false,
 * set intended_tag fields in federated execution
 * to the current_tag, and decrement reference
 * counts between time steps and at the end of execution.
 */
void __start_time_step() {
8000305c:	fe010113          	addi	sp,sp,-32
80003060:	00112e23          	sw	ra,28(sp)
80003064:	00812c23          	sw	s0,24(sp)
80003068:	02010413          	addi	s0,sp,32
    DEBUG_PRINT("--------- Start time step.");
    for(int i = 0; i < __tokens_with_ref_count_size; i++) {
8000306c:	fe042623          	sw	zero,-20(s0)
80003070:	0bc0006f          	j	8000312c <__start_time_step+0xd0>
        if (*(__tokens_with_ref_count[i].is_present)) {
80003074:	86418793          	addi	a5,gp,-1948 # 8000da94 <__tokens_with_ref_count>
80003078:	0007a683          	lw	a3,0(a5)
8000307c:	fec42703          	lw	a4,-20(s0)
80003080:	00070793          	mv	a5,a4
80003084:	00179793          	slli	a5,a5,0x1
80003088:	00e787b3          	add	a5,a5,a4
8000308c:	00279793          	slli	a5,a5,0x2
80003090:	00f687b3          	add	a5,a3,a5
80003094:	0047a783          	lw	a5,4(a5)
80003098:	0007c783          	lbu	a5,0(a5)
8000309c:	08078263          	beqz	a5,80003120 <__start_time_step+0xc4>
            if (__tokens_with_ref_count[i].reset_is_present) {
800030a0:	86418793          	addi	a5,gp,-1948 # 8000da94 <__tokens_with_ref_count>
800030a4:	0007a683          	lw	a3,0(a5)
800030a8:	fec42703          	lw	a4,-20(s0)
800030ac:	00070793          	mv	a5,a4
800030b0:	00179793          	slli	a5,a5,0x1
800030b4:	00e787b3          	add	a5,a5,a4
800030b8:	00279793          	slli	a5,a5,0x2
800030bc:	00f687b3          	add	a5,a3,a5
800030c0:	0087c783          	lbu	a5,8(a5)
800030c4:	02078663          	beqz	a5,800030f0 <__start_time_step+0x94>
                *(__tokens_with_ref_count[i].is_present) = false;
800030c8:	86418793          	addi	a5,gp,-1948 # 8000da94 <__tokens_with_ref_count>
800030cc:	0007a683          	lw	a3,0(a5)
800030d0:	fec42703          	lw	a4,-20(s0)
800030d4:	00070793          	mv	a5,a4
800030d8:	00179793          	slli	a5,a5,0x1
800030dc:	00e787b3          	add	a5,a5,a4
800030e0:	00279793          	slli	a5,a5,0x2
800030e4:	00f687b3          	add	a5,a3,a5
800030e8:	0047a783          	lw	a5,4(a5)
800030ec:	00078023          	sb	zero,0(a5)
            }
            __done_using(*(__tokens_with_ref_count[i].token));
800030f0:	86418793          	addi	a5,gp,-1948 # 8000da94 <__tokens_with_ref_count>
800030f4:	0007a683          	lw	a3,0(a5)
800030f8:	fec42703          	lw	a4,-20(s0)
800030fc:	00070793          	mv	a5,a4
80003100:	00179793          	slli	a5,a5,0x1
80003104:	00e787b3          	add	a5,a5,a4
80003108:	00279793          	slli	a5,a5,0x2
8000310c:	00f687b3          	add	a5,a3,a5
80003110:	0007a783          	lw	a5,0(a5)
80003114:	0007a783          	lw	a5,0(a5)
80003118:	00078513          	mv	a0,a5
8000311c:	e21ff0ef          	jal	ra,80002f3c <__done_using>
    for(int i = 0; i < __tokens_with_ref_count_size; i++) {
80003120:	fec42783          	lw	a5,-20(s0)
80003124:	00178793          	addi	a5,a5,1
80003128:	fef42623          	sw	a5,-20(s0)
8000312c:	86c18793          	addi	a5,gp,-1940 # 8000da9c <__tokens_with_ref_count_size>
80003130:	0007a783          	lw	a5,0(a5)
80003134:	fec42703          	lw	a4,-20(s0)
80003138:	f2f74ee3          	blt	a4,a5,80003074 <__start_time_step+0x18>
        }
    }
    // Also handle dynamically created tokens for mutable inputs.
    while (_lf_more_tokens_with_ref_count != NULL) {
8000313c:	0300006f          	j	8000316c <__start_time_step+0x110>
        lf_token_t* next = _lf_more_tokens_with_ref_count->next_free;
80003140:	86818793          	addi	a5,gp,-1944 # 8000da98 <_lf_more_tokens_with_ref_count>
80003144:	0007a783          	lw	a5,0(a5)
80003148:	0147a783          	lw	a5,20(a5)
8000314c:	fef42223          	sw	a5,-28(s0)
        __done_using(_lf_more_tokens_with_ref_count);
80003150:	86818793          	addi	a5,gp,-1944 # 8000da98 <_lf_more_tokens_with_ref_count>
80003154:	0007a783          	lw	a5,0(a5)
80003158:	00078513          	mv	a0,a5
8000315c:	de1ff0ef          	jal	ra,80002f3c <__done_using>
        _lf_more_tokens_with_ref_count = next;
80003160:	86818793          	addi	a5,gp,-1944 # 8000da98 <_lf_more_tokens_with_ref_count>
80003164:	fe442703          	lw	a4,-28(s0)
80003168:	00e7a023          	sw	a4,0(a5)
    while (_lf_more_tokens_with_ref_count != NULL) {
8000316c:	86818793          	addi	a5,gp,-1944 # 8000da98 <_lf_more_tokens_with_ref_count>
80003170:	0007a783          	lw	a5,0(a5)
80003174:	fc0796e3          	bnez	a5,80003140 <__start_time_step+0xe4>
    }
    for(int i = 0; i < __is_present_fields_size; i++) {
80003178:	fe042423          	sw	zero,-24(s0)
8000317c:	02c0006f          	j	800031a8 <__start_time_step+0x14c>
        *__is_present_fields[i] = false;
80003180:	85418793          	addi	a5,gp,-1964 # 8000da84 <__is_present_fields>
80003184:	0007a703          	lw	a4,0(a5)
80003188:	fe842783          	lw	a5,-24(s0)
8000318c:	00279793          	slli	a5,a5,0x2
80003190:	00f707b3          	add	a5,a4,a5
80003194:	0007a783          	lw	a5,0(a5)
80003198:	00078023          	sb	zero,0(a5)
    for(int i = 0; i < __is_present_fields_size; i++) {
8000319c:	fe842783          	lw	a5,-24(s0)
800031a0:	00178793          	addi	a5,a5,1
800031a4:	fef42423          	sw	a5,-24(s0)
800031a8:	85818793          	addi	a5,gp,-1960 # 8000da88 <__is_present_fields_size>
800031ac:	0007a783          	lw	a5,0(a5)
800031b0:	fe842703          	lw	a4,-24(s0)
800031b4:	fcf746e3          	blt	a4,a5,80003180 <__start_time_step+0x124>
        // FIXME: For now, an intended tag of (NEVER, 0)
        // indicates that it has never been set.
        *__intended_tag_fields[i] = (tag_t) {NEVER, 0};
#endif
    }
}
800031b8:	00000013          	nop
800031bc:	01c12083          	lw	ra,28(sp)
800031c0:	01812403          	lw	s0,24(sp)
800031c4:	02010113          	addi	sp,sp,32
800031c8:	00008067          	ret

800031cc <__create_token>:
 * to initialize actions with tokens.
 * @param element_size The size of an element carried in the payload or
 *  0 if there is no payload.
 * @return A new or recycled lf_token_t struct.
 */
lf_token_t* __create_token(size_t element_size) {
800031cc:	fd010113          	addi	sp,sp,-48
800031d0:	02112623          	sw	ra,44(sp)
800031d4:	02812423          	sw	s0,40(sp)
800031d8:	03010413          	addi	s0,sp,48
800031dc:	fca42e23          	sw	a0,-36(s0)
    lf_token_t* token;
    // Check the recycling bin.
    if (__token_recycling_bin != NULL) {
800031e0:	88818793          	addi	a5,gp,-1912 # 8000dab8 <__token_recycling_bin>
800031e4:	0007a783          	lw	a5,0(a5)
800031e8:	02078c63          	beqz	a5,80003220 <__create_token+0x54>
        token = __token_recycling_bin;
800031ec:	88818793          	addi	a5,gp,-1912 # 8000dab8 <__token_recycling_bin>
800031f0:	0007a783          	lw	a5,0(a5)
800031f4:	fef42623          	sw	a5,-20(s0)
        __token_recycling_bin = token->next_free;
800031f8:	fec42783          	lw	a5,-20(s0)
800031fc:	0147a703          	lw	a4,20(a5)
80003200:	88818793          	addi	a5,gp,-1912 # 8000dab8 <__token_recycling_bin>
80003204:	00e7a023          	sw	a4,0(a5)
        __token_recycling_bin_size--;
80003208:	88c18793          	addi	a5,gp,-1908 # 8000dabc <__token_recycling_bin_size>
8000320c:	0007a783          	lw	a5,0(a5)
80003210:	fff78713          	addi	a4,a5,-1
80003214:	88c18793          	addi	a5,gp,-1908 # 8000dabc <__token_recycling_bin_size>
80003218:	00e7a023          	sw	a4,0(a5)
8000321c:	0140006f          	j	80003230 <__create_token+0x64>
        DEBUG_PRINT("__create_token: Retrieved token from the recycling bin: %p", token);
    } else {
        token = (lf_token_t*)malloc(sizeof(lf_token_t));
80003220:	01800513          	li	a0,24
80003224:	7b9070ef          	jal	ra,8000b1dc <malloc>
80003228:	00050793          	mv	a5,a0
8000322c:	fef42623          	sw	a5,-20(s0)
        DEBUG_PRINT("__create_token: Allocated memory for token: %p", token);
    }
    token->value = NULL;
80003230:	fec42783          	lw	a5,-20(s0)
80003234:	0007a023          	sw	zero,0(a5)
    token->length = 0;
80003238:	fec42783          	lw	a5,-20(s0)
8000323c:	0007a423          	sw	zero,8(a5)
    token->element_size = element_size;
80003240:	fec42783          	lw	a5,-20(s0)
80003244:	fdc42703          	lw	a4,-36(s0)
80003248:	00e7a223          	sw	a4,4(a5)
    token->ref_count = 0;
8000324c:	fec42783          	lw	a5,-20(s0)
80003250:	0007a623          	sw	zero,12(a5)
    token->ok_to_free = no;
80003254:	fec42783          	lw	a5,-20(s0)
80003258:	0007a823          	sw	zero,16(a5)
    token->next_free = NULL;
8000325c:	fec42783          	lw	a5,-20(s0)
80003260:	0007aa23          	sw	zero,20(a5)
    return token;
80003264:	fec42783          	lw	a5,-20(s0)
}
80003268:	00078513          	mv	a0,a5
8000326c:	02c12083          	lw	ra,44(sp)
80003270:	02812403          	lw	s0,40(sp)
80003274:	03010113          	addi	sp,sp,48
80003278:	00008067          	ret

8000327c <create_token>:
 * The value pointer will be NULL and the length will be 0.
 * @param element_size The size of an element carried in the payload or
 *  0 if there is no payload.
 * @return A new or recycled lf_token_t struct.
 */
lf_token_t* create_token(size_t element_size) {
8000327c:	fd010113          	addi	sp,sp,-48
80003280:	02112623          	sw	ra,44(sp)
80003284:	02812423          	sw	s0,40(sp)
80003288:	03010413          	addi	s0,sp,48
8000328c:	fca42e23          	sw	a0,-36(s0)
    DEBUG_PRINT("create_token: element_size: %zu", element_size);
    __count_token_allocations++;
80003290:	8cc18793          	addi	a5,gp,-1844 # 8000dafc <__count_token_allocations>
80003294:	0007a783          	lw	a5,0(a5)
80003298:	00178713          	addi	a4,a5,1
8000329c:	8cc18793          	addi	a5,gp,-1844 # 8000dafc <__count_token_allocations>
800032a0:	00e7a023          	sw	a4,0(a5)
    lf_token_t* result = __create_token(element_size);
800032a4:	fdc42503          	lw	a0,-36(s0)
800032a8:	f25ff0ef          	jal	ra,800031cc <__create_token>
800032ac:	fea42623          	sw	a0,-20(s0)
    result->ok_to_free = OK_TO_FREE;
800032b0:	fec42783          	lw	a5,-20(s0)
800032b4:	00100713          	li	a4,1
800032b8:	00e7a823          	sw	a4,16(a5)
    return result;
800032bc:	fec42783          	lw	a5,-20(s0)
}
800032c0:	00078513          	mv	a0,a5
800032c4:	02c12083          	lw	ra,44(sp)
800032c8:	02812403          	lw	s0,40(sp)
800032cc:	03010113          	addi	sp,sp,48
800032d0:	00008067          	ret

800032d4 <__initialize_token_with_value>:
 * @param value The value of the array.
 * @param length The length of the array, or 1 if it is not an array.
 * @return Either the specified token or a new one, in each case with a value
 *  field pointing to newly allocated memory.
 */
lf_token_t* __initialize_token_with_value(lf_token_t* token, void* value, int length) {
800032d4:	fd010113          	addi	sp,sp,-48
800032d8:	02112623          	sw	ra,44(sp)
800032dc:	02812423          	sw	s0,40(sp)
800032e0:	03010413          	addi	s0,sp,48
800032e4:	fca42e23          	sw	a0,-36(s0)
800032e8:	fcb42c23          	sw	a1,-40(s0)
800032ec:	fcc42a23          	sw	a2,-44(s0)
    // assert(token != NULL);

    // If necessary, allocate memory for a new lf_token_t struct.
    // This assumes that the lf_token_t* in the self struct has been initialized to NULL.
    lf_token_t* result = token;
800032f0:	fdc42783          	lw	a5,-36(s0)
800032f4:	fef42623          	sw	a5,-20(s0)
    DEBUG_PRINT("Initializing a token %p with ref_count %d.", token, token->ref_count);
    if (token == NULL || token->ref_count > 0) {
800032f8:	fdc42783          	lw	a5,-36(s0)
800032fc:	00078863          	beqz	a5,8000330c <__initialize_token_with_value+0x38>
80003300:	fdc42783          	lw	a5,-36(s0)
80003304:	00c7a783          	lw	a5,12(a5)
80003308:	00f05c63          	blez	a5,80003320 <__initialize_token_with_value+0x4c>
        // The specified token is not available.
        result = create_token(token->element_size);
8000330c:	fdc42783          	lw	a5,-36(s0)
80003310:	0047a783          	lw	a5,4(a5)
80003314:	00078513          	mv	a0,a5
80003318:	f65ff0ef          	jal	ra,8000327c <create_token>
8000331c:	fea42623          	sw	a0,-20(s0)
    }
    result->value = value;
80003320:	fec42783          	lw	a5,-20(s0)
80003324:	fd842703          	lw	a4,-40(s0)
80003328:	00e7a023          	sw	a4,0(a5)
    result->length = length;
8000332c:	fec42783          	lw	a5,-20(s0)
80003330:	fd442703          	lw	a4,-44(s0)
80003334:	00e7a423          	sw	a4,8(a5)
    return result;
80003338:	fec42783          	lw	a5,-20(s0)
}
8000333c:	00078513          	mv	a0,a5
80003340:	02c12083          	lw	ra,44(sp)
80003344:	02812403          	lw	s0,40(sp)
80003348:	03010113          	addi	sp,sp,48
8000334c:	00008067          	ret

80003350 <__initialize_token>:
 * @param token The token to populate, if it is available (must not be NULL).
 * @param length The length of the array, or 1 if it is not an array.
 * @return Either the specified token or a new one, in each case with a value
 *  field pointing to newly allocated memory.
 */
lf_token_t* __initialize_token(lf_token_t* token, int length) {
80003350:	fd010113          	addi	sp,sp,-48
80003354:	02112623          	sw	ra,44(sp)
80003358:	02812423          	sw	s0,40(sp)
8000335c:	03010413          	addi	s0,sp,48
80003360:	fca42e23          	sw	a0,-36(s0)
80003364:	fcb42c23          	sw	a1,-40(s0)
    // assert(token != NULL);

    // Allocate memory for storing the array.
    void* value = malloc(token->element_size * length);
80003368:	fdc42783          	lw	a5,-36(s0)
8000336c:	0047a703          	lw	a4,4(a5)
80003370:	fd842783          	lw	a5,-40(s0)
80003374:	02f707b3          	mul	a5,a4,a5
80003378:	00078513          	mv	a0,a5
8000337c:	661070ef          	jal	ra,8000b1dc <malloc>
80003380:	00050793          	mv	a5,a0
80003384:	fef42623          	sw	a5,-20(s0)
    // Count allocations to issue a warning if this is never freed.
    __count_payload_allocations++;
80003388:	8c818793          	addi	a5,gp,-1848 # 8000daf8 <__count_payload_allocations>
8000338c:	0007a783          	lw	a5,0(a5)
80003390:	00178713          	addi	a4,a5,1
80003394:	8c818793          	addi	a5,gp,-1848 # 8000daf8 <__count_payload_allocations>
80003398:	00e7a023          	sw	a4,0(a5)
    return __initialize_token_with_value(token, value, length);
8000339c:	fd842603          	lw	a2,-40(s0)
800033a0:	fec42583          	lw	a1,-20(s0)
800033a4:	fdc42503          	lw	a0,-36(s0)
800033a8:	f2dff0ef          	jal	ra,800032d4 <__initialize_token_with_value>
800033ac:	00050793          	mv	a5,a0
}
800033b0:	00078513          	mv	a0,a5
800033b4:	02c12083          	lw	ra,44(sp)
800033b8:	02812403          	lw	s0,40(sp)
800033bc:	03010113          	addi	sp,sp,48
800033c0:	00008067          	ret

800033c4 <_lf_is_tag_after_stop_tag>:
/**
 * A helper function that returns true if the provided tag is after stop tag.
 * 
 * @param tag The tag to check against stop tag
 */
bool _lf_is_tag_after_stop_tag(tag_t tag) {
800033c4:	fd010113          	addi	sp,sp,-48
800033c8:	02112623          	sw	ra,44(sp)
800033cc:	02812423          	sw	s0,40(sp)
800033d0:	03010413          	addi	s0,sp,48
800033d4:	00050093          	mv	ra,a0
    if (compare_tags(tag, stop_tag) > 0) {
800033d8:	0000a603          	lw	a2,0(ra)
800033dc:	0040a683          	lw	a3,4(ra)
800033e0:	0080a703          	lw	a4,8(ra)
800033e4:	00c0a783          	lw	a5,12(ra)
800033e8:	fec42023          	sw	a2,-32(s0)
800033ec:	fed42223          	sw	a3,-28(s0)
800033f0:	fee42423          	sw	a4,-24(s0)
800033f4:	fef42623          	sw	a5,-20(s0)
800033f8:	0000a797          	auipc	a5,0xa
800033fc:	c8878793          	addi	a5,a5,-888 # 8000d080 <stop_tag>
80003400:	0007a603          	lw	a2,0(a5)
80003404:	0047a683          	lw	a3,4(a5)
80003408:	0087a703          	lw	a4,8(a5)
8000340c:	00c7a783          	lw	a5,12(a5)
80003410:	fcc42823          	sw	a2,-48(s0)
80003414:	fcd42a23          	sw	a3,-44(s0)
80003418:	fce42c23          	sw	a4,-40(s0)
8000341c:	fcf42e23          	sw	a5,-36(s0)
80003420:	fd040713          	addi	a4,s0,-48
80003424:	fe040793          	addi	a5,s0,-32
80003428:	00070593          	mv	a1,a4
8000342c:	00078513          	mv	a0,a5
80003430:	a34fe0ef          	jal	ra,80001664 <compare_tags>
80003434:	00050793          	mv	a5,a0
80003438:	00f05663          	blez	a5,80003444 <_lf_is_tag_after_stop_tag+0x80>
        return true;
8000343c:	00100793          	li	a5,1
80003440:	0080006f          	j	80003448 <_lf_is_tag_after_stop_tag+0x84>
    }
    return false;
80003444:	00000793          	li	a5,0
}
80003448:	00078513          	mv	a0,a5
8000344c:	02c12083          	lw	ra,44(sp)
80003450:	02812403          	lw	s0,40(sp)
80003454:	03010113          	addi	sp,sp,48
80003458:	00008067          	ret

8000345c <__pop_events>:
/**
 * Pop all events from event_q with timestamp equal to current_tag.time, extract all
 * the reactions triggered by these events, and stick them into the reaction
 * queue.
 */
void __pop_events() {
8000345c:	fe010113          	addi	sp,sp,-32
80003460:	00112e23          	sw	ra,28(sp)
80003464:	00812c23          	sw	s0,24(sp)
80003468:	00912a23          	sw	s1,20(sp)
8000346c:	02010413          	addi	s0,sp,32
    event_t* event = (event_t*)pqueue_peek(event_q);
80003470:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
80003474:	0007a783          	lw	a5,0(a5)
80003478:	00078513          	mv	a0,a5
8000347c:	a9cff0ef          	jal	ra,80002718 <pqueue_peek>
80003480:	fea42623          	sw	a0,-20(s0)
    while(event != NULL && event->time == current_tag.time) {
80003484:	23c0006f          	j	800036c0 <__pop_events+0x264>
        event = (event_t*)pqueue_pop(event_q);
80003488:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
8000348c:	0007a783          	lw	a5,0(a5)
80003490:	00078513          	mv	a0,a5
80003494:	9dcff0ef          	jal	ra,80002670 <pqueue_pop>
80003498:	fea42623          	sw	a0,-20(s0)
        
        if (event->is_dummy) {
8000349c:	fec42783          	lw	a5,-20(s0)
800034a0:	0147c783          	lbu	a5,20(a5)
800034a4:	02078663          	beqz	a5,800034d0 <__pop_events+0x74>
            pqueue_insert(next_q, event->next);
800034a8:	88418793          	addi	a5,gp,-1916 # 8000dab4 <next_q>
800034ac:	0007a703          	lw	a4,0(a5)
800034b0:	fec42783          	lw	a5,-20(s0)
800034b4:	0187a783          	lw	a5,24(a5)
800034b8:	00078593          	mv	a1,a5
800034bc:	00070513          	mv	a0,a4
800034c0:	f91fe0ef          	jal	ra,80002450 <pqueue_insert>
            _lf_recycle_event(event);
800034c4:	fec42503          	lw	a0,-20(s0)
800034c8:	41c000ef          	jal	ra,800038e4 <_lf_recycle_event>
            continue;
800034cc:	1f40006f          	j	800036c0 <__pop_events+0x264>
        }

        lf_token_t *token = event->token;
800034d0:	fec42783          	lw	a5,-20(s0)
800034d4:	0107a783          	lw	a5,16(a5)
800034d8:	fef42223          	sw	a5,-28(s0)

        // Put the corresponding reactions onto the reaction queue.
        for (int i = 0; i < event->trigger->number_of_reactions; i++) {
800034dc:	fe042423          	sw	zero,-24(s0)
800034e0:	0600006f          	j	80003540 <__pop_events+0xe4>
            DEBUG_PRINT("Pushed onto reaction_q: %p", event->trigger->reactions[i]);
            reaction_t *reaction = event->trigger->reactions[i];
800034e4:	fec42783          	lw	a5,-20(s0)
800034e8:	0087a783          	lw	a5,8(a5)
800034ec:	0007a703          	lw	a4,0(a5)
800034f0:	fe842783          	lw	a5,-24(s0)
800034f4:	00279793          	slli	a5,a5,0x2
800034f8:	00f707b3          	add	a5,a4,a5
800034fc:	0007a783          	lw	a5,0(a5)
80003500:	fef42023          	sw	a5,-32(s0)
            // Do not enqueue this reaction twice.
            if (pqueue_find_equal_same_priority(reaction_q, reaction) == NULL) {
80003504:	87c18793          	addi	a5,gp,-1924 # 8000daac <reaction_q>
80003508:	0007a783          	lw	a5,0(a5)
8000350c:	fe042583          	lw	a1,-32(s0)
80003510:	00078513          	mv	a0,a5
80003514:	eadfe0ef          	jal	ra,800023c0 <pqueue_find_equal_same_priority>
80003518:	00050793          	mv	a5,a0
8000351c:	00079c63          	bnez	a5,80003534 <__pop_events+0xd8>
                                    current_tag.time - start_time, current_tag.microstep);
                    }
                }
#endif
                DEBUG_PRINT("Enqueing reaction %p.", reaction);
                pqueue_insert(reaction_q, reaction);
80003520:	87c18793          	addi	a5,gp,-1924 # 8000daac <reaction_q>
80003524:	0007a783          	lw	a5,0(a5)
80003528:	fe042583          	lw	a1,-32(s0)
8000352c:	00078513          	mv	a0,a5
80003530:	f21fe0ef          	jal	ra,80002450 <pqueue_insert>
        for (int i = 0; i < event->trigger->number_of_reactions; i++) {
80003534:	fe842783          	lw	a5,-24(s0)
80003538:	00178793          	addi	a5,a5,1
8000353c:	fef42423          	sw	a5,-24(s0)
80003540:	fec42783          	lw	a5,-20(s0)
80003544:	0087a783          	lw	a5,8(a5)
80003548:	0047a783          	lw	a5,4(a5)
8000354c:	fe842703          	lw	a4,-24(s0)
80003550:	f8f74ae3          	blt	a4,a5,800034e4 <__pop_events+0x88>
            }
        }

        // If the trigger is a periodic timer, create a new event for its next execution.
        if (event->trigger->is_timer && event->trigger->period > 0LL) {
80003554:	fec42783          	lw	a5,-20(s0)
80003558:	0087a783          	lw	a5,8(a5)
8000355c:	0087c783          	lbu	a5,8(a5)
80003560:	08078263          	beqz	a5,800035e4 <__pop_events+0x188>
80003564:	fec42783          	lw	a5,-20(s0)
80003568:	0087a783          	lw	a5,8(a5)
8000356c:	01c7a803          	lw	a6,28(a5)
80003570:	0187a783          	lw	a5,24(a5)
80003574:	00080713          	mv	a4,a6
80003578:	00e04863          	bgtz	a4,80003588 <__pop_events+0x12c>
8000357c:	00080713          	mv	a4,a6
80003580:	06071263          	bnez	a4,800035e4 <__pop_events+0x188>
80003584:	06078063          	beqz	a5,800035e4 <__pop_events+0x188>
            // Reschedule the trigger.
            // Note that the delay here may be negative because the __schedule
            // function will add the trigger->offset, which we don't want at this point.
            // NULL argument indicates that there is no value.
            __schedule(event->trigger,
80003588:	fec42783          	lw	a5,-20(s0)
8000358c:	0087a883          	lw	a7,8(a5)
                    event->trigger->period - event->trigger->offset, NULL);
80003590:	fec42783          	lw	a5,-20(s0)
80003594:	0087a783          	lw	a5,8(a5)
80003598:	01c7a803          	lw	a6,28(a5)
8000359c:	0187a783          	lw	a5,24(a5)
800035a0:	fec42703          	lw	a4,-20(s0)
800035a4:	00872703          	lw	a4,8(a4)
800035a8:	01072583          	lw	a1,16(a4)
800035ac:	01472603          	lw	a2,20(a4)
            __schedule(event->trigger,
800035b0:	40b786b3          	sub	a3,a5,a1
800035b4:	00068513          	mv	a0,a3
800035b8:	00a7b533          	sltu	a0,a5,a0
800035bc:	40c80733          	sub	a4,a6,a2
800035c0:	40a707b3          	sub	a5,a4,a0
800035c4:	00078713          	mv	a4,a5
800035c8:	00068793          	mv	a5,a3
800035cc:	00070813          	mv	a6,a4
800035d0:	00000693          	li	a3,0
800035d4:	00078593          	mv	a1,a5
800035d8:	00080613          	mv	a2,a6
800035dc:	00088513          	mv	a0,a7
800035e0:	1a9000ef          	jal	ra,80003f88 <__schedule>
        }

        // Copy the token pointer into the trigger struct so that the
        // reactions can access it. This overwrites the previous template token,
        // for which we decrement the reference count.
        if (event->trigger->token != event->token
800035e4:	fec42783          	lw	a5,-20(s0)
800035e8:	0087a783          	lw	a5,8(a5)
800035ec:	0207a703          	lw	a4,32(a5)
800035f0:	fec42783          	lw	a5,-20(s0)
800035f4:	0107a783          	lw	a5,16(a5)
800035f8:	04f70a63          	beq	a4,a5,8000364c <__pop_events+0x1f0>
                && event->trigger->token != NULL) {
800035fc:	fec42783          	lw	a5,-20(s0)
80003600:	0087a783          	lw	a5,8(a5)
80003604:	0207a783          	lw	a5,32(a5)
80003608:	04078263          	beqz	a5,8000364c <__pop_events+0x1f0>
            // Mark the previous one ok_to_free so we don't get a memory leak.
            event->trigger->token->ok_to_free = OK_TO_FREE;
8000360c:	fec42783          	lw	a5,-20(s0)
80003610:	0087a783          	lw	a5,8(a5)
80003614:	0207a783          	lw	a5,32(a5)
80003618:	00100713          	li	a4,1
8000361c:	00e7a823          	sw	a4,16(a5)
            // Free the token if its reference count is zero. Since __done_using
            // decrements the reference count, first increment it here.
            event->trigger->token->ref_count++;
80003620:	fec42783          	lw	a5,-20(s0)
80003624:	0087a783          	lw	a5,8(a5)
80003628:	0207a783          	lw	a5,32(a5)
8000362c:	00c7a703          	lw	a4,12(a5)
80003630:	00170713          	addi	a4,a4,1
80003634:	00e7a623          	sw	a4,12(a5)
            __done_using(event->trigger->token);
80003638:	fec42783          	lw	a5,-20(s0)
8000363c:	0087a783          	lw	a5,8(a5)
80003640:	0207a783          	lw	a5,32(a5)
80003644:	00078513          	mv	a0,a5
80003648:	8f5ff0ef          	jal	ra,80002f3c <__done_using>
        }
        event->trigger->token = token;
8000364c:	fec42783          	lw	a5,-20(s0)
80003650:	0087a783          	lw	a5,8(a5)
80003654:	fe442703          	lw	a4,-28(s0)
80003658:	02e7a023          	sw	a4,32(a5)
        // Prevent this token from being freed. It is the new template.
        // This might be null if there are no reactions to the action.
        if (token != NULL)
8000365c:	fe442783          	lw	a5,-28(s0)
80003660:	00078663          	beqz	a5,8000366c <__pop_events+0x210>
            token->ok_to_free = no;
80003664:	fe442783          	lw	a5,-28(s0)
80003668:	0007a823          	sw	zero,16(a5)

        // Mark the trigger present.
        event->trigger->is_present = true;
8000366c:	fec42783          	lw	a5,-20(s0)
80003670:	0087a783          	lw	a5,8(a5)
80003674:	00100713          	li	a4,1
80003678:	02e78a23          	sb	a4,52(a5)
        
        // If this event points to a next event, insert it into the next queue.
        if (event->next != NULL) {
8000367c:	fec42783          	lw	a5,-20(s0)
80003680:	0187a783          	lw	a5,24(a5)
80003684:	02078063          	beqz	a5,800036a4 <__pop_events+0x248>
            // Insert the next event into the next queue.
            pqueue_insert(next_q, event->next);
80003688:	88418793          	addi	a5,gp,-1916 # 8000dab4 <next_q>
8000368c:	0007a703          	lw	a4,0(a5)
80003690:	fec42783          	lw	a5,-20(s0)
80003694:	0187a783          	lw	a5,24(a5)
80003698:	00078593          	mv	a1,a5
8000369c:	00070513          	mv	a0,a4
800036a0:	db1fe0ef          	jal	ra,80002450 <pqueue_insert>
        }

        _lf_recycle_event(event);
800036a4:	fec42503          	lw	a0,-20(s0)
800036a8:	23c000ef          	jal	ra,800038e4 <_lf_recycle_event>
        
        // Peek at the next event in the event queue.
        event = (event_t*)pqueue_peek(event_q);
800036ac:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
800036b0:	0007a783          	lw	a5,0(a5)
800036b4:	00078513          	mv	a0,a5
800036b8:	860ff0ef          	jal	ra,80002718 <pqueue_peek>
800036bc:	fea42623          	sw	a0,-20(s0)
    while(event != NULL && event->time == current_tag.time) {
800036c0:	fec42783          	lw	a5,-20(s0)
800036c4:	04078e63          	beqz	a5,80003720 <__pop_events+0x2c4>
800036c8:	fec42783          	lw	a5,-20(s0)
800036cc:	0007a683          	lw	a3,0(a5)
800036d0:	0047a703          	lw	a4,4(a5)
800036d4:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
800036d8:	0047a803          	lw	a6,4(a5)
800036dc:	0007a783          	lw	a5,0(a5)
800036e0:	00068593          	mv	a1,a3
800036e4:	00078613          	mv	a2,a5
800036e8:	02c59c63          	bne	a1,a2,80003720 <__pop_events+0x2c4>
800036ec:	00080793          	mv	a5,a6
800036f0:	d8f70ce3          	beq	a4,a5,80003488 <__pop_events+0x2c>
    };

    // After populating the reaction queue, see if there are things on the
    // next queue to put back into the event queue.
    while(pqueue_peek(next_q) != NULL) {
800036f4:	02c0006f          	j	80003720 <__pop_events+0x2c4>
        pqueue_insert(event_q, pqueue_pop(next_q));
800036f8:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
800036fc:	0007a483          	lw	s1,0(a5)
80003700:	88418793          	addi	a5,gp,-1916 # 8000dab4 <next_q>
80003704:	0007a783          	lw	a5,0(a5)
80003708:	00078513          	mv	a0,a5
8000370c:	f65fe0ef          	jal	ra,80002670 <pqueue_pop>
80003710:	00050793          	mv	a5,a0
80003714:	00078593          	mv	a1,a5
80003718:	00048513          	mv	a0,s1
8000371c:	d35fe0ef          	jal	ra,80002450 <pqueue_insert>
    while(pqueue_peek(next_q) != NULL) {
80003720:	88418793          	addi	a5,gp,-1916 # 8000dab4 <next_q>
80003724:	0007a783          	lw	a5,0(a5)
80003728:	00078513          	mv	a0,a5
8000372c:	fedfe0ef          	jal	ra,80002718 <pqueue_peek>
80003730:	00050793          	mv	a5,a0
80003734:	fc0792e3          	bnez	a5,800036f8 <__pop_events+0x29c>
    }
}
80003738:	00000013          	nop
8000373c:	01c12083          	lw	ra,28(sp)
80003740:	01812403          	lw	s0,24(sp)
80003744:	01412483          	lw	s1,20(sp)
80003748:	02010113          	addi	sp,sp,32
8000374c:	00008067          	ret

80003750 <_lf_initialize_timer>:
 * Initialize the given timer.
 * If this timer has a zero offset, enqueue the reactions it triggers.
 * If this timer is to trigger reactions at a _future_ tag as well, 
 * schedule it accordingly. 
 */
void _lf_initialize_timer(trigger_t* timer) {
80003750:	fd010113          	addi	sp,sp,-48
80003754:	02112623          	sw	ra,44(sp)
80003758:	02812423          	sw	s0,40(sp)
8000375c:	03010413          	addi	s0,sp,48
80003760:	fca42e23          	sw	a0,-36(s0)
    interval_t delay = 0;
80003764:	00000793          	li	a5,0
80003768:	00000813          	li	a6,0
8000376c:	fef42423          	sw	a5,-24(s0)
80003770:	ff042623          	sw	a6,-20(s0)
    if (timer->offset == 0) {
80003774:	fdc42783          	lw	a5,-36(s0)
80003778:	0107a683          	lw	a3,16(a5)
8000377c:	0147a703          	lw	a4,20(a5)
80003780:	00068793          	mv	a5,a3
80003784:	00e7e7b3          	or	a5,a5,a4
80003788:	06079c63          	bnez	a5,80003800 <_lf_initialize_timer+0xb0>
        for (int i = 0; i < timer->number_of_reactions; i++) {
8000378c:	fe042223          	sw	zero,-28(s0)
80003790:	0300006f          	j	800037c0 <_lf_initialize_timer+0x70>
            _lf_enqueue_reaction(timer->reactions[i]);
80003794:	fdc42783          	lw	a5,-36(s0)
80003798:	0007a703          	lw	a4,0(a5)
8000379c:	fe442783          	lw	a5,-28(s0)
800037a0:	00279793          	slli	a5,a5,0x2
800037a4:	00f707b3          	add	a5,a4,a5
800037a8:	0007a783          	lw	a5,0(a5)
800037ac:	00078513          	mv	a0,a5
800037b0:	730020ef          	jal	ra,80005ee0 <_lf_enqueue_reaction>
        for (int i = 0; i < timer->number_of_reactions; i++) {
800037b4:	fe442783          	lw	a5,-28(s0)
800037b8:	00178793          	addi	a5,a5,1
800037bc:	fef42223          	sw	a5,-28(s0)
800037c0:	fdc42783          	lw	a5,-36(s0)
800037c4:	0047a783          	lw	a5,4(a5)
800037c8:	fe442703          	lw	a4,-28(s0)
800037cc:	fcf744e3          	blt	a4,a5,80003794 <_lf_initialize_timer+0x44>
            tracepoint_schedule(timer, 0LL); // Trace even though schedule is not called.
        }
        if (timer->period == 0) {
800037d0:	fdc42783          	lw	a5,-36(s0)
800037d4:	0187a683          	lw	a3,24(a5)
800037d8:	01c7a703          	lw	a4,28(a5)
800037dc:	00068793          	mv	a5,a3
800037e0:	00e7e7b3          	or	a5,a5,a4
800037e4:	08078a63          	beqz	a5,80003878 <_lf_initialize_timer+0x128>
            return;
        } else {
            // Schedule at t + period.
            delay = timer->period;
800037e8:	fdc42783          	lw	a5,-36(s0)
800037ec:	01c7a803          	lw	a6,28(a5)
800037f0:	0187a783          	lw	a5,24(a5)
800037f4:	fef42423          	sw	a5,-24(s0)
800037f8:	ff042623          	sw	a6,-20(s0)
800037fc:	0180006f          	j	80003814 <_lf_initialize_timer+0xc4>
        }
    } else {
        // Schedule at t + offset.
        delay = timer->offset;
80003800:	fdc42783          	lw	a5,-36(s0)
80003804:	0147a803          	lw	a6,20(a5)
80003808:	0107a783          	lw	a5,16(a5)
8000380c:	fef42423          	sw	a5,-24(s0)
80003810:	ff042623          	sw	a6,-20(s0)
    }

    // Get an event_t struct to put on the event queue.
    // Recycle event_t structs, if possible.    
    event_t* e = _lf_get_new_event();
80003814:	078000ef          	jal	ra,8000388c <_lf_get_new_event>
80003818:	fea42023          	sw	a0,-32(s0)
    e->trigger = timer;
8000381c:	fe042783          	lw	a5,-32(s0)
80003820:	fdc42703          	lw	a4,-36(s0)
80003824:	00e7a423          	sw	a4,8(a5)
    e->time = get_logical_time() + delay;
80003828:	868fe0ef          	jal	ra,80001890 <get_logical_time>
8000382c:	00050693          	mv	a3,a0
80003830:	00058713          	mv	a4,a1
80003834:	fe842583          	lw	a1,-24(s0)
80003838:	fec42603          	lw	a2,-20(s0)
8000383c:	00b687b3          	add	a5,a3,a1
80003840:	00078513          	mv	a0,a5
80003844:	00d53533          	sltu	a0,a0,a3
80003848:	00c70833          	add	a6,a4,a2
8000384c:	01050733          	add	a4,a0,a6
80003850:	00070813          	mv	a6,a4
80003854:	fe042703          	lw	a4,-32(s0)
80003858:	00f72023          	sw	a5,0(a4)
8000385c:	01072223          	sw	a6,4(a4)
    // NOTE: No lock is being held. Assuming this only happens at startup.
    pqueue_insert(event_q, e);
80003860:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
80003864:	0007a783          	lw	a5,0(a5)
80003868:	fe042583          	lw	a1,-32(s0)
8000386c:	00078513          	mv	a0,a5
80003870:	be1fe0ef          	jal	ra,80002450 <pqueue_insert>
80003874:	0080006f          	j	8000387c <_lf_initialize_timer+0x12c>
            return;
80003878:	00000013          	nop
    tracepoint_schedule(timer, delay); // Trace even though schedule is not called.
}
8000387c:	02c12083          	lw	ra,44(sp)
80003880:	02812403          	lw	s0,40(sp)
80003884:	03010113          	addi	sp,sp,48
80003888:	00008067          	ret

8000388c <_lf_get_new_event>:

/**
 * Get a new event. If there is a recycled event available, use that.
 * If not, allocate a new one. In either case, all fields will be zero'ed out.
 */
event_t* _lf_get_new_event() {
8000388c:	fe010113          	addi	sp,sp,-32
80003890:	00112e23          	sw	ra,28(sp)
80003894:	00812c23          	sw	s0,24(sp)
80003898:	02010413          	addi	s0,sp,32
    // Recycle event_t structs, if possible.    
    event_t* e = (event_t*)pqueue_pop(recycle_q);
8000389c:	88018793          	addi	a5,gp,-1920 # 8000dab0 <recycle_q>
800038a0:	0007a783          	lw	a5,0(a5)
800038a4:	00078513          	mv	a0,a5
800038a8:	dc9fe0ef          	jal	ra,80002670 <pqueue_pop>
800038ac:	fea42623          	sw	a0,-20(s0)
    if (e == NULL) {
800038b0:	fec42783          	lw	a5,-20(s0)
800038b4:	00079c63          	bnez	a5,800038cc <_lf_get_new_event+0x40>
        e = (event_t*)calloc(1, sizeof(struct event_t));
800038b8:	02000593          	li	a1,32
800038bc:	00100513          	li	a0,1
800038c0:	071070ef          	jal	ra,8000b130 <calloc>
800038c4:	00050793          	mv	a5,a0
800038c8:	fef42623          	sw	a5,-20(s0)
    }
    return e;
800038cc:	fec42783          	lw	a5,-20(s0)
}
800038d0:	00078513          	mv	a0,a5
800038d4:	01c12083          	lw	ra,28(sp)
800038d8:	01812403          	lw	s0,24(sp)
800038dc:	02010113          	addi	sp,sp,32
800038e0:	00008067          	ret

800038e4 <_lf_recycle_event>:

/**
 * Recycle the given event.
 * Zero it out and pushed it onto the recycle queue.
 */
void _lf_recycle_event(event_t* e) {
800038e4:	fe010113          	addi	sp,sp,-32
800038e8:	00112e23          	sw	ra,28(sp)
800038ec:	00812c23          	sw	s0,24(sp)
800038f0:	02010413          	addi	s0,sp,32
800038f4:	fea42623          	sw	a0,-20(s0)
    e->time = 0LL;
800038f8:	fec42783          	lw	a5,-20(s0)
800038fc:	00000693          	li	a3,0
80003900:	00000713          	li	a4,0
80003904:	00d7a023          	sw	a3,0(a5)
80003908:	00e7a223          	sw	a4,4(a5)
    e->trigger = NULL;
8000390c:	fec42783          	lw	a5,-20(s0)
80003910:	0007a423          	sw	zero,8(a5)
    e->pos = 0;
80003914:	fec42783          	lw	a5,-20(s0)
80003918:	0007a623          	sw	zero,12(a5)
    e->token = NULL;
8000391c:	fec42783          	lw	a5,-20(s0)
80003920:	0007a823          	sw	zero,16(a5)
    e->is_dummy = false;
80003924:	fec42783          	lw	a5,-20(s0)
80003928:	00078a23          	sb	zero,20(a5)
#ifdef _LF_COORD_DECENTRALIZED
    e->intended_tag = (tag_t) { .time = 0LL, .microstep = 0u};
#endif
    e->next = NULL;
8000392c:	fec42783          	lw	a5,-20(s0)
80003930:	0007ac23          	sw	zero,24(a5)
    pqueue_insert(recycle_q, e);
80003934:	88018793          	addi	a5,gp,-1920 # 8000dab0 <recycle_q>
80003938:	0007a783          	lw	a5,0(a5)
8000393c:	fec42583          	lw	a1,-20(s0)
80003940:	00078513          	mv	a0,a5
80003944:	b0dfe0ef          	jal	ra,80002450 <pqueue_insert>
}
80003948:	00000013          	nop
8000394c:	01c12083          	lw	ra,28(sp)
80003950:	01812403          	lw	s0,24(sp)
80003954:	02010113          	addi	sp,sp,32
80003958:	00008067          	ret

8000395c <_lf_create_dummy_events>:
 * @param time The logical time of that event.
 * @param next The event to place after the dummy events.
 * @param offset The number of dummy events to insert.
 * @return A pointer to the first dummy event.
 */
event_t* _lf_create_dummy_events(trigger_t* trigger, instant_t time, event_t* next, microstep_t offset) {
8000395c:	fc010113          	addi	sp,sp,-64
80003960:	02112e23          	sw	ra,60(sp)
80003964:	02812c23          	sw	s0,56(sp)
80003968:	04010413          	addi	s0,sp,64
8000396c:	fca42e23          	sw	a0,-36(s0)
80003970:	fcb42823          	sw	a1,-48(s0)
80003974:	fcc42a23          	sw	a2,-44(s0)
80003978:	fcd42c23          	sw	a3,-40(s0)
8000397c:	fce42623          	sw	a4,-52(s0)
    event_t* first_dummy = _lf_get_new_event();
80003980:	f0dff0ef          	jal	ra,8000388c <_lf_get_new_event>
80003984:	fea42423          	sw	a0,-24(s0)
    event_t* dummy = first_dummy;
80003988:	fe842783          	lw	a5,-24(s0)
8000398c:	fef42623          	sw	a5,-20(s0)
    while (offset > 0) {
80003990:	0740006f          	j	80003a04 <_lf_create_dummy_events+0xa8>
        dummy->time = time;
80003994:	fec42703          	lw	a4,-20(s0)
80003998:	fd042783          	lw	a5,-48(s0)
8000399c:	fd442803          	lw	a6,-44(s0)
800039a0:	00f72023          	sw	a5,0(a4)
800039a4:	01072223          	sw	a6,4(a4)
        dummy->trigger = trigger;
800039a8:	fec42783          	lw	a5,-20(s0)
800039ac:	fdc42703          	lw	a4,-36(s0)
800039b0:	00e7a423          	sw	a4,8(a5)
        dummy->is_dummy = true;
800039b4:	fec42783          	lw	a5,-20(s0)
800039b8:	00100713          	li	a4,1
800039bc:	00e78a23          	sb	a4,20(a5)
        if (offset == 1) {
800039c0:	fcc42703          	lw	a4,-52(s0)
800039c4:	00100793          	li	a5,1
800039c8:	00f71a63          	bne	a4,a5,800039dc <_lf_create_dummy_events+0x80>
            dummy->next = next;
800039cc:	fec42783          	lw	a5,-20(s0)
800039d0:	fd842703          	lw	a4,-40(s0)
800039d4:	00e7ac23          	sw	a4,24(a5)
            break;
800039d8:	0340006f          	j	80003a0c <_lf_create_dummy_events+0xb0>
        }
        dummy->next = _lf_get_new_event();
800039dc:	eb1ff0ef          	jal	ra,8000388c <_lf_get_new_event>
800039e0:	00050713          	mv	a4,a0
800039e4:	fec42783          	lw	a5,-20(s0)
800039e8:	00e7ac23          	sw	a4,24(a5)
        dummy = dummy->next;
800039ec:	fec42783          	lw	a5,-20(s0)
800039f0:	0187a783          	lw	a5,24(a5)
800039f4:	fef42623          	sw	a5,-20(s0)
        offset--;
800039f8:	fcc42783          	lw	a5,-52(s0)
800039fc:	fff78793          	addi	a5,a5,-1
80003a00:	fcf42623          	sw	a5,-52(s0)
    while (offset > 0) {
80003a04:	fcc42783          	lw	a5,-52(s0)
80003a08:	f80796e3          	bnez	a5,80003994 <_lf_create_dummy_events+0x38>
    }
    return first_dummy;
80003a0c:	fe842783          	lw	a5,-24(s0)
}
80003a10:	00078513          	mv	a0,a5
80003a14:	03c12083          	lw	ra,60(sp)
80003a18:	03812403          	lw	s0,56(sp)
80003a1c:	04010113          	addi	sp,sp,64
80003a20:	00008067          	ret

80003a24 <_lf_replace_token>:
 * Replace the token on the specified event with the specified
 * token and free the old token.
 * @param event The event.
 * @param token The token.
 */
void _lf_replace_token(event_t* event, lf_token_t* token) {
80003a24:	fe010113          	addi	sp,sp,-32
80003a28:	00112e23          	sw	ra,28(sp)
80003a2c:	00812c23          	sw	s0,24(sp)
80003a30:	02010413          	addi	s0,sp,32
80003a34:	fea42623          	sw	a0,-20(s0)
80003a38:	feb42423          	sw	a1,-24(s0)
    if (event->token != token) {
80003a3c:	fec42783          	lw	a5,-20(s0)
80003a40:	0107a783          	lw	a5,16(a5)
80003a44:	fe842703          	lw	a4,-24(s0)
80003a48:	00f70a63          	beq	a4,a5,80003a5c <_lf_replace_token+0x38>
        // Free the existing token, if any
        __done_using(event->token);
80003a4c:	fec42783          	lw	a5,-20(s0)
80003a50:	0107a783          	lw	a5,16(a5)
80003a54:	00078513          	mv	a0,a5
80003a58:	ce4ff0ef          	jal	ra,80002f3c <__done_using>
    }
    // Replace the token with ours.
    event->token = token;
80003a5c:	fec42783          	lw	a5,-20(s0)
80003a60:	fe842703          	lw	a4,-24(s0)
80003a64:	00e7a823          	sw	a4,16(a5)
}
80003a68:	00000013          	nop
80003a6c:	01c12083          	lw	ra,28(sp)
80003a70:	01812403          	lw	s0,24(sp)
80003a74:	02010113          	addi	sp,sp,32
80003a78:	00008067          	ret

80003a7c <_lf_schedule_at_tag>:
 * @param token The token wrapping the payload or NULL for no payload.
 * 
 * @return 1 for success, 0 if no new event was scheduled (instead, the payload was updated),
 *  or -1 for error (the tag is equal to or less than the current tag).
 */
int _lf_schedule_at_tag(trigger_t* trigger, tag_t tag, lf_token_t* token) {
80003a7c:	f7010113          	addi	sp,sp,-144
80003a80:	08112623          	sw	ra,140(sp)
80003a84:	08812423          	sw	s0,136(sp)
80003a88:	08912223          	sw	s1,132(sp)
80003a8c:	09212023          	sw	s2,128(sp)
80003a90:	09010413          	addi	s0,sp,144
80003a94:	f8a42e23          	sw	a0,-100(s0)
80003a98:	00058493          	mv	s1,a1
80003a9c:	f8c42c23          	sw	a2,-104(s0)

    tag_t current_logical_tag = get_current_tag();
80003aa0:	fa840793          	addi	a5,s0,-88
80003aa4:	00078513          	mv	a0,a5
80003aa8:	da1fd0ef          	jal	ra,80001848 <get_current_tag>

    // printf("_lf_schedule_at_tag() called with tag (%lld, %u) at tag (%lld, %u).\n",
    //              tag.time - start_time, tag.microstep,
    //              current_logical_tag.time - start_time, current_logical_tag.microstep);
    if (compare_tags(tag, current_logical_tag) <= 0) {
80003aac:	0004a603          	lw	a2,0(s1)
80003ab0:	0044a683          	lw	a3,4(s1)
80003ab4:	0084a703          	lw	a4,8(s1)
80003ab8:	00c4a783          	lw	a5,12(s1)
80003abc:	f8c42023          	sw	a2,-128(s0)
80003ac0:	f8d42223          	sw	a3,-124(s0)
80003ac4:	f8e42423          	sw	a4,-120(s0)
80003ac8:	f8f42623          	sw	a5,-116(s0)
80003acc:	fa842603          	lw	a2,-88(s0)
80003ad0:	fac42683          	lw	a3,-84(s0)
80003ad4:	fb042703          	lw	a4,-80(s0)
80003ad8:	fb442783          	lw	a5,-76(s0)
80003adc:	f6c42823          	sw	a2,-144(s0)
80003ae0:	f6d42a23          	sw	a3,-140(s0)
80003ae4:	f6e42c23          	sw	a4,-136(s0)
80003ae8:	f6f42e23          	sw	a5,-132(s0)
80003aec:	f7040713          	addi	a4,s0,-144
80003af0:	f8040793          	addi	a5,s0,-128
80003af4:	00070593          	mv	a1,a4
80003af8:	00078513          	mv	a0,a5
80003afc:	b69fd0ef          	jal	ra,80001664 <compare_tags>
80003b00:	00050793          	mv	a5,a0
80003b04:	00f04663          	bgtz	a5,80003b10 <_lf_schedule_at_tag+0x94>
        // fprintf(stderr,"_lf_schedule_at_tag(): requested to schedule an event in the past.\n");
        return -1;
80003b08:	fff00793          	li	a5,-1
80003b0c:	4600006f          	j	80003f6c <_lf_schedule_at_tag+0x4f0>
    }

    // Increment the reference count of the token.
    if (token != NULL) {
80003b10:	f9842783          	lw	a5,-104(s0)
80003b14:	00078c63          	beqz	a5,80003b2c <_lf_schedule_at_tag+0xb0>
        token->ref_count++;
80003b18:	f9842783          	lw	a5,-104(s0)
80003b1c:	00c7a783          	lw	a5,12(a5)
80003b20:	00178713          	addi	a4,a5,1
80003b24:	f9842783          	lw	a5,-104(s0)
80003b28:	00e7a623          	sw	a4,12(a5)
    }

    // Do not schedule events if the tag is after the stop tag
    if (_lf_is_tag_after_stop_tag(tag)) {
80003b2c:	0004a603          	lw	a2,0(s1)
80003b30:	0044a683          	lw	a3,4(s1)
80003b34:	0084a703          	lw	a4,8(s1)
80003b38:	00c4a783          	lw	a5,12(s1)
80003b3c:	f6c42823          	sw	a2,-144(s0)
80003b40:	f6d42a23          	sw	a3,-140(s0)
80003b44:	f6e42c23          	sw	a4,-136(s0)
80003b48:	f6f42e23          	sw	a5,-132(s0)
80003b4c:	f7040793          	addi	a5,s0,-144
80003b50:	00078513          	mv	a0,a5
80003b54:	871ff0ef          	jal	ra,800033c4 <_lf_is_tag_after_stop_tag>
80003b58:	00050793          	mv	a5,a0
80003b5c:	00078a63          	beqz	a5,80003b70 <_lf_schedule_at_tag+0xf4>
        DEBUG_PRINT("_lf_schedule_at_tag: event time is past the timeout. Discarding event.");
        __done_using(token);
80003b60:	f9842503          	lw	a0,-104(s0)
80003b64:	bd8ff0ef          	jal	ra,80002f3c <__done_using>
        return -1;
80003b68:	fff00793          	li	a5,-1
80003b6c:	4000006f          	j	80003f6c <_lf_schedule_at_tag+0x4f0>
    }
    
    event_t* e = _lf_get_new_event();
80003b70:	d1dff0ef          	jal	ra,8000388c <_lf_get_new_event>
80003b74:	fea42023          	sw	a0,-32(s0)
    // Set the event time
    e->time = tag.time;
80003b78:	0004a783          	lw	a5,0(s1)
80003b7c:	0044a803          	lw	a6,4(s1)
80003b80:	fe042703          	lw	a4,-32(s0)
80003b84:	00f72023          	sw	a5,0(a4)
80003b88:	01072223          	sw	a6,4(a4)
    
    tracepoint_schedule(trigger, tag.time - current_logical_tag.time);

    // Make sure the event points to this trigger so when it is
    // dequeued, it will trigger this trigger.
    e->trigger = trigger;
80003b8c:	fe042783          	lw	a5,-32(s0)
80003b90:	f9c42703          	lw	a4,-100(s0)
80003b94:	00e7a423          	sw	a4,8(a5)

    // Set the payload.
    e->token = token;
80003b98:	fe042783          	lw	a5,-32(s0)
80003b9c:	f9842703          	lw	a4,-104(s0)
80003ba0:	00e7a823          	sw	a4,16(a5)
#ifdef _LF_COORD_DECENTRALIZED
    // Set the intended tag
    e->intended_tag = trigger->intended_tag;
#endif

    event_t* found = (event_t *)pqueue_find_equal_same_priority(event_q, e);
80003ba4:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
80003ba8:	0007a783          	lw	a5,0(a5)
80003bac:	fe042583          	lw	a1,-32(s0)
80003bb0:	00078513          	mv	a0,a5
80003bb4:	80dfe0ef          	jal	ra,800023c0 <pqueue_find_equal_same_priority>
80003bb8:	fea42623          	sw	a0,-20(s0)
    if (found != NULL) {
80003bbc:	fec42783          	lw	a5,-20(s0)
80003bc0:	2e078263          	beqz	a5,80003ea4 <_lf_schedule_at_tag+0x428>
        if (tag.microstep == 0) {
80003bc4:	0084a783          	lw	a5,8(s1)
80003bc8:	0e079863          	bnez	a5,80003cb8 <_lf_schedule_at_tag+0x23c>
                // The microstep is 0, which means that the event is being scheduled
                // at a future time and at the beginning of the skip list of events 
                // at that time.
                // In case the event is a dummy event
                // convert it to a real event.                
                found->is_dummy = false;
80003bcc:	fec42783          	lw	a5,-20(s0)
80003bd0:	00078a23          	sb	zero,20(a5)
                switch (trigger->policy) {
80003bd4:	f9c42783          	lw	a5,-100(s0)
80003bd8:	02c7a783          	lw	a5,44(a5)
80003bdc:	00100713          	li	a4,1
80003be0:	00e78863          	beq	a5,a4,80003bf0 <_lf_schedule_at_tag+0x174>
80003be4:	00200713          	li	a4,2
80003be8:	02e78863          	beq	a5,a4,80003c18 <_lf_schedule_at_tag+0x19c>
80003bec:	0480006f          	j	80003c34 <_lf_schedule_at_tag+0x1b8>
                    case drop:
                        if (found->token != token) {
80003bf0:	fec42783          	lw	a5,-20(s0)
80003bf4:	0107a783          	lw	a5,16(a5)
80003bf8:	f9842703          	lw	a4,-104(s0)
80003bfc:	00f70663          	beq	a4,a5,80003c08 <_lf_schedule_at_tag+0x18c>
                            __done_using(token);
80003c00:	f9842503          	lw	a0,-104(s0)
80003c04:	b38ff0ef          	jal	ra,80002f3c <__done_using>
                        }
                        _lf_recycle_event(e);
80003c08:	fe042503          	lw	a0,-32(s0)
80003c0c:	cd9ff0ef          	jal	ra,800038e4 <_lf_recycle_event>
                        return(0);
80003c10:	00000793          	li	a5,0
80003c14:	3580006f          	j	80003f6c <_lf_schedule_at_tag+0x4f0>
                        break;
                    case replace:
                        // Replace the payload of the event at the head with our
                        // current payload.
                        _lf_replace_token(found, token);
80003c18:	f9842583          	lw	a1,-104(s0)
80003c1c:	fec42503          	lw	a0,-20(s0)
80003c20:	e05ff0ef          	jal	ra,80003a24 <_lf_replace_token>
                        _lf_recycle_event(e);
80003c24:	fe042503          	lw	a0,-32(s0)
80003c28:	cbdff0ef          	jal	ra,800038e4 <_lf_recycle_event>
                        return 0;
80003c2c:	00000793          	li	a5,0
80003c30:	33c0006f          	j	80003f6c <_lf_schedule_at_tag+0x4f0>
                        break;
                    default:
                        // Adding a microstep to the original
                        // intended tag.
                        if (_lf_is_tag_after_stop_tag((tag_t) {.time=found->time,.microstep=1})) {
80003c34:	fec42783          	lw	a5,-20(s0)
80003c38:	0047a803          	lw	a6,4(a5)
80003c3c:	0007a783          	lw	a5,0(a5)
80003c40:	faf42c23          	sw	a5,-72(s0)
80003c44:	fb042e23          	sw	a6,-68(s0)
80003c48:	00100793          	li	a5,1
80003c4c:	fcf42023          	sw	a5,-64(s0)
80003c50:	fb842603          	lw	a2,-72(s0)
80003c54:	fbc42683          	lw	a3,-68(s0)
80003c58:	fc042703          	lw	a4,-64(s0)
80003c5c:	fc442783          	lw	a5,-60(s0)
80003c60:	f6c42823          	sw	a2,-144(s0)
80003c64:	f6d42a23          	sw	a3,-140(s0)
80003c68:	f6e42c23          	sw	a4,-136(s0)
80003c6c:	f6f42e23          	sw	a5,-132(s0)
80003c70:	f7040793          	addi	a5,s0,-144
80003c74:	00078513          	mv	a0,a5
80003c78:	f4cff0ef          	jal	ra,800033c4 <_lf_is_tag_after_stop_tag>
80003c7c:	00050793          	mv	a5,a0
80003c80:	00078a63          	beqz	a5,80003c94 <_lf_schedule_at_tag+0x218>
                            // Scheduling e will incur a microstep after the stop tag, 
                            // which is illegal.
                            _lf_recycle_event(e);
80003c84:	fe042503          	lw	a0,-32(s0)
80003c88:	c5dff0ef          	jal	ra,800038e4 <_lf_recycle_event>
                            return 0;
80003c8c:	00000793          	li	a5,0
80003c90:	2dc0006f          	j	80003f6c <_lf_schedule_at_tag+0x4f0>
                        }
                        if (found->next != NULL) {
80003c94:	fec42783          	lw	a5,-20(s0)
80003c98:	0187a783          	lw	a5,24(a5)
80003c9c:	00078663          	beqz	a5,80003ca8 <_lf_schedule_at_tag+0x22c>
                            // fprintf(stderr, "_lf_schedule_at_tag: in-order contract violated.\n");
                            return -1;
80003ca0:	fff00793          	li	a5,-1
80003ca4:	2c80006f          	j	80003f6c <_lf_schedule_at_tag+0x4f0>
                        }
                        found->next = e;
80003ca8:	fec42783          	lw	a5,-20(s0)
80003cac:	fe042703          	lw	a4,-32(s0)
80003cb0:	00e7ac23          	sw	a4,24(a5)
80003cb4:	2b40006f          	j	80003f68 <_lf_schedule_at_tag+0x4ec>
            // where there is already an event for this trigger on the event queue.
            // That event may itself be a dummy event for a real event that is
            // also at a microstep greater than 0.
            // We have to insert our event into the chain or append it
            // to the end of the chain, depending on which microstep is lesser.
            microstep_t microstep_of_found = 0;
80003cb8:	fe042423          	sw	zero,-24(s0)
            if (tag.time == current_logical_tag.time) {
80003cbc:	0004a683          	lw	a3,0(s1)
80003cc0:	0044a703          	lw	a4,4(s1)
80003cc4:	fa842783          	lw	a5,-88(s0)
80003cc8:	fac42803          	lw	a6,-84(s0)
80003ccc:	00068593          	mv	a1,a3
80003cd0:	00078613          	mv	a2,a5
80003cd4:	0ac59463          	bne	a1,a2,80003d7c <_lf_schedule_at_tag+0x300>
80003cd8:	00080793          	mv	a5,a6
80003cdc:	0af71063          	bne	a4,a5,80003d7c <_lf_schedule_at_tag+0x300>
                // This is a situation where the head of the queue
                // is an event with microstep == current_microstep + 1
                // which should be reflected in our steps calculation.
                microstep_of_found += current_logical_tag.microstep + 1; // Indicating that
80003ce0:	fb042703          	lw	a4,-80(s0)
80003ce4:	fe842783          	lw	a5,-24(s0)
80003ce8:	00f707b3          	add	a5,a4,a5
80003cec:	00178793          	addi	a5,a5,1
80003cf0:	fef42423          	sw	a5,-24(s0)
                                                            // the found event
                                                            // is at this microstep.
            }
            // Follow the chain of events until the right point
            // to insert the new event.
            while (microstep_of_found < tag.microstep - 1) {
80003cf4:	0880006f          	j	80003d7c <_lf_schedule_at_tag+0x300>
                if (found->next == NULL) {
80003cf8:	fec42783          	lw	a5,-20(s0)
80003cfc:	0187a783          	lw	a5,24(a5)
80003d00:	06079263          	bnez	a5,80003d64 <_lf_schedule_at_tag+0x2e8>
                    // The chain stops short of where we want to be.
                    // If it exactly one microstep short of where we want to be,
                    // then we don't need a dummy. Otherwise, we do.
                    // printf("<<<<<< _lf_schedule_at_tag: 6\n");
                    microstep_t undershot_by = (tag.microstep - 1) - microstep_of_found;
80003d04:	0084a703          	lw	a4,8(s1)
80003d08:	fe842783          	lw	a5,-24(s0)
80003d0c:	40f707b3          	sub	a5,a4,a5
80003d10:	fff78793          	addi	a5,a5,-1
80003d14:	fcf42e23          	sw	a5,-36(s0)
                    if (undershot_by > 0) {
80003d18:	fdc42783          	lw	a5,-36(s0)
80003d1c:	02078a63          	beqz	a5,80003d50 <_lf_schedule_at_tag+0x2d4>
                        found->next = _lf_create_dummy_events(trigger, tag.time, e, undershot_by);
80003d20:	0004a783          	lw	a5,0(s1)
80003d24:	0044a803          	lw	a6,4(s1)
80003d28:	fdc42703          	lw	a4,-36(s0)
80003d2c:	fe042683          	lw	a3,-32(s0)
80003d30:	00078593          	mv	a1,a5
80003d34:	00080613          	mv	a2,a6
80003d38:	f9c42503          	lw	a0,-100(s0)
80003d3c:	c21ff0ef          	jal	ra,8000395c <_lf_create_dummy_events>
80003d40:	00050713          	mv	a4,a0
80003d44:	fec42783          	lw	a5,-20(s0)
80003d48:	00e7ac23          	sw	a4,24(a5)
80003d4c:	0100006f          	j	80003d5c <_lf_schedule_at_tag+0x2e0>
                    } else {
                        found->next = e;
80003d50:	fec42783          	lw	a5,-20(s0)
80003d54:	fe042703          	lw	a4,-32(s0)
80003d58:	00e7ac23          	sw	a4,24(a5)
                    }
                    return 1;
80003d5c:	00100793          	li	a5,1
80003d60:	20c0006f          	j	80003f6c <_lf_schedule_at_tag+0x4f0>
                }
                found = found->next;
80003d64:	fec42783          	lw	a5,-20(s0)
80003d68:	0187a783          	lw	a5,24(a5)
80003d6c:	fef42623          	sw	a5,-20(s0)
                microstep_of_found++;
80003d70:	fe842783          	lw	a5,-24(s0)
80003d74:	00178793          	addi	a5,a5,1
80003d78:	fef42423          	sw	a5,-24(s0)
            while (microstep_of_found < tag.microstep - 1) {
80003d7c:	0084a783          	lw	a5,8(s1)
80003d80:	fff78793          	addi	a5,a5,-1
80003d84:	fe842703          	lw	a4,-24(s0)
80003d88:	f6f768e3          	bltu	a4,a5,80003cf8 <_lf_schedule_at_tag+0x27c>
            }
            // At this point, microstep_of_found == tag.microstep - 1.
            if (found->next == NULL) {
80003d8c:	fec42783          	lw	a5,-20(s0)
80003d90:	0187a783          	lw	a5,24(a5)
80003d94:	00079a63          	bnez	a5,80003da8 <_lf_schedule_at_tag+0x32c>
                found->next = e;
80003d98:	fec42783          	lw	a5,-20(s0)
80003d9c:	fe042703          	lw	a4,-32(s0)
80003da0:	00e7ac23          	sw	a4,24(a5)
80003da4:	1c40006f          	j	80003f68 <_lf_schedule_at_tag+0x4ec>
            } else {
                switch (trigger->policy) {
80003da8:	f9c42783          	lw	a5,-100(s0)
80003dac:	02c7a783          	lw	a5,44(a5)
80003db0:	00100713          	li	a4,1
80003db4:	00e78863          	beq	a5,a4,80003dc4 <_lf_schedule_at_tag+0x348>
80003db8:	00200713          	li	a4,2
80003dbc:	02e78a63          	beq	a5,a4,80003df0 <_lf_schedule_at_tag+0x374>
80003dc0:	0540006f          	j	80003e14 <_lf_schedule_at_tag+0x398>
                    case drop:
                        if (found->next->token != token) {
80003dc4:	fec42783          	lw	a5,-20(s0)
80003dc8:	0187a783          	lw	a5,24(a5)
80003dcc:	0107a783          	lw	a5,16(a5)
80003dd0:	f9842703          	lw	a4,-104(s0)
80003dd4:	00f70663          	beq	a4,a5,80003de0 <_lf_schedule_at_tag+0x364>
                            __done_using(token);
80003dd8:	f9842503          	lw	a0,-104(s0)
80003ddc:	960ff0ef          	jal	ra,80002f3c <__done_using>
                        }
                        _lf_recycle_event(e);
80003de0:	fe042503          	lw	a0,-32(s0)
80003de4:	b01ff0ef          	jal	ra,800038e4 <_lf_recycle_event>
                        return 0;
80003de8:	00000793          	li	a5,0
80003dec:	1800006f          	j	80003f6c <_lf_schedule_at_tag+0x4f0>
                        break;
                    case replace:
                        // Replace the payload of the event at the head with our
                        // current payload.
                        _lf_replace_token(found->next, token);
80003df0:	fec42783          	lw	a5,-20(s0)
80003df4:	0187a783          	lw	a5,24(a5)
80003df8:	f9842583          	lw	a1,-104(s0)
80003dfc:	00078513          	mv	a0,a5
80003e00:	c25ff0ef          	jal	ra,80003a24 <_lf_replace_token>
                        _lf_recycle_event(e);
80003e04:	fe042503          	lw	a0,-32(s0)
80003e08:	addff0ef          	jal	ra,800038e4 <_lf_recycle_event>
                        return 0;
80003e0c:	00000793          	li	a5,0
80003e10:	15c0006f          	j	80003f6c <_lf_schedule_at_tag+0x4f0>
                        break;
                    default:
                        // Adding a microstep to the original
                        // intended tag.
                        if (_lf_is_tag_after_stop_tag((tag_t){.time=found->time,.microstep=microstep_of_found+1})) {
80003e14:	fec42783          	lw	a5,-20(s0)
80003e18:	0047a803          	lw	a6,4(a5)
80003e1c:	0007a783          	lw	a5,0(a5)
80003e20:	fcf42423          	sw	a5,-56(s0)
80003e24:	fd042623          	sw	a6,-52(s0)
80003e28:	fe842783          	lw	a5,-24(s0)
80003e2c:	00178793          	addi	a5,a5,1
80003e30:	fcf42823          	sw	a5,-48(s0)
80003e34:	fc842603          	lw	a2,-56(s0)
80003e38:	fcc42683          	lw	a3,-52(s0)
80003e3c:	fd042703          	lw	a4,-48(s0)
80003e40:	fd442783          	lw	a5,-44(s0)
80003e44:	f6c42823          	sw	a2,-144(s0)
80003e48:	f6d42a23          	sw	a3,-140(s0)
80003e4c:	f6e42c23          	sw	a4,-136(s0)
80003e50:	f6f42e23          	sw	a5,-132(s0)
80003e54:	f7040793          	addi	a5,s0,-144
80003e58:	00078513          	mv	a0,a5
80003e5c:	d68ff0ef          	jal	ra,800033c4 <_lf_is_tag_after_stop_tag>
80003e60:	00050793          	mv	a5,a0
80003e64:	00078a63          	beqz	a5,80003e78 <_lf_schedule_at_tag+0x3fc>
                            // Scheduling e will incur a microstep at timeout, 
                            // which is illegal.
                            _lf_recycle_event(e);
80003e68:	fe042503          	lw	a0,-32(s0)
80003e6c:	a79ff0ef          	jal	ra,800038e4 <_lf_recycle_event>
                            return 0;
80003e70:	00000793          	li	a5,0
80003e74:	0f80006f          	j	80003f6c <_lf_schedule_at_tag+0x4f0>
                        }
                        if (found->next->next != NULL) {
80003e78:	fec42783          	lw	a5,-20(s0)
80003e7c:	0187a783          	lw	a5,24(a5)
80003e80:	0187a783          	lw	a5,24(a5)
80003e84:	00078663          	beqz	a5,80003e90 <_lf_schedule_at_tag+0x414>
                            // fprintf(stderr, "_lf_schedule_at_tag: in-order contract violated.\n");
                            return -1;
80003e88:	fff00793          	li	a5,-1
80003e8c:	0e00006f          	j	80003f6c <_lf_schedule_at_tag+0x4f0>
                        }
                        found->next->next = e;
80003e90:	fec42783          	lw	a5,-20(s0)
80003e94:	0187a783          	lw	a5,24(a5)
80003e98:	fe042703          	lw	a4,-32(s0)
80003e9c:	00e7ac23          	sw	a4,24(a5)
80003ea0:	0c80006f          	j	80003f68 <_lf_schedule_at_tag+0x4ec>
                }
            }
        }
    } else {
        // No existing event queued.
        microstep_t relative_microstep = tag.microstep;
80003ea4:	0084a783          	lw	a5,8(s1)
80003ea8:	fef42223          	sw	a5,-28(s0)
        if (tag.time == current_logical_tag.time) {
80003eac:	0004a683          	lw	a3,0(s1)
80003eb0:	0044a703          	lw	a4,4(s1)
80003eb4:	fa842783          	lw	a5,-88(s0)
80003eb8:	fac42803          	lw	a6,-84(s0)
80003ebc:	00068593          	mv	a1,a3
80003ec0:	00078613          	mv	a2,a5
80003ec4:	00c59e63          	bne	a1,a2,80003ee0 <_lf_schedule_at_tag+0x464>
80003ec8:	00080793          	mv	a5,a6
80003ecc:	00f71a63          	bne	a4,a5,80003ee0 <_lf_schedule_at_tag+0x464>
            relative_microstep -= current_logical_tag.microstep;
80003ed0:	fb042783          	lw	a5,-80(s0)
80003ed4:	fe442703          	lw	a4,-28(s0)
80003ed8:	40f707b3          	sub	a5,a4,a5
80003edc:	fef42223          	sw	a5,-28(s0)
        }
        if (((tag.time == current_logical_tag.time) && (relative_microstep == 1)) ||
80003ee0:	0004a683          	lw	a3,0(s1)
80003ee4:	0044a703          	lw	a4,4(s1)
80003ee8:	fa842783          	lw	a5,-88(s0)
80003eec:	fac42803          	lw	a6,-84(s0)
80003ef0:	00068593          	mv	a1,a3
80003ef4:	00078613          	mv	a2,a5
80003ef8:	00c59c63          	bne	a1,a2,80003f10 <_lf_schedule_at_tag+0x494>
80003efc:	00080793          	mv	a5,a6
80003f00:	00f71863          	bne	a4,a5,80003f10 <_lf_schedule_at_tag+0x494>
80003f04:	fe442703          	lw	a4,-28(s0)
80003f08:	00100793          	li	a5,1
80003f0c:	00f70663          	beq	a4,a5,80003f18 <_lf_schedule_at_tag+0x49c>
                tag.microstep == 0) {
80003f10:	0084a783          	lw	a5,8(s1)
        if (((tag.time == current_logical_tag.time) && (relative_microstep == 1)) ||
80003f14:	00079e63          	bnez	a5,80003f30 <_lf_schedule_at_tag+0x4b4>
            // Do not need a dummy event if we are scheduling at 1 microstep
            // in the future at current time or at microstep 0 in a future time.
            // printf("<<<<<< _lf_schedule_at_tag: 11\n");
            pqueue_insert(event_q, e);
80003f18:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
80003f1c:	0007a783          	lw	a5,0(a5)
80003f20:	fe042583          	lw	a1,-32(s0)
80003f24:	00078513          	mv	a0,a5
80003f28:	d28fe0ef          	jal	ra,80002450 <pqueue_insert>
80003f2c:	03c0006f          	j	80003f68 <_lf_schedule_at_tag+0x4ec>
        } else {
            // printf("<<<<<< _lf_schedule_at_tag: 12\n");
            // Create a dummy event. Insert it into the queue, and let its next
            // pointer point to the actual event.
            pqueue_insert(event_q, _lf_create_dummy_events(trigger, tag.time, e, relative_microstep));
80003f30:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
80003f34:	0007a903          	lw	s2,0(a5)
80003f38:	0004a783          	lw	a5,0(s1)
80003f3c:	0044a803          	lw	a6,4(s1)
80003f40:	fe442703          	lw	a4,-28(s0)
80003f44:	fe042683          	lw	a3,-32(s0)
80003f48:	00078593          	mv	a1,a5
80003f4c:	00080613          	mv	a2,a6
80003f50:	f9c42503          	lw	a0,-100(s0)
80003f54:	a09ff0ef          	jal	ra,8000395c <_lf_create_dummy_events>
80003f58:	00050793          	mv	a5,a0
80003f5c:	00078593          	mv	a1,a5
80003f60:	00090513          	mv	a0,s2
80003f64:	cecfe0ef          	jal	ra,80002450 <pqueue_insert>
        }
    }
    return 1;
80003f68:	00100793          	li	a5,1
}
80003f6c:	00078513          	mv	a0,a5
80003f70:	08c12083          	lw	ra,140(sp)
80003f74:	08812403          	lw	s0,136(sp)
80003f78:	08412483          	lw	s1,132(sp)
80003f7c:	08012903          	lw	s2,128(sp)
80003f80:	09010113          	addi	sp,sp,144
80003f84:	00008067          	ret

80003f88 <__schedule>:
 *  trigger's minimum delay, if it has one. If this number is negative,
 *  then zero is used instead.
 * @param token The token wrapping the payload or NULL for no payload.
 * @return A handle to the event, or 0 if no new event was scheduled, or -1 for error.
 */
handle_t __schedule(trigger_t* trigger, interval_t extra_delay, lf_token_t* token) {
80003f88:	f7010113          	addi	sp,sp,-144
80003f8c:	08112623          	sw	ra,140(sp)
80003f90:	08812423          	sw	s0,136(sp)
80003f94:	09010413          	addi	s0,sp,144
80003f98:	f8a42623          	sw	a0,-116(s0)
80003f9c:	f8b42023          	sw	a1,-128(s0)
80003fa0:	f8c42223          	sw	a2,-124(s0)
80003fa4:	f8d42423          	sw	a3,-120(s0)
    if (_lf_is_tag_after_stop_tag(current_tag)) {
80003fa8:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
80003fac:	0007a603          	lw	a2,0(a5)
80003fb0:	0047a683          	lw	a3,4(a5)
80003fb4:	0087a703          	lw	a4,8(a5)
80003fb8:	00c7a783          	lw	a5,12(a5)
80003fbc:	f6c42823          	sw	a2,-144(s0)
80003fc0:	f6d42a23          	sw	a3,-140(s0)
80003fc4:	f6e42c23          	sw	a4,-136(s0)
80003fc8:	f6f42e23          	sw	a5,-132(s0)
80003fcc:	f7040793          	addi	a5,s0,-144
80003fd0:	00078513          	mv	a0,a5
80003fd4:	bf0ff0ef          	jal	ra,800033c4 <_lf_is_tag_after_stop_tag>
80003fd8:	00050793          	mv	a5,a0
80003fdc:	00078a63          	beqz	a5,80003ff0 <__schedule+0x68>
        // If schedule is called after stop_tag
        // This is a critical condition.
        __done_using(token);
80003fe0:	f8842503          	lw	a0,-120(s0)
80003fe4:	f59fe0ef          	jal	ra,80002f3c <__done_using>
        // printf("WARNING: schedule() called after stop tag.\n");
        return 0;
80003fe8:	00000793          	li	a5,0
80003fec:	5940006f          	j	80004580 <__schedule+0x5f8>
    // }
    
	// The trigger argument could be null, meaning that nothing is triggered.
    // Doing this after incrementing the reference count ensures that the
    // payload will be freed, if there is one.
	if (trigger == NULL) {
80003ff0:	f8c42783          	lw	a5,-116(s0)
80003ff4:	00079a63          	bnez	a5,80004008 <__schedule+0x80>
	    __done_using(token);
80003ff8:	f8842503          	lw	a0,-120(s0)
80003ffc:	f41fe0ef          	jal	ra,80002f3c <__done_using>
	    return 0;
80004000:	00000793          	li	a5,0
80004004:	57c0006f          	j	80004580 <__schedule+0x5f8>
	}

    // Increment the reference count of the token.
	if (token != NULL) {
80004008:	f8842783          	lw	a5,-120(s0)
8000400c:	00078c63          	beqz	a5,80004024 <__schedule+0x9c>
	    token->ref_count++;
80004010:	f8842783          	lw	a5,-120(s0)
80004014:	00c7a783          	lw	a5,12(a5)
80004018:	00178713          	addi	a4,a5,1
8000401c:	f8842783          	lw	a5,-120(s0)
80004020:	00e7a623          	sw	a4,12(a5)
	}

    // Compute the tag (the logical timestamp for the future event).
	// We first do this assuming it is logical action and then, if it is a
	// physical action, modify it if physical time exceeds the result.
    interval_t delay = trigger->offset + extra_delay;
80004024:	f8c42783          	lw	a5,-116(s0)
80004028:	0107a583          	lw	a1,16(a5)
8000402c:	0147a603          	lw	a2,20(a5)
80004030:	f8042683          	lw	a3,-128(s0)
80004034:	f8442703          	lw	a4,-124(s0)
80004038:	00b687b3          	add	a5,a3,a1
8000403c:	00078513          	mv	a0,a5
80004040:	00d53533          	sltu	a0,a0,a3
80004044:	00c70833          	add	a6,a4,a2
80004048:	01050733          	add	a4,a0,a6
8000404c:	00070813          	mv	a6,a4
80004050:	fcf42c23          	sw	a5,-40(s0)
80004054:	fd042e23          	sw	a6,-36(s0)
    interval_t intended_time = current_tag.time + delay;
80004058:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
8000405c:	0007a583          	lw	a1,0(a5)
80004060:	0047a603          	lw	a2,4(a5)
80004064:	fd842683          	lw	a3,-40(s0)
80004068:	fdc42703          	lw	a4,-36(s0)
8000406c:	00b687b3          	add	a5,a3,a1
80004070:	00078513          	mv	a0,a5
80004074:	00d53533          	sltu	a0,a0,a3
80004078:	00c70833          	add	a6,a4,a2
8000407c:	01050733          	add	a4,a0,a6
80004080:	00070813          	mv	a6,a4
80004084:	fef42423          	sw	a5,-24(s0)
80004088:	ff042623          	sw	a6,-20(s0)
    DEBUG_PRINT("__schedule: current_tag.time = %lld.", current_tag.time);
    DEBUG_PRINT("__schedule: total logical delay = %lld.", delay);
    interval_t min_spacing = trigger->period;
8000408c:	f8c42783          	lw	a5,-116(s0)
80004090:	01c7a803          	lw	a6,28(a5)
80004094:	0187a783          	lw	a5,24(a5)
80004098:	fcf42823          	sw	a5,-48(s0)
8000409c:	fd042a23          	sw	a6,-44(s0)

    event_t* e = _lf_get_new_event();
800040a0:	fecff0ef          	jal	ra,8000388c <_lf_get_new_event>
800040a4:	fca42623          	sw	a0,-52(s0)
    
    // Initialize the next pointer.
    e->next = NULL;
800040a8:	fcc42783          	lw	a5,-52(s0)
800040ac:	0007ac23          	sw	zero,24(a5)

    // Set the payload.
    e->token = token;
800040b0:	fcc42783          	lw	a5,-52(s0)
800040b4:	f8842703          	lw	a4,-120(s0)
800040b8:	00e7a823          	sw	a4,16(a5)

    // Make sure the event points to this trigger so when it is
    // dequeued, it will trigger this trigger.
    e->trigger = trigger;
800040bc:	fcc42783          	lw	a5,-52(s0)
800040c0:	f8c42703          	lw	a4,-116(s0)
800040c4:	00e7a423          	sw	a4,8(a5)

    // If the trigger is physical, then we need to check whether
    // physical time is larger than the intended time and, if so,
    // modify the intended time.
    if (trigger->is_physical) {
800040c8:	f8c42783          	lw	a5,-116(s0)
800040cc:	0247c783          	lbu	a5,36(a5)
800040d0:	02078e63          	beqz	a5,8000410c <__schedule+0x184>
        // Get the current physical time and assign it as the intended time.
        intended_time = get_physical_time() + delay;
800040d4:	80dfd0ef          	jal	ra,800018e0 <get_physical_time>
800040d8:	00058613          	mv	a2,a1
800040dc:	00050593          	mv	a1,a0
800040e0:	fd842683          	lw	a3,-40(s0)
800040e4:	fdc42703          	lw	a4,-36(s0)
800040e8:	00b687b3          	add	a5,a3,a1
800040ec:	00078513          	mv	a0,a5
800040f0:	00d53533          	sltu	a0,a0,a3
800040f4:	00c70833          	add	a6,a4,a2
800040f8:	01050733          	add	a4,a0,a6
800040fc:	00070813          	mv	a6,a4
80004100:	fef42423          	sw	a5,-24(s0)
80004104:	ff042623          	sw	a6,-20(s0)
80004108:	0440006f          	j	8000414c <__schedule+0x1c4>
        // done) the computed tag can be smaller than the current tag, in which case
        // it needs to be adjusted.
        // FIXME: This can go away once:
        // - we have eliminated the possibility to have a negative additional delay; and
        // - we detect the asynchronous use of logical actions
        if (intended_time < current_tag.time) {
8000410c:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
80004110:	0047a803          	lw	a6,4(a5)
80004114:	0007a783          	lw	a5,0(a5)
80004118:	fec42703          	lw	a4,-20(s0)
8000411c:	00080693          	mv	a3,a6
80004120:	00d74c63          	blt	a4,a3,80004138 <__schedule+0x1b0>
80004124:	fec42703          	lw	a4,-20(s0)
80004128:	00080693          	mv	a3,a6
8000412c:	02d71063          	bne	a4,a3,8000414c <__schedule+0x1c4>
80004130:	fe842703          	lw	a4,-24(s0)
80004134:	00f77c63          	bleu	a5,a4,8000414c <__schedule+0x1c4>
            // fprintf(stderr, "WARNING: Attempting to schedule an event earlier than current logical time by %lld nsec!\n"
            //         "Revising request to the current time %lld.\n", current_tag.time - intended_time, current_tag.time);
            intended_time = current_tag.time;
80004138:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
8000413c:	0047a803          	lw	a6,4(a5)
80004140:	0007a783          	lw	a5,0(a5)
80004144:	fef42423          	sw	a5,-24(s0)
80004148:	ff042623          	sw	a6,-20(s0)

#ifdef _LF_COORD_DECENTRALIZED
    e->intended_tag = trigger->intended_tag;
#endif
    
    event_t* existing = (event_t*)(trigger->last);
8000414c:	f8c42783          	lw	a5,-116(s0)
80004150:	0287a783          	lw	a5,40(a5)
80004154:	fcf42423          	sw	a5,-56(s0)
    // Check for conflicts (a queued event with the same trigger and time).
    if (trigger->period < 0) {
80004158:	f8c42783          	lw	a5,-116(s0)
8000415c:	01c7a803          	lw	a6,28(a5)
80004160:	0187a783          	lw	a5,24(a5)
80004164:	00080793          	mv	a5,a6
80004168:	0e07d263          	bgez	a5,8000424c <__schedule+0x2c4>
        // No minimum spacing defined.
        tag_t intended_tag = (tag_t) {.time = intended_time, .microstep = 0u};
8000416c:	fe842783          	lw	a5,-24(s0)
80004170:	fec42803          	lw	a6,-20(s0)
80004174:	f8f42c23          	sw	a5,-104(s0)
80004178:	f9042e23          	sw	a6,-100(s0)
8000417c:	fa042023          	sw	zero,-96(s0)
        e->time = intended_tag.time;
80004180:	f9842783          	lw	a5,-104(s0)
80004184:	f9c42803          	lw	a6,-100(s0)
80004188:	fcc42703          	lw	a4,-52(s0)
8000418c:	00f72023          	sw	a5,0(a4)
80004190:	01072223          	sw	a6,4(a4)
        event_t* found = (event_t *)pqueue_find_equal_same_priority(event_q, e);
80004194:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
80004198:	0007a783          	lw	a5,0(a5)
8000419c:	fcc42583          	lw	a1,-52(s0)
800041a0:	00078513          	mv	a0,a5
800041a4:	a1cfe0ef          	jal	ra,800023c0 <pqueue_find_equal_same_priority>
800041a8:	fea42223          	sw	a0,-28(s0)
        // Check for conflicts. Let events pile up in super dense time.
        if (found != NULL) {
800041ac:	fe442783          	lw	a5,-28(s0)
800041b0:	30078a63          	beqz	a5,800044c4 <__schedule+0x53c>
            intended_tag.microstep++;
800041b4:	fa042783          	lw	a5,-96(s0)
800041b8:	00178793          	addi	a5,a5,1
800041bc:	faf42023          	sw	a5,-96(s0)
            // Skip to the last node in the linked list.
            while(found->next != NULL) {
800041c0:	01c0006f          	j	800041dc <__schedule+0x254>
                found = found->next;
800041c4:	fe442783          	lw	a5,-28(s0)
800041c8:	0187a783          	lw	a5,24(a5)
800041cc:	fef42223          	sw	a5,-28(s0)
                intended_tag.microstep++;
800041d0:	fa042783          	lw	a5,-96(s0)
800041d4:	00178793          	addi	a5,a5,1
800041d8:	faf42023          	sw	a5,-96(s0)
            while(found->next != NULL) {
800041dc:	fe442783          	lw	a5,-28(s0)
800041e0:	0187a783          	lw	a5,24(a5)
800041e4:	fe0790e3          	bnez	a5,800041c4 <__schedule+0x23c>
            }
            if (_lf_is_tag_after_stop_tag(intended_tag)) {
800041e8:	f9842603          	lw	a2,-104(s0)
800041ec:	f9c42683          	lw	a3,-100(s0)
800041f0:	fa042703          	lw	a4,-96(s0)
800041f4:	fa442783          	lw	a5,-92(s0)
800041f8:	f6c42823          	sw	a2,-144(s0)
800041fc:	f6d42a23          	sw	a3,-140(s0)
80004200:	f6e42c23          	sw	a4,-136(s0)
80004204:	f6f42e23          	sw	a5,-132(s0)
80004208:	f7040793          	addi	a5,s0,-144
8000420c:	00078513          	mv	a0,a5
80004210:	9b4ff0ef          	jal	ra,800033c4 <_lf_is_tag_after_stop_tag>
80004214:	00050793          	mv	a5,a0
80004218:	02078063          	beqz	a5,80004238 <__schedule+0x2b0>
                printf("WARNING: Attempt to schedule an event after stop_tag was rejected.\n");
8000421c:	00009517          	auipc	a0,0x9
80004220:	84050513          	addi	a0,a0,-1984 # 8000ca5c <__ascii_wctomb+0xf4>
80004224:	210050ef          	jal	ra,80009434 <printf>
                // Scheduling an event will incur a microstep
                // after the stop tag.
                _lf_recycle_event(e);
80004228:	fcc42503          	lw	a0,-52(s0)
8000422c:	eb8ff0ef          	jal	ra,800038e4 <_lf_recycle_event>
                return 0;
80004230:	00000793          	li	a5,0
80004234:	34c0006f          	j	80004580 <__schedule+0x5f8>
            }
            // Hook the event into the list.
            found->next = e;
80004238:	fe442783          	lw	a5,-28(s0)
8000423c:	fcc42703          	lw	a4,-52(s0)
80004240:	00e7ac23          	sw	a4,24(a5)
            return(0); // FIXME: return value
80004244:	00000793          	li	a5,0
80004248:	3380006f          	j	80004580 <__schedule+0x5f8>
        }
        // If there are not conflicts, schedule as usual. If intended time is
        // equal to the current logical time, the event will effectively be 
        // scheduled at the next microstep.
    } else if (!trigger->is_timer && existing != NULL) { 
8000424c:	f8c42783          	lw	a5,-116(s0)
80004250:	0087c783          	lbu	a5,8(a5)
80004254:	0017c793          	xori	a5,a5,1
80004258:	0ff7f793          	andi	a5,a5,255
8000425c:	26078263          	beqz	a5,800044c0 <__schedule+0x538>
80004260:	fc842783          	lw	a5,-56(s0)
80004264:	24078e63          	beqz	a5,800044c0 <__schedule+0x538>
        // There exists a previously scheduled event. It determines the
        // earliest time at which the new event can be scheduled.
        // Check to see whether the event is too early. 
        instant_t earliest_time = existing->time + min_spacing;
80004268:	fc842783          	lw	a5,-56(s0)
8000426c:	0007a583          	lw	a1,0(a5)
80004270:	0047a603          	lw	a2,4(a5)
80004274:	fd042683          	lw	a3,-48(s0)
80004278:	fd442703          	lw	a4,-44(s0)
8000427c:	00b687b3          	add	a5,a3,a1
80004280:	00078513          	mv	a0,a5
80004284:	00d53533          	sltu	a0,a0,a3
80004288:	00c70833          	add	a6,a4,a2
8000428c:	01050733          	add	a4,a0,a6
80004290:	00070813          	mv	a6,a4
80004294:	fcf42023          	sw	a5,-64(s0)
80004298:	fd042223          	sw	a6,-60(s0)
        //printf("DEBUG: >>> check min spacing <<<\n");
        //printf("DEBUG: earliest: %lld, tag: %lld\n", earliest_time, tag);
        // If the event is early, see which policy applies.
        if (earliest_time >= intended_time) {
8000429c:	fec42703          	lw	a4,-20(s0)
800042a0:	fc442783          	lw	a5,-60(s0)
800042a4:	22e7c063          	blt	a5,a4,800044c4 <__schedule+0x53c>
800042a8:	fec42703          	lw	a4,-20(s0)
800042ac:	fc442783          	lw	a5,-60(s0)
800042b0:	00f71863          	bne	a4,a5,800042c0 <__schedule+0x338>
800042b4:	fe842703          	lw	a4,-24(s0)
800042b8:	fc042783          	lw	a5,-64(s0)
800042bc:	20e7e463          	bltu	a5,a4,800044c4 <__schedule+0x53c>
            //printf("DEBUG: >>> early <<<\n");
            switch(trigger->policy) {
800042c0:	f8c42783          	lw	a5,-116(s0)
800042c4:	02c7a783          	lw	a5,44(a5)
800042c8:	00100713          	li	a4,1
800042cc:	00e78863          	beq	a5,a4,800042dc <__schedule+0x354>
800042d0:	00200713          	li	a4,2
800042d4:	06e78263          	beq	a5,a4,80004338 <__schedule+0x3b0>
800042d8:	1100006f          	j	800043e8 <__schedule+0x460>
                case drop:
                    //printf("DEBUG: >>> drop <<<\n");
                    if (min_spacing > 0 || 
800042dc:	fd442783          	lw	a5,-44(s0)
800042e0:	02f04863          	bgtz	a5,80004310 <__schedule+0x388>
800042e4:	fd442783          	lw	a5,-44(s0)
800042e8:	00079663          	bnez	a5,800042f4 <__schedule+0x36c>
800042ec:	fd042783          	lw	a5,-48(s0)
800042f0:	02079063          	bnez	a5,80004310 <__schedule+0x388>
                            pqueue_find_equal_same_priority(event_q, existing) != NULL) {
800042f4:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
800042f8:	0007a783          	lw	a5,0(a5)
800042fc:	fc842583          	lw	a1,-56(s0)
80004300:	00078513          	mv	a0,a5
80004304:	8bcfe0ef          	jal	ra,800023c0 <pqueue_find_equal_same_priority>
80004308:	00050793          	mv	a5,a0
                    if (min_spacing > 0 || 
8000430c:	02078663          	beqz	a5,80004338 <__schedule+0x3b0>
                        // Recycle the new event and the token.
                        if (existing->token != token) {
80004310:	fc842783          	lw	a5,-56(s0)
80004314:	0107a783          	lw	a5,16(a5)
80004318:	f8842703          	lw	a4,-120(s0)
8000431c:	00f70663          	beq	a4,a5,80004328 <__schedule+0x3a0>
                            __done_using(token);
80004320:	f8842503          	lw	a0,-120(s0)
80004324:	c19fe0ef          	jal	ra,80002f3c <__done_using>
                        }
                        _lf_recycle_event(e);
80004328:	fcc42503          	lw	a0,-52(s0)
8000432c:	db8ff0ef          	jal	ra,800038e4 <_lf_recycle_event>
                        return(0);
80004330:	00000793          	li	a5,0
80004334:	24c0006f          	j	80004580 <__schedule+0x5f8>
                    // existing->time < current_tag.time case below).
                    // NOTE: Because microsteps are not explicit, if the tag of
                    // the preceding event is equal to the current time, then
                    // we search the event queue to figure out whether it has
                    // been handled yet.
                    if (existing->time > current_tag.time ||
80004338:	fc842783          	lw	a5,-56(s0)
8000433c:	0007a683          	lw	a3,0(a5)
80004340:	0047a703          	lw	a4,4(a5)
80004344:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
80004348:	0047a803          	lw	a6,4(a5)
8000434c:	0007a783          	lw	a5,0(a5)
80004350:	00070593          	mv	a1,a4
80004354:	00080613          	mv	a2,a6
80004358:	06b64063          	blt	a2,a1,800043b8 <__schedule+0x430>
8000435c:	00070593          	mv	a1,a4
80004360:	00080613          	mv	a2,a6
80004364:	00c59663          	bne	a1,a2,80004370 <__schedule+0x3e8>
80004368:	00068713          	mv	a4,a3
8000436c:	04e7e663          	bltu	a5,a4,800043b8 <__schedule+0x430>
                            (existing->time == current_tag.time &&
80004370:	fc842783          	lw	a5,-56(s0)
80004374:	0007a683          	lw	a3,0(a5)
80004378:	0047a703          	lw	a4,4(a5)
8000437c:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
80004380:	0047a803          	lw	a6,4(a5)
80004384:	0007a783          	lw	a5,0(a5)
                    if (existing->time > current_tag.time ||
80004388:	00068593          	mv	a1,a3
8000438c:	00078613          	mv	a2,a5
80004390:	04c59263          	bne	a1,a2,800043d4 <__schedule+0x44c>
80004394:	00080793          	mv	a5,a6
80004398:	02f71e63          	bne	a4,a5,800043d4 <__schedule+0x44c>
                            pqueue_find_equal_same_priority(event_q, existing) != NULL)) {
8000439c:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
800043a0:	0007a783          	lw	a5,0(a5)
800043a4:	fc842583          	lw	a1,-56(s0)
800043a8:	00078513          	mv	a0,a5
800043ac:	814fe0ef          	jal	ra,800023c0 <pqueue_find_equal_same_priority>
800043b0:	00050793          	mv	a5,a0
                            (existing->time == current_tag.time &&
800043b4:	02078063          	beqz	a5,800043d4 <__schedule+0x44c>
                        // Recycle the existing token and the new event                        
                        // and update the token of the existing event.
                        _lf_replace_token(existing, token);
800043b8:	f8842583          	lw	a1,-120(s0)
800043bc:	fc842503          	lw	a0,-56(s0)
800043c0:	e64ff0ef          	jal	ra,80003a24 <_lf_replace_token>
                        _lf_recycle_event(e);
800043c4:	fcc42503          	lw	a0,-52(s0)
800043c8:	d1cff0ef          	jal	ra,800038e4 <_lf_recycle_event>
                        return(0);
800043cc:	00000793          	li	a5,0
800043d0:	1b00006f          	j	80004580 <__schedule+0x5f8>
                    }
                    // If the preceding event _has_ been handled, the adjust
                    // the tag to defer the event.
                    intended_time = earliest_time;
800043d4:	fc042783          	lw	a5,-64(s0)
800043d8:	fc442803          	lw	a6,-60(s0)
800043dc:	fef42423          	sw	a5,-24(s0)
800043e0:	ff042623          	sw	a6,-20(s0)
                    break;
800043e4:	0e00006f          	j	800044c4 <__schedule+0x53c>
                default:
                    if (existing->time == current_tag.time &&
800043e8:	fc842783          	lw	a5,-56(s0)
800043ec:	0007a683          	lw	a3,0(a5)
800043f0:	0047a703          	lw	a4,4(a5)
800043f4:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
800043f8:	0047a803          	lw	a6,4(a5)
800043fc:	0007a783          	lw	a5,0(a5)
80004400:	00068593          	mv	a1,a3
80004404:	00078613          	mv	a2,a5
80004408:	0ac59263          	bne	a1,a2,800044ac <__schedule+0x524>
8000440c:	00080793          	mv	a5,a6
80004410:	08f71e63          	bne	a4,a5,800044ac <__schedule+0x524>
                            pqueue_find_equal_same_priority(event_q, existing) != NULL) {
80004414:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
80004418:	0007a783          	lw	a5,0(a5)
8000441c:	fc842583          	lw	a1,-56(s0)
80004420:	00078513          	mv	a0,a5
80004424:	f9dfd0ef          	jal	ra,800023c0 <pqueue_find_equal_same_priority>
80004428:	00050793          	mv	a5,a0
                    if (existing->time == current_tag.time &&
8000442c:	08078063          	beqz	a5,800044ac <__schedule+0x524>
                        if (_lf_is_tag_after_stop_tag((tag_t){.time=existing->time,.microstep=get_microstep()+1})) {
80004430:	fc842783          	lw	a5,-56(s0)
80004434:	0047a803          	lw	a6,4(a5)
80004438:	0007a783          	lw	a5,0(a5)
8000443c:	faf42423          	sw	a5,-88(s0)
80004440:	fb042623          	sw	a6,-84(s0)
80004444:	c78fd0ef          	jal	ra,800018bc <get_microstep>
80004448:	00050793          	mv	a5,a0
8000444c:	00178793          	addi	a5,a5,1
80004450:	faf42823          	sw	a5,-80(s0)
80004454:	fa842603          	lw	a2,-88(s0)
80004458:	fac42683          	lw	a3,-84(s0)
8000445c:	fb042703          	lw	a4,-80(s0)
80004460:	fb442783          	lw	a5,-76(s0)
80004464:	f6c42823          	sw	a2,-144(s0)
80004468:	f6d42a23          	sw	a3,-140(s0)
8000446c:	f6e42c23          	sw	a4,-136(s0)
80004470:	f6f42e23          	sw	a5,-132(s0)
80004474:	f7040793          	addi	a5,s0,-144
80004478:	00078513          	mv	a0,a5
8000447c:	f49fe0ef          	jal	ra,800033c4 <_lf_is_tag_after_stop_tag>
80004480:	00050793          	mv	a5,a0
80004484:	00078a63          	beqz	a5,80004498 <__schedule+0x510>
                            // Scheduling e will incur a microstep at timeout, 
                            // which is illegal.
                            _lf_recycle_event(e);
80004488:	fcc42503          	lw	a0,-52(s0)
8000448c:	c58ff0ef          	jal	ra,800038e4 <_lf_recycle_event>
                            return 0;
80004490:	00000793          	li	a5,0
80004494:	0ec0006f          	j	80004580 <__schedule+0x5f8>
                        }
                        // If the last event hasn't been handled yet, insert
                        // the new event right behind.
                        existing->next = e;
80004498:	fc842783          	lw	a5,-56(s0)
8000449c:	fcc42703          	lw	a4,-52(s0)
800044a0:	00e7ac23          	sw	a4,24(a5)
                        return 0; // FIXME: return a value
800044a4:	00000793          	li	a5,0
800044a8:	0d80006f          	j	80004580 <__schedule+0x5f8>
                    } else {
                         // Adjust the tag.
                        intended_time = earliest_time;
800044ac:	fc042783          	lw	a5,-64(s0)
800044b0:	fc442803          	lw	a6,-60(s0)
800044b4:	fef42423          	sw	a5,-24(s0)
800044b8:	ff042623          	sw	a6,-20(s0)
                    }
                    break;
800044bc:	0080006f          	j	800044c4 <__schedule+0x53c>
            }
        }
800044c0:	00000013          	nop
    }

    // Set the tag of the event.
    e->time = intended_time;
800044c4:	fcc42703          	lw	a4,-52(s0)
800044c8:	fe842783          	lw	a5,-24(s0)
800044cc:	fec42803          	lw	a6,-20(s0)
800044d0:	00f72023          	sw	a5,0(a4)
800044d4:	01072223          	sw	a6,4(a4)

    // Do not schedule events if if the event time is past the stop time
    // (current microsteps are checked earlier).
    DEBUG_PRINT("Comparing event with elapsed time %lld against stop time %lld.", e->time - start_time, stop_tag.time - start_time);
    if (e->time > stop_tag.time) {
800044d8:	fcc42783          	lw	a5,-52(s0)
800044dc:	0007a683          	lw	a3,0(a5)
800044e0:	0047a703          	lw	a4,4(a5)
800044e4:	00009797          	auipc	a5,0x9
800044e8:	b9c78793          	addi	a5,a5,-1124 # 8000d080 <stop_tag>
800044ec:	0047a803          	lw	a6,4(a5)
800044f0:	0007a783          	lw	a5,0(a5)
800044f4:	00070593          	mv	a1,a4
800044f8:	00080613          	mv	a2,a6
800044fc:	00b64c63          	blt	a2,a1,80004514 <__schedule+0x58c>
80004500:	00070593          	mv	a1,a4
80004504:	00080613          	mv	a2,a6
80004508:	02c59263          	bne	a1,a2,8000452c <__schedule+0x5a4>
8000450c:	00068713          	mv	a4,a3
80004510:	00e7fe63          	bleu	a4,a5,8000452c <__schedule+0x5a4>
        DEBUG_PRINT("__schedule: event time is past the timeout. Discarding event.");
        __done_using(token);
80004514:	f8842503          	lw	a0,-120(s0)
80004518:	a25fe0ef          	jal	ra,80002f3c <__done_using>
        _lf_recycle_event(e);
8000451c:	fcc42503          	lw	a0,-52(s0)
80004520:	bc4ff0ef          	jal	ra,800038e4 <_lf_recycle_event>
        return(0);
80004524:	00000793          	li	a5,0
80004528:	0580006f          	j	80004580 <__schedule+0x5f8>
    }
    
    // Store a pointer to the current event in order to check the min spacing
    // between this and the following event. Only necessary for actions
    // that actually specify a min spacing.
    trigger->last = (event_t*)e;
8000452c:	f8c42783          	lw	a5,-116(s0)
80004530:	fcc42703          	lw	a4,-52(s0)
80004534:	02e7a423          	sw	a4,40(a5)
    // (time and microstep) have been pulled from the queue,
    // and any new events added at this tag will go into the reaction_q
    // rather than the event_q, so anything put in the event_q with this
    // same time will automatically be executed at the next microstep.
    DEBUG_PRINT("Inserting event in the event queue with elapsed time %lld.", e->time - start_time);
    pqueue_insert(event_q, e);
80004538:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
8000453c:	0007a783          	lw	a5,0(a5)
80004540:	fcc42583          	lw	a1,-52(s0)
80004544:	00078513          	mv	a0,a5
80004548:	f09fd0ef          	jal	ra,80002450 <pqueue_insert>

    // FIXME: make a record of handle and implement unschedule.
    // NOTE: Rather than wrapping around to get a negative number,
    // we reset the handle on the assumption that much earlier
    // handles are irrelevant.
    int return_value = __handle++;
8000454c:	81818793          	addi	a5,gp,-2024 # 8000da48 <__handle>
80004550:	0007a783          	lw	a5,0(a5)
80004554:	00178693          	addi	a3,a5,1
80004558:	81818713          	addi	a4,gp,-2024 # 8000da48 <__handle>
8000455c:	00d72023          	sw	a3,0(a4)
80004560:	faf42e23          	sw	a5,-68(s0)
    if (__handle < 0) {
80004564:	81818793          	addi	a5,gp,-2024 # 8000da48 <__handle>
80004568:	0007a783          	lw	a5,0(a5)
8000456c:	0007d863          	bgez	a5,8000457c <__schedule+0x5f4>
        __handle = 1;
80004570:	81818793          	addi	a5,gp,-2024 # 8000da48 <__handle>
80004574:	00100713          	li	a4,1
80004578:	00e7a023          	sw	a4,0(a5)
    }
    return return_value;
8000457c:	fbc42783          	lw	a5,-68(s0)
}
80004580:	00078513          	mv	a0,a5
80004584:	08c12083          	lw	ra,140(sp)
80004588:	08812403          	lw	s0,136(sp)
8000458c:	09010113          	addi	sp,sp,144
80004590:	00008067          	ret

80004594 <_lf_schedule_init_reactions>:
 *  then zero is used instead.
 * @param token The token wrapping the payload or NULL for no payload.
 * @return A handle to the event, or 0 if no new event was scheduled because the function
 *  was called incorrectly.
 */
handle_t _lf_schedule_init_reactions(trigger_t* trigger, interval_t extra_delay, lf_token_t* token) {
80004594:	fd010113          	addi	sp,sp,-48
80004598:	02112623          	sw	ra,44(sp)
8000459c:	02812423          	sw	s0,40(sp)
800045a0:	03010413          	addi	s0,sp,48
800045a4:	fca42e23          	sw	a0,-36(s0)
800045a8:	fcb42823          	sw	a1,-48(s0)
800045ac:	fcc42a23          	sw	a2,-44(s0)
800045b0:	fcd42c23          	sw	a3,-40(s0)
    // Check to see if the execution
    // has not started yet.
    if (_lf_execution_started) {
800045b4:	85018793          	addi	a5,gp,-1968 # 8000da80 <_lf_execution_started>
800045b8:	0007c783          	lbu	a5,0(a5)
800045bc:	00078663          	beqz	a5,800045c8 <_lf_schedule_init_reactions+0x34>
        DEBUG_PRINT("Execution has already started.");
        return 0;
800045c0:	00000793          	li	a5,0
800045c4:	1c40006f          	j	80004788 <_lf_schedule_init_reactions+0x1f4>
    }
    
    // Check to see if we are actually at startup
    // FIXME: add microsteps
    if (current_tag.time != start_time) {
800045c8:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
800045cc:	0007a683          	lw	a3,0(a5)
800045d0:	0047a703          	lw	a4,4(a5)
800045d4:	00009797          	auipc	a5,0x9
800045d8:	46478793          	addi	a5,a5,1124 # 8000da38 <start_time>
800045dc:	0047a803          	lw	a6,4(a5)
800045e0:	0007a783          	lw	a5,0(a5)
800045e4:	00068593          	mv	a1,a3
800045e8:	00078613          	mv	a2,a5
800045ec:	00c59663          	bne	a1,a2,800045f8 <_lf_schedule_init_reactions+0x64>
800045f0:	00080793          	mv	a5,a6
800045f4:	00f70663          	beq	a4,a5,80004600 <_lf_schedule_init_reactions+0x6c>
        return 0;
800045f8:	00000793          	li	a5,0
800045fc:	18c0006f          	j	80004788 <_lf_schedule_init_reactions+0x1f4>
    }

    // The trigger argument could be null, meaning that nothing is triggered.
    // Doing this after incrementing the reference count ensures that the
    // payload will be freed, if there is one.
	if (trigger == NULL) {
80004600:	fdc42783          	lw	a5,-36(s0)
80004604:	00079a63          	bnez	a5,80004618 <_lf_schedule_init_reactions+0x84>
	    __done_using(token);
80004608:	fd842503          	lw	a0,-40(s0)
8000460c:	931fe0ef          	jal	ra,80002f3c <__done_using>
	    return 0;
80004610:	00000793          	li	a5,0
80004614:	1740006f          	j	80004788 <_lf_schedule_init_reactions+0x1f4>
	}

    // Check to see if the intended event will actually be scheduled at (0,0)
    if ((trigger->offset + extra_delay) != 0LL) {
80004618:	fdc42783          	lw	a5,-36(s0)
8000461c:	0147a803          	lw	a6,20(a5)
80004620:	0107a783          	lw	a5,16(a5)
80004624:	fd042583          	lw	a1,-48(s0)
80004628:	fd442603          	lw	a2,-44(s0)
8000462c:	00b786b3          	add	a3,a5,a1
80004630:	00068513          	mv	a0,a3
80004634:	00f53533          	sltu	a0,a0,a5
80004638:	00c80733          	add	a4,a6,a2
8000463c:	00e507b3          	add	a5,a0,a4
80004640:	00078713          	mv	a4,a5
80004644:	00068793          	mv	a5,a3
80004648:	00e7e7b3          	or	a5,a5,a4
8000464c:	00078663          	beqz	a5,80004658 <_lf_schedule_init_reactions+0xc4>
        return 0;
80004650:	00000793          	li	a5,0
80004654:	1340006f          	j	80004788 <_lf_schedule_init_reactions+0x1f4>
    }
    
    // Check to see if the trigger is not a timer
    // and not a physical action
    if (trigger->is_timer || trigger->is_physical) {
80004658:	fdc42783          	lw	a5,-36(s0)
8000465c:	0087c783          	lbu	a5,8(a5)
80004660:	00079863          	bnez	a5,80004670 <_lf_schedule_init_reactions+0xdc>
80004664:	fdc42783          	lw	a5,-36(s0)
80004668:	0247c783          	lbu	a5,36(a5)
8000466c:	00078663          	beqz	a5,80004678 <_lf_schedule_init_reactions+0xe4>
        return 0;
80004670:	00000793          	li	a5,0
80004674:	1140006f          	j	80004788 <_lf_schedule_init_reactions+0x1f4>
#endif

    // Copy the token pointer into the trigger struct so that the
    // reactions can access it. This overwrites the previous template token,
    // for which we decrement the reference count.
    if (trigger->token != token && trigger->token != NULL) {
80004678:	fdc42783          	lw	a5,-36(s0)
8000467c:	0207a783          	lw	a5,32(a5)
80004680:	fd842703          	lw	a4,-40(s0)
80004684:	04f70263          	beq	a4,a5,800046c8 <_lf_schedule_init_reactions+0x134>
80004688:	fdc42783          	lw	a5,-36(s0)
8000468c:	0207a783          	lw	a5,32(a5)
80004690:	02078c63          	beqz	a5,800046c8 <_lf_schedule_init_reactions+0x134>
        // Mark the previous one ok_to_free so we don't get a memory leak.
        trigger->token->ok_to_free = OK_TO_FREE;
80004694:	fdc42783          	lw	a5,-36(s0)
80004698:	0207a783          	lw	a5,32(a5)
8000469c:	00100713          	li	a4,1
800046a0:	00e7a823          	sw	a4,16(a5)
        // Free the token if its reference count is zero. Since __done_using
        // decrements the reference count, first increment it here.
        trigger->token->ref_count++;
800046a4:	fdc42783          	lw	a5,-36(s0)
800046a8:	0207a783          	lw	a5,32(a5)
800046ac:	00c7a703          	lw	a4,12(a5)
800046b0:	00170713          	addi	a4,a4,1
800046b4:	00e7a623          	sw	a4,12(a5)
        __done_using(trigger->token);
800046b8:	fdc42783          	lw	a5,-36(s0)
800046bc:	0207a783          	lw	a5,32(a5)
800046c0:	00078513          	mv	a0,a5
800046c4:	879fe0ef          	jal	ra,80002f3c <__done_using>
    }
    trigger->token = token;
800046c8:	fdc42783          	lw	a5,-36(s0)
800046cc:	fd842703          	lw	a4,-40(s0)
800046d0:	02e7a023          	sw	a4,32(a5)
    // Prevent this token from being freed. It is the new template.
    // This might be null if there are no reactions to the action.
    if (token != NULL) {
800046d4:	fd842783          	lw	a5,-40(s0)
800046d8:	00078663          	beqz	a5,800046e4 <_lf_schedule_init_reactions+0x150>
        token->ok_to_free = no;
800046dc:	fd842783          	lw	a5,-40(s0)
800046e0:	0007a823          	sw	zero,16(a5)
    // Push the corresponding reactions for this trigger
    // onto the reaction queue.
    // NOTE: This is allowed because
    // when this is called, the execution has not started
    // and the (0,0) tag has not been acquired yet.
    for (int i = 0; i < trigger->number_of_reactions; i++) {
800046e4:	fe042623          	sw	zero,-20(s0)
800046e8:	05c0006f          	j	80004744 <_lf_schedule_init_reactions+0x1b0>
        reaction_t* reaction = trigger->reactions[i];
800046ec:	fdc42783          	lw	a5,-36(s0)
800046f0:	0007a703          	lw	a4,0(a5)
800046f4:	fec42783          	lw	a5,-20(s0)
800046f8:	00279793          	slli	a5,a5,0x2
800046fc:	00f707b3          	add	a5,a4,a5
80004700:	0007a783          	lw	a5,0(a5)
80004704:	fef42223          	sw	a5,-28(s0)
        // Do not enqueue this reaction twice.
        if (pqueue_find_equal_same_priority(reaction_q, reaction) == NULL) {
80004708:	87c18793          	addi	a5,gp,-1924 # 8000daac <reaction_q>
8000470c:	0007a783          	lw	a5,0(a5)
80004710:	fe442583          	lw	a1,-28(s0)
80004714:	00078513          	mv	a0,a5
80004718:	ca9fd0ef          	jal	ra,800023c0 <pqueue_find_equal_same_priority>
8000471c:	00050793          	mv	a5,a0
80004720:	00079c63          	bnez	a5,80004738 <_lf_schedule_init_reactions+0x1a4>
            pqueue_insert(reaction_q, reaction);
80004724:	87c18793          	addi	a5,gp,-1924 # 8000daac <reaction_q>
80004728:	0007a783          	lw	a5,0(a5)
8000472c:	fe442583          	lw	a1,-28(s0)
80004730:	00078513          	mv	a0,a5
80004734:	d1dfd0ef          	jal	ra,80002450 <pqueue_insert>
    for (int i = 0; i < trigger->number_of_reactions; i++) {
80004738:	fec42783          	lw	a5,-20(s0)
8000473c:	00178793          	addi	a5,a5,1
80004740:	fef42623          	sw	a5,-20(s0)
80004744:	fdc42783          	lw	a5,-36(s0)
80004748:	0047a783          	lw	a5,4(a5)
8000474c:	fec42703          	lw	a4,-20(s0)
80004750:	f8f74ee3          	blt	a4,a5,800046ec <_lf_schedule_init_reactions+0x158>

    // FIXME: make a record of handle and implement unschedule.
    // NOTE: Rather than wrapping around to get a negative number,
    // we reset the handle on the assumption that much earlier
    // handles are irrelevant.
    int return_value = __handle++;
80004754:	81818793          	addi	a5,gp,-2024 # 8000da48 <__handle>
80004758:	0007a783          	lw	a5,0(a5)
8000475c:	00178693          	addi	a3,a5,1
80004760:	81818713          	addi	a4,gp,-2024 # 8000da48 <__handle>
80004764:	00d72023          	sw	a3,0(a4)
80004768:	fef42423          	sw	a5,-24(s0)
    if (__handle < 0) { 
8000476c:	81818793          	addi	a5,gp,-2024 # 8000da48 <__handle>
80004770:	0007a783          	lw	a5,0(a5)
80004774:	0007d863          	bgez	a5,80004784 <_lf_schedule_init_reactions+0x1f0>
        __handle = 1;
80004778:	81818793          	addi	a5,gp,-2024 # 8000da48 <__handle>
8000477c:	00100713          	li	a4,1
80004780:	00e7a023          	sw	a4,0(a5)
    }
    return return_value;
80004784:	fe842783          	lw	a5,-24(s0)
}
80004788:	00078513          	mv	a0,a5
8000478c:	02c12083          	lw	ra,44(sp)
80004790:	02812403          	lw	s0,40(sp)
80004794:	03010113          	addi	sp,sp,48
80004798:	00008067          	ret

8000479c <_lf_action_to_trigger>:
 * struct.  This function uses this fact to return a pointer to that
 * trigger_t struct.
 * @param action A pointer to an action struct.
 * @return A pointer to the corresponding trigger struct.
 */
trigger_t* _lf_action_to_trigger(void* action) {
8000479c:	fe010113          	addi	sp,sp,-32
800047a0:	00812e23          	sw	s0,28(sp)
800047a4:	02010413          	addi	s0,sp,32
800047a8:	fea42623          	sw	a0,-20(s0)
    return *((trigger_t**)action);
800047ac:	fec42783          	lw	a5,-20(s0)
800047b0:	0007a783          	lw	a5,0(a5)
}
800047b4:	00078513          	mv	a0,a5
800047b8:	01c12403          	lw	s0,28(sp)
800047bc:	02010113          	addi	sp,sp,32
800047c0:	00008067          	ret

800047c4 <_lf_advance_logical_time>:
 * the current time, then increase the microstep. Otherwise, update the current
 * time and set the microstep to zero.
 * 
 * @param next_time The time step to advance to.
 */ 
void _lf_advance_logical_time(instant_t next_time) {
800047c4:	fe010113          	addi	sp,sp,-32
800047c8:	00812e23          	sw	s0,28(sp)
800047cc:	02010413          	addi	s0,sp,32
800047d0:	fea42423          	sw	a0,-24(s0)
800047d4:	feb42623          	sw	a1,-20(s0)
    if (current_tag.time != next_time) {
800047d8:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
800047dc:	0047a803          	lw	a6,4(a5)
800047e0:	0007a783          	lw	a5,0(a5)
800047e4:	fe842703          	lw	a4,-24(s0)
800047e8:	00078693          	mv	a3,a5
800047ec:	00d71863          	bne	a4,a3,800047fc <_lf_advance_logical_time+0x38>
800047f0:	fec42703          	lw	a4,-20(s0)
800047f4:	00080793          	mv	a5,a6
800047f8:	02f70263          	beq	a4,a5,8000481c <_lf_advance_logical_time+0x58>
        current_tag.time = next_time;
800047fc:	8b818713          	addi	a4,gp,-1864 # 8000dae8 <current_tag>
80004800:	fe842783          	lw	a5,-24(s0)
80004804:	fec42803          	lw	a6,-20(s0)
80004808:	00f72023          	sw	a5,0(a4)
8000480c:	01072223          	sw	a6,4(a4)
        current_tag.microstep = 0;
80004810:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
80004814:	0007a423          	sw	zero,8(a5)
    } else {
        current_tag.microstep++;
    }
    DEBUG_PRINT("Advanced logical tag to (%lld, %u)", next_time - start_time, current_tag.microstep);
}
80004818:	0180006f          	j	80004830 <_lf_advance_logical_time+0x6c>
        current_tag.microstep++;
8000481c:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
80004820:	0087a783          	lw	a5,8(a5)
80004824:	00178713          	addi	a4,a5,1
80004828:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
8000482c:	00e7a423          	sw	a4,8(a5)
}
80004830:	00000013          	nop
80004834:	01c12403          	lw	s0,28(sp)
80004838:	02010113          	addi	sp,sp,32
8000483c:	00008067          	ret

80004840 <_lf_schedule_int>:
/**
 * Variant of schedule_value when the value is an integer.
 * See reactor.h for documentation.
 * @param action Pointer to an action on the self struct.
 */
handle_t _lf_schedule_int(void* action, interval_t extra_delay, int value) {
80004840:	fd010113          	addi	sp,sp,-48
80004844:	02112623          	sw	ra,44(sp)
80004848:	02812423          	sw	s0,40(sp)
8000484c:	03010413          	addi	s0,sp,48
80004850:	fca42e23          	sw	a0,-36(s0)
80004854:	fcb42823          	sw	a1,-48(s0)
80004858:	fcc42a23          	sw	a2,-44(s0)
8000485c:	fcd42c23          	sw	a3,-40(s0)
    trigger_t* trigger = _lf_action_to_trigger(action);
80004860:	fdc42503          	lw	a0,-36(s0)
80004864:	f39ff0ef          	jal	ra,8000479c <_lf_action_to_trigger>
80004868:	fea42623          	sw	a0,-20(s0)
    // NOTE: This doesn't acquire the mutex lock in the multithreaded version
    // until schedule_value is called. This should be OK because the element_size
    // does not change dynamically.
    if (trigger->element_size != sizeof(int)) {
8000486c:	fec42783          	lw	a5,-20(s0)
80004870:	0307a703          	lw	a4,48(a5)
80004874:	00400793          	li	a5,4
80004878:	00f70663          	beq	a4,a5,80004884 <_lf_schedule_int+0x44>
        // fprintf(stderr, "Action type is not an integer.");
        return -1;
8000487c:	fff00793          	li	a5,-1
80004880:	03c0006f          	j	800048bc <_lf_schedule_int+0x7c>
    }
    int* container = (int*)malloc(sizeof(int));
80004884:	00400513          	li	a0,4
80004888:	155060ef          	jal	ra,8000b1dc <malloc>
8000488c:	00050793          	mv	a5,a0
80004890:	fef42423          	sw	a5,-24(s0)
    *container = value;
80004894:	fe842783          	lw	a5,-24(s0)
80004898:	fd842703          	lw	a4,-40(s0)
8000489c:	00e7a023          	sw	a4,0(a5)
    return _lf_schedule_value(action, extra_delay, container, 1);
800048a0:	00100713          	li	a4,1
800048a4:	fe842683          	lw	a3,-24(s0)
800048a8:	fd042583          	lw	a1,-48(s0)
800048ac:	fd442603          	lw	a2,-44(s0)
800048b0:	fdc42503          	lw	a0,-36(s0)
800048b4:	318010ef          	jal	ra,80005bcc <_lf_schedule_value>
800048b8:	00050793          	mv	a5,a0
}
800048bc:	00078513          	mv	a0,a5
800048c0:	02c12083          	lw	ra,44(sp)
800048c4:	02812403          	lw	s0,40(sp)
800048c8:	03010113          	addi	sp,sp,48
800048cc:	00008067          	ret

800048d0 <__set_new_array_impl>:
 * @param length The length of the array.
 * @param num_destinations The number of destinations (for initializing the reference count).
 * @return A pointer to the new or reused token or null if the template token
 *  is incompatible with this usage.
 */
lf_token_t* __set_new_array_impl(lf_token_t* token, int length, int num_destinations) {
800048d0:	fd010113          	addi	sp,sp,-48
800048d4:	02112623          	sw	ra,44(sp)
800048d8:	02812423          	sw	s0,40(sp)
800048dc:	03010413          	addi	s0,sp,48
800048e0:	fca42e23          	sw	a0,-36(s0)
800048e4:	fcb42c23          	sw	a1,-40(s0)
800048e8:	fcc42a23          	sw	a2,-44(s0)
    // If the template token cannot carry a payload, then it is incompatible.
    if (token->element_size == 0) {
800048ec:	fdc42783          	lw	a5,-36(s0)
800048f0:	0047a783          	lw	a5,4(a5)
800048f4:	00079663          	bnez	a5,80004900 <__set_new_array_impl+0x30>
        // fprintf(stderr, "ERROR: set_new_array: specified token cannot carry an array. It has zero element_size.\n");
        return NULL;
800048f8:	00000793          	li	a5,0
800048fc:	0240006f          	j	80004920 <__set_new_array_impl+0x50>
    }
    // First, initialize the token, reusing the one given if possible.
    lf_token_t* new_token = __initialize_token(token, length);
80004900:	fd842583          	lw	a1,-40(s0)
80004904:	fdc42503          	lw	a0,-36(s0)
80004908:	a49fe0ef          	jal	ra,80003350 <__initialize_token>
8000490c:	fea42623          	sw	a0,-20(s0)
    new_token->ref_count = num_destinations;
80004910:	fec42783          	lw	a5,-20(s0)
80004914:	fd442703          	lw	a4,-44(s0)
80004918:	00e7a623          	sw	a4,12(a5)
    DEBUG_PRINT("__set_new_array_impl: Allocated memory for payload %p.", new_token->value);
    return new_token;
8000491c:	fec42783          	lw	a5,-20(s0)
}
80004920:	00078513          	mv	a0,a5
80004924:	02c12083          	lw	ra,44(sp)
80004928:	02812403          	lw	s0,40(sp)
8000492c:	03010113          	addi	sp,sp,48
80004930:	00008067          	ret

80004934 <schedule_output_reactions>:
 * This procedure assumes the mutex lock is not held and grabs
 * the lock only when it actually inserts something onto the reaction queue.
 * @param reaction The reaction that has just executed.
 * @param worker The thread number of the worker thread or 0 for unthreaded execution (for tracing).
 */
void schedule_output_reactions(reaction_t* reaction, int worker) {
80004934:	f9010113          	addi	sp,sp,-112
80004938:	06112623          	sw	ra,108(sp)
8000493c:	06812423          	sw	s0,104(sp)
80004940:	07212223          	sw	s2,100(sp)
80004944:	07312023          	sw	s3,96(sp)
80004948:	05412e23          	sw	s4,92(sp)
8000494c:	05512c23          	sw	s5,88(sp)
80004950:	05612a23          	sw	s6,84(sp)
80004954:	05712823          	sw	s7,80(sp)
80004958:	07010413          	addi	s0,sp,112
8000495c:	f8a42e23          	sw	a0,-100(s0)
80004960:	f8b42c23          	sw	a1,-104(s0)
    // If the reaction produced outputs, put the resulting triggered
    // reactions into the reaction queue. As an optimization, if exactly one
    // downstream reaction is enabled by this reaction, then it may be
    // executed immediately in this same thread
    // without going through the reaction queue.
    reaction_t* downstream_to_execute_now = NULL;
80004964:	fc042423          	sw	zero,-56(s0)
    int num_downstream_reactions = 0;
80004968:	fc042823          	sw	zero,-48(s0)
#ifdef _LF_COORD_DECENTRALIZED // Only pass down tardiness for federated programs that use decentralized coordination.
    // Extract the inherited tardiness
    bool inherited_tardiness = reaction->is_tardy;
#endif
    DEBUG_PRINT("There are %d outputs from reaction %p.", reaction->num_outputs, reaction);
    for (int i=0; i < reaction->num_outputs; i++) {
8000496c:	fc042623          	sw	zero,-52(s0)
80004970:	1440006f          	j	80004ab4 <schedule_output_reactions+0x180>
        if (*(reaction->output_produced[i])) {
80004974:	f9c42783          	lw	a5,-100(s0)
80004978:	02c7a703          	lw	a4,44(a5)
8000497c:	fcc42783          	lw	a5,-52(s0)
80004980:	00279793          	slli	a5,a5,0x2
80004984:	00f707b3          	add	a5,a4,a5
80004988:	0007a783          	lw	a5,0(a5)
8000498c:	0007c783          	lbu	a5,0(a5)
80004990:	10078c63          	beqz	a5,80004aa8 <schedule_output_reactions+0x174>
            DEBUG_PRINT("Output %d has been produced.", i);
            trigger_t** triggerArray = (reaction->triggers)[i];
80004994:	f9c42783          	lw	a5,-100(s0)
80004998:	0347a703          	lw	a4,52(a5)
8000499c:	fcc42783          	lw	a5,-52(s0)
800049a0:	00279793          	slli	a5,a5,0x2
800049a4:	00f707b3          	add	a5,a4,a5
800049a8:	0007a783          	lw	a5,0(a5)
800049ac:	faf42c23          	sw	a5,-72(s0)
            DEBUG_PRINT("There are %d trigger arrays associated with output %d.", reaction->triggered_sizes[i], i);
            for (int j=0; j < reaction->triggered_sizes[i]; j++) {
800049b0:	fc042c23          	sw	zero,-40(s0)
800049b4:	0d40006f          	j	80004a88 <schedule_output_reactions+0x154>
                trigger_t* trigger = triggerArray[j];
800049b8:	fd842783          	lw	a5,-40(s0)
800049bc:	00279793          	slli	a5,a5,0x2
800049c0:	fb842703          	lw	a4,-72(s0)
800049c4:	00f707b3          	add	a5,a4,a5
800049c8:	0007a783          	lw	a5,0(a5)
800049cc:	faf42a23          	sw	a5,-76(s0)
                if (trigger != NULL) {
800049d0:	fb442783          	lw	a5,-76(s0)
800049d4:	0a078463          	beqz	a5,80004a7c <schedule_output_reactions+0x148>
                    DEBUG_PRINT("Trigger %p lists %d reactions.", trigger, trigger->number_of_reactions);
                    for (int k=0; k < trigger->number_of_reactions; k++) {
800049d8:	fc042a23          	sw	zero,-44(s0)
800049dc:	0900006f          	j	80004a6c <schedule_output_reactions+0x138>
                        reaction_t* downstream_reaction = trigger->reactions[k];
800049e0:	fb442783          	lw	a5,-76(s0)
800049e4:	0007a703          	lw	a4,0(a5)
800049e8:	fd442783          	lw	a5,-44(s0)
800049ec:	00279793          	slli	a5,a5,0x2
800049f0:	00f707b3          	add	a5,a4,a5
800049f4:	0007a783          	lw	a5,0(a5)
800049f8:	faf42823          	sw	a5,-80(s0)
#ifdef _LF_COORD_DECENTRALIZED // Only pass down tardiness for federated LF programs
                        // Set the tardiness for the downstream reaction
                        downstream_reaction->is_tardy = inherited_tardiness;
                        DEBUG_PRINT("Passing tardiness of %d to the downstream reaction.", downstream_reaction->is_tardy);
#endif
                        if (downstream_reaction != NULL && downstream_reaction != downstream_to_execute_now) {
800049fc:	fb042783          	lw	a5,-80(s0)
80004a00:	06078063          	beqz	a5,80004a60 <schedule_output_reactions+0x12c>
80004a04:	fb042703          	lw	a4,-80(s0)
80004a08:	fc842783          	lw	a5,-56(s0)
80004a0c:	04f70a63          	beq	a4,a5,80004a60 <schedule_output_reactions+0x12c>
                            num_downstream_reactions++;
80004a10:	fd042783          	lw	a5,-48(s0)
80004a14:	00178793          	addi	a5,a5,1
80004a18:	fcf42823          	sw	a5,-48(s0)
                            // reaction, then we can execute that reaction immediately without
                            // going through the reaction queue. In multithreaded execution, this
                            // avoids acquiring a mutex lock.
                            // FIXME: Check the earliest deadline on the reaction queue.
                            // This optimization could violate EDF scheduling otherwise.
                            if (num_downstream_reactions == 1 && downstream_reaction->last_enabling_reaction == reaction) {
80004a1c:	fd042703          	lw	a4,-48(s0)
80004a20:	00100793          	li	a5,1
80004a24:	02f71063          	bne	a4,a5,80004a44 <schedule_output_reactions+0x110>
80004a28:	fb042783          	lw	a5,-80(s0)
80004a2c:	0247a783          	lw	a5,36(a5)
80004a30:	f9c42703          	lw	a4,-100(s0)
80004a34:	00f71863          	bne	a4,a5,80004a44 <schedule_output_reactions+0x110>
                                // So far, this downstream reaction is a candidate to execute now.
                                downstream_to_execute_now = downstream_reaction;
80004a38:	fb042783          	lw	a5,-80(s0)
80004a3c:	fcf42423          	sw	a5,-56(s0)
80004a40:	0200006f          	j	80004a60 <schedule_output_reactions+0x12c>
                            } else {
                                // If there is a previous candidate reaction to execute now,
                                // it is no longer a candidate.
                                if (downstream_to_execute_now != NULL) {
80004a44:	fc842783          	lw	a5,-56(s0)
80004a48:	00078863          	beqz	a5,80004a58 <schedule_output_reactions+0x124>
                                    // In this case, if we were to execute the downstream reaction
                                    // immediately without changing any queues, then the second
                                    // downstream reaction would be blocked because this reaction
                                    // remains on the executing queue. Hence, the optimization
                                    // is not valid. Put the candidate reaction on the queue.
                                    _lf_enqueue_reaction(downstream_to_execute_now);
80004a4c:	fc842503          	lw	a0,-56(s0)
80004a50:	490010ef          	jal	ra,80005ee0 <_lf_enqueue_reaction>
                                    downstream_to_execute_now = NULL;
80004a54:	fc042423          	sw	zero,-56(s0)
                                }
                                // Queue the reaction.
                                _lf_enqueue_reaction(downstream_reaction);
80004a58:	fb042503          	lw	a0,-80(s0)
80004a5c:	484010ef          	jal	ra,80005ee0 <_lf_enqueue_reaction>
                    for (int k=0; k < trigger->number_of_reactions; k++) {
80004a60:	fd442783          	lw	a5,-44(s0)
80004a64:	00178793          	addi	a5,a5,1
80004a68:	fcf42a23          	sw	a5,-44(s0)
80004a6c:	fb442783          	lw	a5,-76(s0)
80004a70:	0047a783          	lw	a5,4(a5)
80004a74:	fd442703          	lw	a4,-44(s0)
80004a78:	f6f744e3          	blt	a4,a5,800049e0 <schedule_output_reactions+0xac>
            for (int j=0; j < reaction->triggered_sizes[i]; j++) {
80004a7c:	fd842783          	lw	a5,-40(s0)
80004a80:	00178793          	addi	a5,a5,1
80004a84:	fcf42c23          	sw	a5,-40(s0)
80004a88:	f9c42783          	lw	a5,-100(s0)
80004a8c:	0307a703          	lw	a4,48(a5)
80004a90:	fcc42783          	lw	a5,-52(s0)
80004a94:	00279793          	slli	a5,a5,0x2
80004a98:	00f707b3          	add	a5,a4,a5
80004a9c:	0007a783          	lw	a5,0(a5)
80004aa0:	fd842703          	lw	a4,-40(s0)
80004aa4:	f0f74ae3          	blt	a4,a5,800049b8 <schedule_output_reactions+0x84>
    for (int i=0; i < reaction->num_outputs; i++) {
80004aa8:	fcc42783          	lw	a5,-52(s0)
80004aac:	00178793          	addi	a5,a5,1
80004ab0:	fcf42623          	sw	a5,-52(s0)
80004ab4:	f9c42783          	lw	a5,-100(s0)
80004ab8:	0287a783          	lw	a5,40(a5)
80004abc:	fcc42703          	lw	a4,-52(s0)
80004ac0:	eaf74ae3          	blt	a4,a5,80004974 <schedule_output_reactions+0x40>
                    }
                }
            }
        }
    }
    if (downstream_to_execute_now != NULL) {
80004ac4:	fc842783          	lw	a5,-56(s0)
80004ac8:	16078e63          	beqz	a5,80004c44 <schedule_output_reactions+0x310>
        //  printf("DEBUG: Optimizing and executing downstream reaction now.\n");
        bool violation = false;
80004acc:	fc040fa3          	sb	zero,-33(s0)
                downstream_to_execute_now->is_tardy = false;
                DEBUG_PRINT("Reset reaction's is_tardy field to false.");
            }
        }
#endif
        if (downstream_to_execute_now->deadline > 0LL) {
80004ad0:	fc842783          	lw	a5,-56(s0)
80004ad4:	0447a803          	lw	a6,68(a5)
80004ad8:	0407a783          	lw	a5,64(a5)
80004adc:	00080713          	mv	a4,a6
80004ae0:	00e04863          	bgtz	a4,80004af0 <schedule_output_reactions+0x1bc>
80004ae4:	00080713          	mv	a4,a6
80004ae8:	12071063          	bnez	a4,80004c08 <schedule_output_reactions+0x2d4>
80004aec:	10078e63          	beqz	a5,80004c08 <schedule_output_reactions+0x2d4>
            // Get the current physical time.
            struct timespec current_physical_time;
            clock_gettime(CLOCK_REALTIME, &current_physical_time);
80004af0:	fa840793          	addi	a5,s0,-88
80004af4:	00078593          	mv	a1,a5
80004af8:	00100513          	li	a0,1
80004afc:	77d000ef          	jal	ra,80005a78 <clock_gettime>
            // Convert to instant_t.
            instant_t physical_time =
                    current_physical_time.tv_sec * BILLION
80004b00:	fa842783          	lw	a5,-88(s0)
80004b04:	00078a13          	mv	s4,a5
80004b08:	41f7d793          	srai	a5,a5,0x1f
80004b0c:	00078a93          	mv	s5,a5
80004b10:	3b9ad7b7          	lui	a5,0x3b9ad
80004b14:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80004b18:	02fa8733          	mul	a4,s5,a5
80004b1c:	00000793          	li	a5,0
80004b20:	02fa07b3          	mul	a5,s4,a5
80004b24:	00f70733          	add	a4,a4,a5
80004b28:	3b9ad7b7          	lui	a5,0x3b9ad
80004b2c:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80004b30:	02fa06b3          	mul	a3,s4,a5
80004b34:	02fa39b3          	mulhu	s3,s4,a5
80004b38:	00068913          	mv	s2,a3
80004b3c:	013707b3          	add	a5,a4,s3
80004b40:	00078993          	mv	s3,a5
                    + current_physical_time.tv_nsec;
80004b44:	fac42783          	lw	a5,-84(s0)
80004b48:	00078b13          	mv	s6,a5
80004b4c:	41f7d793          	srai	a5,a5,0x1f
80004b50:	00078b93          	mv	s7,a5
            instant_t physical_time =
80004b54:	016907b3          	add	a5,s2,s6
80004b58:	00078713          	mv	a4,a5
80004b5c:	01273733          	sltu	a4,a4,s2
80004b60:	01798833          	add	a6,s3,s7
80004b64:	01070733          	add	a4,a4,a6
80004b68:	00070813          	mv	a6,a4
80004b6c:	fcf42023          	sw	a5,-64(s0)
80004b70:	fd042223          	sw	a6,-60(s0)
            // Check for deadline violation.
            if (physical_time > current_tag.time + downstream_to_execute_now->deadline) {
80004b74:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
80004b78:	0047a803          	lw	a6,4(a5)
80004b7c:	0007a783          	lw	a5,0(a5)
80004b80:	fc842703          	lw	a4,-56(s0)
80004b84:	04072583          	lw	a1,64(a4)
80004b88:	04472603          	lw	a2,68(a4)
80004b8c:	00b786b3          	add	a3,a5,a1
80004b90:	00068513          	mv	a0,a3
80004b94:	00f53533          	sltu	a0,a0,a5
80004b98:	00c80733          	add	a4,a6,a2
80004b9c:	00e507b3          	add	a5,a0,a4
80004ba0:	00078713          	mv	a4,a5
80004ba4:	00068793          	mv	a5,a3
80004ba8:	00070813          	mv	a6,a4
80004bac:	fc442703          	lw	a4,-60(s0)
80004bb0:	00080693          	mv	a3,a6
80004bb4:	00e6cc63          	blt	a3,a4,80004bcc <schedule_output_reactions+0x298>
80004bb8:	fc442703          	lw	a4,-60(s0)
80004bbc:	00080693          	mv	a3,a6
80004bc0:	04d71463          	bne	a4,a3,80004c08 <schedule_output_reactions+0x2d4>
80004bc4:	fc042703          	lw	a4,-64(s0)
80004bc8:	04e7f063          	bleu	a4,a5,80004c08 <schedule_output_reactions+0x2d4>
                // Deadline violation has occurred.
                violation = true;
80004bcc:	00100793          	li	a5,1
80004bd0:	fcf40fa3          	sb	a5,-33(s0)
                // Invoke the local handler, if there is one.
                reaction_function_t handler = downstream_to_execute_now->deadline_violation_handler;
80004bd4:	fc842783          	lw	a5,-56(s0)
80004bd8:	04c7a783          	lw	a5,76(a5)
80004bdc:	faf42e23          	sw	a5,-68(s0)
                if (handler != NULL) {
80004be0:	fbc42783          	lw	a5,-68(s0)
80004be4:	02078263          	beqz	a5,80004c08 <schedule_output_reactions+0x2d4>
                    // Assume the mutex is still not held.
                    (*handler)(downstream_to_execute_now->self);
80004be8:	fc842783          	lw	a5,-56(s0)
80004bec:	0047a783          	lw	a5,4(a5)
80004bf0:	fbc42703          	lw	a4,-68(s0)
80004bf4:	00078513          	mv	a0,a5
80004bf8:	000700e7          	jalr	a4

                    // If the reaction produced outputs, put the resulting
                    // triggered reactions into the queue or execute them directly if possible.
                    schedule_output_reactions(downstream_to_execute_now, worker);
80004bfc:	f9842583          	lw	a1,-104(s0)
80004c00:	fc842503          	lw	a0,-56(s0)
80004c04:	d31ff0ef          	jal	ra,80004934 <schedule_output_reactions>
                }
            }
        }
        if (!violation) {
80004c08:	fdf44783          	lbu	a5,-33(s0)
80004c0c:	0017c793          	xori	a5,a5,1
80004c10:	0ff7f793          	andi	a5,a5,255
80004c14:	02078463          	beqz	a5,80004c3c <schedule_output_reactions+0x308>
            // Invoke the downstream_reaction function.
            DEBUG_PRINT("worker %d: Invoking downstream reaction immediately, bypassing reaction queue.", worker);
            tracepoint_reaction_starts(downstream_to_execute_now, worker);
            downstream_to_execute_now->function(downstream_to_execute_now->self);
80004c18:	fc842783          	lw	a5,-56(s0)
80004c1c:	0007a703          	lw	a4,0(a5)
80004c20:	fc842783          	lw	a5,-56(s0)
80004c24:	0047a783          	lw	a5,4(a5)
80004c28:	00078513          	mv	a0,a5
80004c2c:	000700e7          	jalr	a4
            tracepoint_reaction_ends(downstream_to_execute_now, worker);

            // If the downstream_reaction produced outputs, put the resulting triggered
            // reactions into the queue (or execute them directly, if possible).
            schedule_output_reactions(downstream_to_execute_now, worker);
80004c30:	f9842583          	lw	a1,-104(s0)
80004c34:	fc842503          	lw	a0,-56(s0)
80004c38:	cfdff0ef          	jal	ra,80004934 <schedule_output_reactions>
        }
            
        // Reset the is_tardy because it has been passed
        // down the chain
        downstream_to_execute_now->is_tardy = false;
80004c3c:	fc842783          	lw	a5,-56(s0)
80004c40:	04078423          	sb	zero,72(a5)
        DEBUG_PRINT("Finally, reset reaction's is_tardy field to false.");
    }
}
80004c44:	00000013          	nop
80004c48:	06c12083          	lw	ra,108(sp)
80004c4c:	06812403          	lw	s0,104(sp)
80004c50:	06412903          	lw	s2,100(sp)
80004c54:	06012983          	lw	s3,96(sp)
80004c58:	05c12a03          	lw	s4,92(sp)
80004c5c:	05812a83          	lw	s5,88(sp)
80004c60:	05412b03          	lw	s6,84(sp)
80004c64:	05012b83          	lw	s7,80(sp)
80004c68:	07010113          	addi	sp,sp,112
80004c6c:	00008067          	ret

80004c70 <writable_copy>:
 * Otherwise, this returns a new token with a reference count of 0.
 * To ensure that the allocated memory is not leaked, this new token must be
 * either passed to an output using set_token() or scheduled with a action
 * using schedule_token().
 */
lf_token_t* writable_copy(lf_token_t* token) {
80004c70:	fd010113          	addi	sp,sp,-48
80004c74:	02112623          	sw	ra,44(sp)
80004c78:	02812423          	sw	s0,40(sp)
80004c7c:	03010413          	addi	s0,sp,48
80004c80:	fca42e23          	sw	a0,-36(s0)
    DEBUG_PRINT("writable_copy: Requesting writable copy of token %p with reference count %d.", token, token->ref_count);
    if (token->ref_count == 1) {
80004c84:	fdc42783          	lw	a5,-36(s0)
80004c88:	00c7a703          	lw	a4,12(a5)
80004c8c:	00100793          	li	a5,1
80004c90:	00f71663          	bne	a4,a5,80004c9c <writable_copy+0x2c>
        DEBUG_PRINT("writable_copy: Avoided copy because reference count is %d.", token->ref_count);
        return token;
80004c94:	fdc42783          	lw	a5,-36(s0)
80004c98:	09c0006f          	j	80004d34 <writable_copy+0xc4>
   } else {
        DEBUG_PRINT("writable_copy: Copying array because reference count is greater than 1. It is %d.", token->ref_count);
        size_t size = token->element_size * token->length;
80004c9c:	fdc42783          	lw	a5,-36(s0)
80004ca0:	0047a783          	lw	a5,4(a5)
80004ca4:	fdc42703          	lw	a4,-36(s0)
80004ca8:	00872703          	lw	a4,8(a4)
80004cac:	02e787b3          	mul	a5,a5,a4
80004cb0:	fef42223          	sw	a5,-28(s0)
        if (size == 0) {
80004cb4:	fe442783          	lw	a5,-28(s0)
80004cb8:	00079663          	bnez	a5,80004cc4 <writable_copy+0x54>
            return token;
80004cbc:	fdc42783          	lw	a5,-36(s0)
80004cc0:	0740006f          	j	80004d34 <writable_copy+0xc4>
        }
        void* copy = malloc(size);
80004cc4:	fe442503          	lw	a0,-28(s0)
80004cc8:	514060ef          	jal	ra,8000b1dc <malloc>
80004ccc:	00050793          	mv	a5,a0
80004cd0:	fef42423          	sw	a5,-24(s0)
        DEBUG_PRINT("Allocating memory for writable copy %p.", copy);
        memcpy(copy, token->value, size);
80004cd4:	fdc42783          	lw	a5,-36(s0)
80004cd8:	0007a783          	lw	a5,0(a5)
80004cdc:	fe442603          	lw	a2,-28(s0)
80004ce0:	00078593          	mv	a1,a5
80004ce4:	fe842503          	lw	a0,-24(s0)
80004ce8:	121040ef          	jal	ra,80009608 <memcpy>
        // Count allocations to issue a warning if this is never freed.
        __count_payload_allocations++;
80004cec:	8c818793          	addi	a5,gp,-1848 # 8000daf8 <__count_payload_allocations>
80004cf0:	0007a783          	lw	a5,0(a5)
80004cf4:	00178713          	addi	a4,a5,1
80004cf8:	8c818793          	addi	a5,gp,-1848 # 8000daf8 <__count_payload_allocations>
80004cfc:	00e7a023          	sw	a4,0(a5)
        // Create a new, dynamically allocated token.
        lf_token_t* result = create_token(token->element_size);
80004d00:	fdc42783          	lw	a5,-36(s0)
80004d04:	0047a783          	lw	a5,4(a5)
80004d08:	00078513          	mv	a0,a5
80004d0c:	d70fe0ef          	jal	ra,8000327c <create_token>
80004d10:	fea42623          	sw	a0,-20(s0)
        result->length = token->length;
80004d14:	fdc42783          	lw	a5,-36(s0)
80004d18:	0087a703          	lw	a4,8(a5)
80004d1c:	fec42783          	lw	a5,-20(s0)
80004d20:	00e7a423          	sw	a4,8(a5)
        result->value = copy;
80004d24:	fec42783          	lw	a5,-20(s0)
80004d28:	fe842703          	lw	a4,-24(s0)
80004d2c:	00e7a023          	sw	a4,0(a5)
        return result;
80004d30:	fec42783          	lw	a5,-20(s0)
    }
}
80004d34:	00078513          	mv	a0,a5
80004d38:	02c12083          	lw	ra,44(sp)
80004d3c:	02812403          	lw	s0,40(sp)
80004d40:	03010113          	addi	sp,sp,48
80004d44:	00008067          	ret

80004d48 <usage>:

/**
 * Print a usage message.
 */
void usage(int argc, char* argv[]) {
80004d48:	fe010113          	addi	sp,sp,-32
80004d4c:	00812e23          	sw	s0,28(sp)
80004d50:	02010413          	addi	s0,sp,32
80004d54:	fea42623          	sw	a0,-20(s0)
80004d58:	feb42423          	sw	a1,-24(s0)
    for (int i = 0; i < argc; i++) {
        printf("%s ", argv[i]);
    }
    printf("\n\n");
    */
}
80004d5c:	00000013          	nop
80004d60:	01c12403          	lw	s0,28(sp)
80004d64:	02010113          	addi	sp,sp,32
80004d68:	00008067          	ret

80004d6c <process_args>:
/**
 * Process the command-line arguments. If the command line arguments are not
 * understood, then print a usage message and return 0. Otherwise, return 1.
 * @return 1 if the arguments processed successfully, 0 otherwise.
 */
int process_args(int argc, char* argv[]) {
80004d6c:	f9010113          	addi	sp,sp,-112
80004d70:	06112623          	sw	ra,108(sp)
80004d74:	06812423          	sw	s0,104(sp)
80004d78:	07212223          	sw	s2,100(sp)
80004d7c:	07312023          	sw	s3,96(sp)
80004d80:	05412e23          	sw	s4,92(sp)
80004d84:	05512c23          	sw	s5,88(sp)
80004d88:	05612a23          	sw	s6,84(sp)
80004d8c:	05712823          	sw	s7,80(sp)
80004d90:	05812623          	sw	s8,76(sp)
80004d94:	05912423          	sw	s9,72(sp)
80004d98:	05a12223          	sw	s10,68(sp)
80004d9c:	05b12023          	sw	s11,64(sp)
80004da0:	07010413          	addi	s0,sp,112
80004da4:	faa42623          	sw	a0,-84(s0)
80004da8:	fab42423          	sw	a1,-88(s0)
    for (int i = 1; i < argc; i++) {
80004dac:	00100793          	li	a5,1
80004db0:	fcf42623          	sw	a5,-52(s0)
80004db4:	0150006f          	j	800055c8 <process_args+0x85c>
        if (strcmp(argv[i], "-f") == 0 || strcmp(argv[i], "--fast") == 0) {
80004db8:	fcc42783          	lw	a5,-52(s0)
80004dbc:	00279793          	slli	a5,a5,0x2
80004dc0:	fa842703          	lw	a4,-88(s0)
80004dc4:	00f707b3          	add	a5,a4,a5
80004dc8:	0007a783          	lw	a5,0(a5)
80004dcc:	00008597          	auipc	a1,0x8
80004dd0:	cec58593          	addi	a1,a1,-788 # 8000cab8 <__ascii_wctomb+0x150>
80004dd4:	00078513          	mv	a0,a5
80004dd8:	2a5040ef          	jal	ra,8000987c <strcmp>
80004ddc:	00050793          	mv	a5,a0
80004de0:	02078863          	beqz	a5,80004e10 <process_args+0xa4>
80004de4:	fcc42783          	lw	a5,-52(s0)
80004de8:	00279793          	slli	a5,a5,0x2
80004dec:	fa842703          	lw	a4,-88(s0)
80004df0:	00f707b3          	add	a5,a4,a5
80004df4:	0007a783          	lw	a5,0(a5)
80004df8:	00008597          	auipc	a1,0x8
80004dfc:	cc458593          	addi	a1,a1,-828 # 8000cabc <__ascii_wctomb+0x154>
80004e00:	00078513          	mv	a0,a5
80004e04:	279040ef          	jal	ra,8000987c <strcmp>
80004e08:	00050793          	mv	a5,a0
80004e0c:	08079c63          	bnez	a5,80004ea4 <process_args+0x138>
            if (argc < i + 2) {
80004e10:	fcc42783          	lw	a5,-52(s0)
80004e14:	00278793          	addi	a5,a5,2
80004e18:	fac42703          	lw	a4,-84(s0)
80004e1c:	00f75c63          	ble	a5,a4,80004e34 <process_args+0xc8>
                // printf("Error: --fast needs a boolean.\n");
                usage(argc, argv);
80004e20:	fa842583          	lw	a1,-88(s0)
80004e24:	fac42503          	lw	a0,-84(s0)
80004e28:	f21ff0ef          	jal	ra,80004d48 <usage>
                return 0;
80004e2c:	00000793          	li	a5,0
80004e30:	7a80006f          	j	800055d8 <process_args+0x86c>
            }
            i++;
80004e34:	fcc42783          	lw	a5,-52(s0)
80004e38:	00178793          	addi	a5,a5,1
80004e3c:	fcf42623          	sw	a5,-52(s0)
            char* fast_spec = argv[i];
80004e40:	fcc42783          	lw	a5,-52(s0)
80004e44:	00279793          	slli	a5,a5,0x2
80004e48:	fa842703          	lw	a4,-88(s0)
80004e4c:	00f707b3          	add	a5,a4,a5
80004e50:	0007a783          	lw	a5,0(a5)
80004e54:	faf42c23          	sw	a5,-72(s0)
            if (strcmp(fast_spec, "true") == 0) {
80004e58:	00008597          	auipc	a1,0x8
80004e5c:	c6c58593          	addi	a1,a1,-916 # 8000cac4 <__ascii_wctomb+0x15c>
80004e60:	fb842503          	lw	a0,-72(s0)
80004e64:	219040ef          	jal	ra,8000987c <strcmp>
80004e68:	00050793          	mv	a5,a0
80004e6c:	00079a63          	bnez	a5,80004e80 <process_args+0x114>
                fast = true;
80004e70:	84918793          	addi	a5,gp,-1975 # 8000da79 <fast>
80004e74:	00100713          	li	a4,1
80004e78:	00e78023          	sb	a4,0(a5)
        if (strcmp(argv[i], "-f") == 0 || strcmp(argv[i], "--fast") == 0) {
80004e7c:	7340006f          	j	800055b0 <process_args+0x844>
            } else if (strcmp(fast_spec, "false") == 0) {
80004e80:	00008597          	auipc	a1,0x8
80004e84:	c4c58593          	addi	a1,a1,-948 # 8000cacc <__ascii_wctomb+0x164>
80004e88:	fb842503          	lw	a0,-72(s0)
80004e8c:	1f1040ef          	jal	ra,8000987c <strcmp>
80004e90:	00050793          	mv	a5,a0
80004e94:	70079e63          	bnez	a5,800055b0 <process_args+0x844>
                fast = false;
80004e98:	84918793          	addi	a5,gp,-1975 # 8000da79 <fast>
80004e9c:	00078023          	sb	zero,0(a5)
        if (strcmp(argv[i], "-f") == 0 || strcmp(argv[i], "--fast") == 0) {
80004ea0:	7100006f          	j	800055b0 <process_args+0x844>
            } else {
                // printf("Error: Invalid value for --fast: %s\n", fast_spec);
            }
       } else if (strcmp(argv[i], "-o") == 0
80004ea4:	fcc42783          	lw	a5,-52(s0)
80004ea8:	00279793          	slli	a5,a5,0x2
80004eac:	fa842703          	lw	a4,-88(s0)
80004eb0:	00f707b3          	add	a5,a4,a5
80004eb4:	0007a783          	lw	a5,0(a5)
80004eb8:	00008597          	auipc	a1,0x8
80004ebc:	c1c58593          	addi	a1,a1,-996 # 8000cad4 <__ascii_wctomb+0x16c>
80004ec0:	00078513          	mv	a0,a5
80004ec4:	1b9040ef          	jal	ra,8000987c <strcmp>
80004ec8:	00050793          	mv	a5,a0
80004ecc:	04078e63          	beqz	a5,80004f28 <process_args+0x1bc>
               || strcmp(argv[i], "--timeout") == 0
80004ed0:	fcc42783          	lw	a5,-52(s0)
80004ed4:	00279793          	slli	a5,a5,0x2
80004ed8:	fa842703          	lw	a4,-88(s0)
80004edc:	00f707b3          	add	a5,a4,a5
80004ee0:	0007a783          	lw	a5,0(a5)
80004ee4:	00008597          	auipc	a1,0x8
80004ee8:	bf458593          	addi	a1,a1,-1036 # 8000cad8 <__ascii_wctomb+0x170>
80004eec:	00078513          	mv	a0,a5
80004ef0:	18d040ef          	jal	ra,8000987c <strcmp>
80004ef4:	00050793          	mv	a5,a0
80004ef8:	02078863          	beqz	a5,80004f28 <process_args+0x1bc>
               || strcmp(argv[i], "-timeout") == 0) {
80004efc:	fcc42783          	lw	a5,-52(s0)
80004f00:	00279793          	slli	a5,a5,0x2
80004f04:	fa842703          	lw	a4,-88(s0)
80004f08:	00f707b3          	add	a5,a4,a5
80004f0c:	0007a783          	lw	a5,0(a5)
80004f10:	00008597          	auipc	a1,0x8
80004f14:	bd458593          	addi	a1,a1,-1068 # 8000cae4 <__ascii_wctomb+0x17c>
80004f18:	00078513          	mv	a0,a5
80004f1c:	161040ef          	jal	ra,8000987c <strcmp>
80004f20:	00050793          	mv	a5,a0
80004f24:	40079c63          	bnez	a5,8000533c <process_args+0x5d0>
           // Tolerate -timeout for legacy uses.
           if (argc < i + 3) {
80004f28:	fcc42783          	lw	a5,-52(s0)
80004f2c:	00378793          	addi	a5,a5,3
80004f30:	fac42703          	lw	a4,-84(s0)
80004f34:	00f75c63          	ble	a5,a4,80004f4c <process_args+0x1e0>
               // fprintf(stderr, "Error: --timeout needs time and units.\n");
               usage(argc, argv);
80004f38:	fa842583          	lw	a1,-88(s0)
80004f3c:	fac42503          	lw	a0,-84(s0)
80004f40:	e09ff0ef          	jal	ra,80004d48 <usage>
               return 0;
80004f44:	00000793          	li	a5,0
80004f48:	6900006f          	j	800055d8 <process_args+0x86c>
           }
           i++;
80004f4c:	fcc42783          	lw	a5,-52(s0)
80004f50:	00178793          	addi	a5,a5,1
80004f54:	fcf42623          	sw	a5,-52(s0)
           char* time_spec = argv[i++];
80004f58:	fcc42783          	lw	a5,-52(s0)
80004f5c:	00178713          	addi	a4,a5,1
80004f60:	fce42623          	sw	a4,-52(s0)
80004f64:	00279793          	slli	a5,a5,0x2
80004f68:	fa842703          	lw	a4,-88(s0)
80004f6c:	00f707b3          	add	a5,a4,a5
80004f70:	0007a783          	lw	a5,0(a5)
80004f74:	fcf42023          	sw	a5,-64(s0)
           char* units = argv[i];
80004f78:	fcc42783          	lw	a5,-52(s0)
80004f7c:	00279793          	slli	a5,a5,0x2
80004f80:	fa842703          	lw	a4,-88(s0)
80004f84:	00f707b3          	add	a5,a4,a5
80004f88:	0007a783          	lw	a5,0(a5)
80004f8c:	faf42e23          	sw	a5,-68(s0)
           duration = atoll(time_spec);
80004f90:	fc042503          	lw	a0,-64(s0)
80004f94:	184060ef          	jal	ra,8000b118 <atoll>
80004f98:	00050793          	mv	a5,a0
80004f9c:	00058813          	mv	a6,a1
80004fa0:	81018713          	addi	a4,gp,-2032 # 8000da40 <duration>
80004fa4:	00f72023          	sw	a5,0(a4)
80004fa8:	01072223          	sw	a6,4(a4)
           // A parse error returns 0LL, so check to see whether that is what is meant.
           if (duration == 0LL && strncmp(time_spec, "0", 1) != 0) {
80004fac:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
80004fb0:	0007a683          	lw	a3,0(a5)
80004fb4:	0047a703          	lw	a4,4(a5)
80004fb8:	00068793          	mv	a5,a3
80004fbc:	00e7e7b3          	or	a5,a5,a4
80004fc0:	02079a63          	bnez	a5,80004ff4 <process_args+0x288>
80004fc4:	fc042783          	lw	a5,-64(s0)
80004fc8:	0007c703          	lbu	a4,0(a5)
80004fcc:	00008797          	auipc	a5,0x8
80004fd0:	b2478793          	addi	a5,a5,-1244 # 8000caf0 <__ascii_wctomb+0x188>
80004fd4:	0007c783          	lbu	a5,0(a5)
80004fd8:	40f707b3          	sub	a5,a4,a5
80004fdc:	00078c63          	beqz	a5,80004ff4 <process_args+0x288>
        	   // Parse error.
        	   // fprintf(stderr,"Error: invalid time value: %s", time_spec);
        	   usage(argc, argv);
80004fe0:	fa842583          	lw	a1,-88(s0)
80004fe4:	fac42503          	lw	a0,-84(s0)
80004fe8:	d61ff0ef          	jal	ra,80004d48 <usage>
        	   return 0;
80004fec:	00000793          	li	a5,0
80004ff0:	5e80006f          	j	800055d8 <process_args+0x86c>
           }
           if (strncmp(units, "sec", 3) == 0) {
80004ff4:	00300613          	li	a2,3
80004ff8:	00008597          	auipc	a1,0x8
80004ffc:	afc58593          	addi	a1,a1,-1284 # 8000caf4 <__ascii_wctomb+0x18c>
80005000:	fbc42503          	lw	a0,-68(s0)
80005004:	5ed060ef          	jal	ra,8000bdf0 <strncmp>
80005008:	00050793          	mv	a5,a0
8000500c:	04079a63          	bnez	a5,80005060 <process_args+0x2f4>
        	   duration = SEC(duration);
80005010:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
80005014:	0047a803          	lw	a6,4(a5)
80005018:	0007a783          	lw	a5,0(a5)
8000501c:	3b9ad737          	lui	a4,0x3b9ad
80005020:	a0070713          	addi	a4,a4,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80005024:	02e806b3          	mul	a3,a6,a4
80005028:	00000713          	li	a4,0
8000502c:	02e78733          	mul	a4,a5,a4
80005030:	00e686b3          	add	a3,a3,a4
80005034:	3b9ad737          	lui	a4,0x3b9ad
80005038:	a0070713          	addi	a4,a4,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
8000503c:	02e78633          	mul	a2,a5,a4
80005040:	02e7b9b3          	mulhu	s3,a5,a4
80005044:	00060913          	mv	s2,a2
80005048:	013687b3          	add	a5,a3,s3
8000504c:	00078993          	mv	s3,a5
80005050:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
80005054:	0127a023          	sw	s2,0(a5)
80005058:	0137a223          	sw	s3,4(a5)
               || strcmp(argv[i], "-timeout") == 0) {
8000505c:	5600006f          	j	800055bc <process_args+0x850>
           } else if (strncmp(units, "msec", 4) == 0) {
80005060:	00400613          	li	a2,4
80005064:	00008597          	auipc	a1,0x8
80005068:	a9458593          	addi	a1,a1,-1388 # 8000caf8 <__ascii_wctomb+0x190>
8000506c:	fbc42503          	lw	a0,-68(s0)
80005070:	581060ef          	jal	ra,8000bdf0 <strncmp>
80005074:	00050793          	mv	a5,a0
80005078:	04079a63          	bnez	a5,800050cc <process_args+0x360>
        	   duration = MSEC(duration);
8000507c:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
80005080:	0047a803          	lw	a6,4(a5)
80005084:	0007a783          	lw	a5,0(a5)
80005088:	000f4737          	lui	a4,0xf4
8000508c:	24070713          	addi	a4,a4,576 # f4240 <buflen.2800+0xf41bc>
80005090:	02e806b3          	mul	a3,a6,a4
80005094:	00000713          	li	a4,0
80005098:	02e78733          	mul	a4,a5,a4
8000509c:	00e686b3          	add	a3,a3,a4
800050a0:	000f4737          	lui	a4,0xf4
800050a4:	24070713          	addi	a4,a4,576 # f4240 <buflen.2800+0xf41bc>
800050a8:	02e78633          	mul	a2,a5,a4
800050ac:	02e7bab3          	mulhu	s5,a5,a4
800050b0:	00060a13          	mv	s4,a2
800050b4:	015687b3          	add	a5,a3,s5
800050b8:	00078a93          	mv	s5,a5
800050bc:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
800050c0:	0147a023          	sw	s4,0(a5)
800050c4:	0157a223          	sw	s5,4(a5)
               || strcmp(argv[i], "-timeout") == 0) {
800050c8:	4f40006f          	j	800055bc <process_args+0x850>
           } else if (strncmp(units, "usec", 4) == 0) {
800050cc:	00400613          	li	a2,4
800050d0:	00008597          	auipc	a1,0x8
800050d4:	a3058593          	addi	a1,a1,-1488 # 8000cb00 <__ascii_wctomb+0x198>
800050d8:	fbc42503          	lw	a0,-68(s0)
800050dc:	515060ef          	jal	ra,8000bdf0 <strncmp>
800050e0:	00050793          	mv	a5,a0
800050e4:	04079663          	bnez	a5,80005130 <process_args+0x3c4>
        	   duration = USEC(duration);
800050e8:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
800050ec:	0047a803          	lw	a6,4(a5)
800050f0:	0007a783          	lw	a5,0(a5)
800050f4:	3e800713          	li	a4,1000
800050f8:	02e806b3          	mul	a3,a6,a4
800050fc:	00000713          	li	a4,0
80005100:	02e78733          	mul	a4,a5,a4
80005104:	00e686b3          	add	a3,a3,a4
80005108:	3e800713          	li	a4,1000
8000510c:	02e78633          	mul	a2,a5,a4
80005110:	02e7bbb3          	mulhu	s7,a5,a4
80005114:	00060b13          	mv	s6,a2
80005118:	017687b3          	add	a5,a3,s7
8000511c:	00078b93          	mv	s7,a5
80005120:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
80005124:	0167a023          	sw	s6,0(a5)
80005128:	0177a223          	sw	s7,4(a5)
               || strcmp(argv[i], "-timeout") == 0) {
8000512c:	4900006f          	j	800055bc <process_args+0x850>
           } else if (strncmp(units, "nsec", 4) == 0) {
80005130:	00400613          	li	a2,4
80005134:	00008597          	auipc	a1,0x8
80005138:	9d458593          	addi	a1,a1,-1580 # 8000cb08 <__ascii_wctomb+0x1a0>
8000513c:	fbc42503          	lw	a0,-68(s0)
80005140:	4b1060ef          	jal	ra,8000bdf0 <strncmp>
80005144:	00050793          	mv	a5,a0
80005148:	02079063          	bnez	a5,80005168 <process_args+0x3fc>
        	   duration = NSEC(duration);
8000514c:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
80005150:	0047a803          	lw	a6,4(a5)
80005154:	0007a783          	lw	a5,0(a5)
80005158:	81018713          	addi	a4,gp,-2032 # 8000da40 <duration>
8000515c:	00f72023          	sw	a5,0(a4)
80005160:	01072223          	sw	a6,4(a4)
               || strcmp(argv[i], "-timeout") == 0) {
80005164:	4580006f          	j	800055bc <process_args+0x850>
           } else if (strncmp(units, "min", 3) == 0) {
80005168:	00300613          	li	a2,3
8000516c:	00008597          	auipc	a1,0x8
80005170:	9a458593          	addi	a1,a1,-1628 # 8000cb10 <__ascii_wctomb+0x1a8>
80005174:	fbc42503          	lw	a0,-68(s0)
80005178:	479060ef          	jal	ra,8000bdf0 <strncmp>
8000517c:	00050793          	mv	a5,a0
80005180:	04079a63          	bnez	a5,800051d4 <process_args+0x468>
        	   duration = MINUTE(duration);
80005184:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
80005188:	0047a803          	lw	a6,4(a5)
8000518c:	0007a783          	lw	a5,0(a5)
80005190:	f8476737          	lui	a4,0xf8476
80005194:	80070713          	addi	a4,a4,-2048 # f8475800 <__global_pointer$+0x784675d0>
80005198:	02e806b3          	mul	a3,a6,a4
8000519c:	00d00713          	li	a4,13
800051a0:	02e78733          	mul	a4,a5,a4
800051a4:	00e686b3          	add	a3,a3,a4
800051a8:	f8476737          	lui	a4,0xf8476
800051ac:	80070713          	addi	a4,a4,-2048 # f8475800 <__global_pointer$+0x784675d0>
800051b0:	02e78633          	mul	a2,a5,a4
800051b4:	02e7bcb3          	mulhu	s9,a5,a4
800051b8:	00060c13          	mv	s8,a2
800051bc:	019687b3          	add	a5,a3,s9
800051c0:	00078c93          	mv	s9,a5
800051c4:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
800051c8:	0187a023          	sw	s8,0(a5)
800051cc:	0197a223          	sw	s9,4(a5)
               || strcmp(argv[i], "-timeout") == 0) {
800051d0:	3ec0006f          	j	800055bc <process_args+0x850>
           } else if (strncmp(units, "hour", 4) == 0) {
800051d4:	00400613          	li	a2,4
800051d8:	00008597          	auipc	a1,0x8
800051dc:	93c58593          	addi	a1,a1,-1732 # 8000cb14 <__ascii_wctomb+0x1ac>
800051e0:	fbc42503          	lw	a0,-68(s0)
800051e4:	40d060ef          	jal	ra,8000bdf0 <strncmp>
800051e8:	00050793          	mv	a5,a0
800051ec:	04079663          	bnez	a5,80005238 <process_args+0x4cc>
        	   duration = HOUR(duration);
800051f0:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
800051f4:	0047a803          	lw	a6,4(a5)
800051f8:	0007a783          	lw	a5,0(a5)
800051fc:	30b8a737          	lui	a4,0x30b8a
80005200:	02e806b3          	mul	a3,a6,a4
80005204:	34600713          	li	a4,838
80005208:	02e78733          	mul	a4,a5,a4
8000520c:	00e686b3          	add	a3,a3,a4
80005210:	30b8a737          	lui	a4,0x30b8a
80005214:	02e78633          	mul	a2,a5,a4
80005218:	02e7bdb3          	mulhu	s11,a5,a4
8000521c:	00060d13          	mv	s10,a2
80005220:	01b687b3          	add	a5,a3,s11
80005224:	00078d93          	mv	s11,a5
80005228:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
8000522c:	01a7a023          	sw	s10,0(a5)
80005230:	01b7a223          	sw	s11,4(a5)
               || strcmp(argv[i], "-timeout") == 0) {
80005234:	3880006f          	j	800055bc <process_args+0x850>
           } else if (strncmp(units, "day", 3) == 0) {
80005238:	00300613          	li	a2,3
8000523c:	00008597          	auipc	a1,0x8
80005240:	8e058593          	addi	a1,a1,-1824 # 8000cb1c <__ascii_wctomb+0x1b4>
80005244:	fbc42503          	lw	a0,-68(s0)
80005248:	3a9060ef          	jal	ra,8000bdf0 <strncmp>
8000524c:	00050793          	mv	a5,a0
80005250:	06079063          	bnez	a5,800052b0 <process_args+0x544>
        	   duration = DAY(duration);
80005254:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
80005258:	0047a803          	lw	a6,4(a5)
8000525c:	0007a783          	lw	a5,0(a5)
80005260:	914f0737          	lui	a4,0x914f0
80005264:	02e806b3          	mul	a3,a6,a4
80005268:	00005737          	lui	a4,0x5
8000526c:	e9470713          	addi	a4,a4,-364 # 4e94 <buflen.2800+0x4e10>
80005270:	02e78733          	mul	a4,a5,a4
80005274:	00e686b3          	add	a3,a3,a4
80005278:	914f0737          	lui	a4,0x914f0
8000527c:	02e78633          	mul	a2,a5,a4
80005280:	02e7b7b3          	mulhu	a5,a5,a4
80005284:	faf42223          	sw	a5,-92(s0)
80005288:	fac42023          	sw	a2,-96(s0)
8000528c:	fa442783          	lw	a5,-92(s0)
80005290:	00f687b3          	add	a5,a3,a5
80005294:	faf42223          	sw	a5,-92(s0)
80005298:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
8000529c:	fa042683          	lw	a3,-96(s0)
800052a0:	fa442703          	lw	a4,-92(s0)
800052a4:	00d7a023          	sw	a3,0(a5)
800052a8:	00e7a223          	sw	a4,4(a5)
               || strcmp(argv[i], "-timeout") == 0) {
800052ac:	3100006f          	j	800055bc <process_args+0x850>
           } else if (strncmp(units, "week", 4) == 0) {
800052b0:	00400613          	li	a2,4
800052b4:	00008597          	auipc	a1,0x8
800052b8:	86c58593          	addi	a1,a1,-1940 # 8000cb20 <__ascii_wctomb+0x1b8>
800052bc:	fbc42503          	lw	a0,-68(s0)
800052c0:	331060ef          	jal	ra,8000bdf0 <strncmp>
800052c4:	00050793          	mv	a5,a0
800052c8:	06079063          	bnez	a5,80005328 <process_args+0x5bc>
        	   duration = WEEK(duration);
800052cc:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
800052d0:	0047a803          	lw	a6,4(a5)
800052d4:	0007a783          	lw	a5,0(a5)
800052d8:	f9290737          	lui	a4,0xf9290
800052dc:	02e806b3          	mul	a3,a6,a4
800052e0:	00022737          	lui	a4,0x22
800052e4:	60f70713          	addi	a4,a4,1551 # 2260f <buflen.2800+0x2258b>
800052e8:	02e78733          	mul	a4,a5,a4
800052ec:	00e686b3          	add	a3,a3,a4
800052f0:	f9290737          	lui	a4,0xf9290
800052f4:	02e78633          	mul	a2,a5,a4
800052f8:	02e7b7b3          	mulhu	a5,a5,a4
800052fc:	f8f42e23          	sw	a5,-100(s0)
80005300:	f8c42c23          	sw	a2,-104(s0)
80005304:	f9c42783          	lw	a5,-100(s0)
80005308:	00f687b3          	add	a5,a3,a5
8000530c:	f8f42e23          	sw	a5,-100(s0)
80005310:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
80005314:	f9842683          	lw	a3,-104(s0)
80005318:	f9c42703          	lw	a4,-100(s0)
8000531c:	00d7a023          	sw	a3,0(a5)
80005320:	00e7a223          	sw	a4,4(a5)
               || strcmp(argv[i], "-timeout") == 0) {
80005324:	2980006f          	j	800055bc <process_args+0x850>
           } else {
        	   // Invalid units.
        	   // fprintf(stderr,"Error: invalid time units: %s", units);
        	   usage(argc, argv);
80005328:	fa842583          	lw	a1,-88(s0)
8000532c:	fac42503          	lw	a0,-84(s0)
80005330:	a19ff0ef          	jal	ra,80004d48 <usage>
        	   return 0;
80005334:	00000793          	li	a5,0
80005338:	2a00006f          	j	800055d8 <process_args+0x86c>
           }
       } else if (strcmp(argv[i], "-k") == 0 || strcmp(argv[i], "--keepalive") == 0) {
8000533c:	fcc42783          	lw	a5,-52(s0)
80005340:	00279793          	slli	a5,a5,0x2
80005344:	fa842703          	lw	a4,-88(s0)
80005348:	00f707b3          	add	a5,a4,a5
8000534c:	0007a783          	lw	a5,0(a5)
80005350:	00007597          	auipc	a1,0x7
80005354:	7d858593          	addi	a1,a1,2008 # 8000cb28 <__ascii_wctomb+0x1c0>
80005358:	00078513          	mv	a0,a5
8000535c:	520040ef          	jal	ra,8000987c <strcmp>
80005360:	00050793          	mv	a5,a0
80005364:	02078863          	beqz	a5,80005394 <process_args+0x628>
80005368:	fcc42783          	lw	a5,-52(s0)
8000536c:	00279793          	slli	a5,a5,0x2
80005370:	fa842703          	lw	a4,-88(s0)
80005374:	00f707b3          	add	a5,a4,a5
80005378:	0007a783          	lw	a5,0(a5)
8000537c:	00007597          	auipc	a1,0x7
80005380:	7b058593          	addi	a1,a1,1968 # 8000cb2c <__ascii_wctomb+0x1c4>
80005384:	00078513          	mv	a0,a5
80005388:	4f4040ef          	jal	ra,8000987c <strcmp>
8000538c:	00050793          	mv	a5,a0
80005390:	08079c63          	bnez	a5,80005428 <process_args+0x6bc>
    	   if (argc < i + 2) {
80005394:	fcc42783          	lw	a5,-52(s0)
80005398:	00278793          	addi	a5,a5,2
8000539c:	fac42703          	lw	a4,-84(s0)
800053a0:	00f75c63          	ble	a5,a4,800053b8 <process_args+0x64c>
    		   // fprintf(stderr,"Error: --keepalive needs a boolean.\n");
    		   usage(argc, argv);
800053a4:	fa842583          	lw	a1,-88(s0)
800053a8:	fac42503          	lw	a0,-84(s0)
800053ac:	99dff0ef          	jal	ra,80004d48 <usage>
    		   return 0;
800053b0:	00000793          	li	a5,0
800053b4:	2240006f          	j	800055d8 <process_args+0x86c>
    	   }
    	   i++;
800053b8:	fcc42783          	lw	a5,-52(s0)
800053bc:	00178793          	addi	a5,a5,1
800053c0:	fcf42623          	sw	a5,-52(s0)
    	   char* keep_spec = argv[i];
800053c4:	fcc42783          	lw	a5,-52(s0)
800053c8:	00279793          	slli	a5,a5,0x2
800053cc:	fa842703          	lw	a4,-88(s0)
800053d0:	00f707b3          	add	a5,a4,a5
800053d4:	0007a783          	lw	a5,0(a5)
800053d8:	fcf42223          	sw	a5,-60(s0)
    	   if (strcmp(keep_spec, "true") == 0) {
800053dc:	00007597          	auipc	a1,0x7
800053e0:	6e858593          	addi	a1,a1,1768 # 8000cac4 <__ascii_wctomb+0x15c>
800053e4:	fc442503          	lw	a0,-60(s0)
800053e8:	494040ef          	jal	ra,8000987c <strcmp>
800053ec:	00050793          	mv	a5,a0
800053f0:	00079a63          	bnez	a5,80005404 <process_args+0x698>
    		   keepalive_specified = true;
800053f4:	85118793          	addi	a5,gp,-1967 # 8000da81 <keepalive_specified>
800053f8:	00100713          	li	a4,1
800053fc:	00e78023          	sb	a4,0(a5)
       } else if (strcmp(argv[i], "-k") == 0 || strcmp(argv[i], "--keepalive") == 0) {
80005400:	1b80006f          	j	800055b8 <process_args+0x84c>
    	   } else if (strcmp(keep_spec, "false") == 0) {
80005404:	00007597          	auipc	a1,0x7
80005408:	6c858593          	addi	a1,a1,1736 # 8000cacc <__ascii_wctomb+0x164>
8000540c:	fc442503          	lw	a0,-60(s0)
80005410:	46c040ef          	jal	ra,8000987c <strcmp>
80005414:	00050793          	mv	a5,a0
80005418:	1a079063          	bnez	a5,800055b8 <process_args+0x84c>
    		   keepalive_specified = false;
8000541c:	85118793          	addi	a5,gp,-1967 # 8000da81 <keepalive_specified>
80005420:	00078023          	sb	zero,0(a5)
       } else if (strcmp(argv[i], "-k") == 0 || strcmp(argv[i], "--keepalive") == 0) {
80005424:	1940006f          	j	800055b8 <process_args+0x84c>
    	   } else {
    		   // fprintf(stderr,"Error: Invalid value for --keepalive: %s\n", keep_spec);
    	   }
       } else if (strcmp(argv[i], "-t") == 0 || strcmp(argv[i], "--threads") == 0) {
80005428:	fcc42783          	lw	a5,-52(s0)
8000542c:	00279793          	slli	a5,a5,0x2
80005430:	fa842703          	lw	a4,-88(s0)
80005434:	00f707b3          	add	a5,a4,a5
80005438:	0007a783          	lw	a5,0(a5)
8000543c:	00007597          	auipc	a1,0x7
80005440:	6fc58593          	addi	a1,a1,1788 # 8000cb38 <__ascii_wctomb+0x1d0>
80005444:	00078513          	mv	a0,a5
80005448:	434040ef          	jal	ra,8000987c <strcmp>
8000544c:	00050793          	mv	a5,a0
80005450:	02078863          	beqz	a5,80005480 <process_args+0x714>
80005454:	fcc42783          	lw	a5,-52(s0)
80005458:	00279793          	slli	a5,a5,0x2
8000545c:	fa842703          	lw	a4,-88(s0)
80005460:	00f707b3          	add	a5,a4,a5
80005464:	0007a783          	lw	a5,0(a5)
80005468:	00007597          	auipc	a1,0x7
8000546c:	6d458593          	addi	a1,a1,1748 # 8000cb3c <__ascii_wctomb+0x1d4>
80005470:	00078513          	mv	a0,a5
80005474:	408040ef          	jal	ra,8000987c <strcmp>
80005478:	00050793          	mv	a5,a0
8000547c:	06079863          	bnez	a5,800054ec <process_args+0x780>
    	   if (argc < i + 2) {
80005480:	fcc42783          	lw	a5,-52(s0)
80005484:	00278793          	addi	a5,a5,2
80005488:	fac42703          	lw	a4,-84(s0)
8000548c:	00f75c63          	ble	a5,a4,800054a4 <process_args+0x738>
    		   // fprintf(stderr,"Error: --threads needs an integer argument.\n");
    		   usage(argc, argv);
80005490:	fa842583          	lw	a1,-88(s0)
80005494:	fac42503          	lw	a0,-84(s0)
80005498:	8b1ff0ef          	jal	ra,80004d48 <usage>
    		   return 0;
8000549c:	00000793          	li	a5,0
800054a0:	1380006f          	j	800055d8 <process_args+0x86c>
    	   }
    	   i++;
800054a4:	fcc42783          	lw	a5,-52(s0)
800054a8:	00178793          	addi	a5,a5,1
800054ac:	fcf42623          	sw	a5,-52(s0)
    	   char* threads_spec = argv[i++];
800054b0:	fcc42783          	lw	a5,-52(s0)
800054b4:	00178713          	addi	a4,a5,1
800054b8:	fce42623          	sw	a4,-52(s0)
800054bc:	00279793          	slli	a5,a5,0x2
800054c0:	fa842703          	lw	a4,-88(s0)
800054c4:	00f707b3          	add	a5,a4,a5
800054c8:	0007a783          	lw	a5,0(a5)
800054cc:	fcf42423          	sw	a5,-56(s0)
    	   _lf_number_of_threads = atoi(threads_spec);
800054d0:	fc842503          	lw	a0,-56(s0)
800054d4:	42d050ef          	jal	ra,8000b100 <atoi>
800054d8:	00050793          	mv	a5,a0
800054dc:	00078713          	mv	a4,a5
800054e0:	84c18793          	addi	a5,gp,-1972 # 8000da7c <_lf_number_of_threads>
800054e4:	00e7a023          	sw	a4,0(a5)
       } else if (strcmp(argv[i], "-t") == 0 || strcmp(argv[i], "--threads") == 0) {
800054e8:	0d40006f          	j	800055bc <process_args+0x850>
    	   if (_lf_number_of_threads <= 0) {
    		   // fprintf(stderr,"Error: Invalid value for --threads: %s\n", threads_spec);
    	   }
       } else if (strcmp(argv[i], "-i") == 0 || strcmp(argv[i], "--id") == 0) {
800054ec:	fcc42783          	lw	a5,-52(s0)
800054f0:	00279793          	slli	a5,a5,0x2
800054f4:	fa842703          	lw	a4,-88(s0)
800054f8:	00f707b3          	add	a5,a4,a5
800054fc:	0007a783          	lw	a5,0(a5)
80005500:	00007597          	auipc	a1,0x7
80005504:	64858593          	addi	a1,a1,1608 # 8000cb48 <__ascii_wctomb+0x1e0>
80005508:	00078513          	mv	a0,a5
8000550c:	370040ef          	jal	ra,8000987c <strcmp>
80005510:	00050793          	mv	a5,a0
80005514:	02078863          	beqz	a5,80005544 <process_args+0x7d8>
80005518:	fcc42783          	lw	a5,-52(s0)
8000551c:	00279793          	slli	a5,a5,0x2
80005520:	fa842703          	lw	a4,-88(s0)
80005524:	00f707b3          	add	a5,a4,a5
80005528:	0007a783          	lw	a5,0(a5)
8000552c:	00007597          	auipc	a1,0x7
80005530:	62058593          	addi	a1,a1,1568 # 8000cb4c <__ascii_wctomb+0x1e4>
80005534:	00078513          	mv	a0,a5
80005538:	344040ef          	jal	ra,8000987c <strcmp>
8000553c:	00050793          	mv	a5,a0
80005540:	04079e63          	bnez	a5,8000559c <process_args+0x830>
           if (argc < i + 2) {
80005544:	fcc42783          	lw	a5,-52(s0)
80005548:	00278793          	addi	a5,a5,2
8000554c:	fac42703          	lw	a4,-84(s0)
80005550:	00f75c63          	ble	a5,a4,80005568 <process_args+0x7fc>
               // fprintf(stderr,"Error: --id needs a string argument.\n");
               usage(argc, argv);
80005554:	fa842583          	lw	a1,-88(s0)
80005558:	fac42503          	lw	a0,-84(s0)
8000555c:	fecff0ef          	jal	ra,80004d48 <usage>
               return 0;
80005560:	00000793          	li	a5,0
80005564:	0740006f          	j	800055d8 <process_args+0x86c>
           }
           i++;
80005568:	fcc42783          	lw	a5,-52(s0)
8000556c:	00178793          	addi	a5,a5,1
80005570:	fcf42623          	sw	a5,-52(s0)
           // printf("Federation ID for executable %s: %s\n", argv[0], argv[i]);
           federation_id = argv[i++];
80005574:	fcc42783          	lw	a5,-52(s0)
80005578:	00178713          	addi	a4,a5,1
8000557c:	fce42623          	sw	a4,-52(s0)
80005580:	00279793          	slli	a5,a5,0x2
80005584:	fa842703          	lw	a4,-88(s0)
80005588:	00f707b3          	add	a5,a4,a5
8000558c:	0007a703          	lw	a4,0(a5)
80005590:	81c18793          	addi	a5,gp,-2020 # 8000da4c <federation_id>
80005594:	00e7a023          	sw	a4,0(a5)
80005598:	0240006f          	j	800055bc <process_args+0x850>
       } else {
    	   // fprintf(stderr,"Error: Unrecognized command-line argument: %s\n", argv[i]);
    	   usage(argc, argv);
8000559c:	fa842583          	lw	a1,-88(s0)
800055a0:	fac42503          	lw	a0,-84(s0)
800055a4:	fa4ff0ef          	jal	ra,80004d48 <usage>
    	   return 0;
800055a8:	00000793          	li	a5,0
800055ac:	02c0006f          	j	800055d8 <process_args+0x86c>
        if (strcmp(argv[i], "-f") == 0 || strcmp(argv[i], "--fast") == 0) {
800055b0:	00000013          	nop
800055b4:	0080006f          	j	800055bc <process_args+0x850>
       } else if (strcmp(argv[i], "-k") == 0 || strcmp(argv[i], "--keepalive") == 0) {
800055b8:	00000013          	nop
    for (int i = 1; i < argc; i++) {
800055bc:	fcc42783          	lw	a5,-52(s0)
800055c0:	00178793          	addi	a5,a5,1
800055c4:	fcf42623          	sw	a5,-52(s0)
800055c8:	fcc42703          	lw	a4,-52(s0)
800055cc:	fac42783          	lw	a5,-84(s0)
800055d0:	fef74463          	blt	a4,a5,80004db8 <process_args+0x4c>
       }
    }
    return 1;
800055d4:	00100793          	li	a5,1
}
800055d8:	00078513          	mv	a0,a5
800055dc:	06c12083          	lw	ra,108(sp)
800055e0:	06812403          	lw	s0,104(sp)
800055e4:	06412903          	lw	s2,100(sp)
800055e8:	06012983          	lw	s3,96(sp)
800055ec:	05c12a03          	lw	s4,92(sp)
800055f0:	05812a83          	lw	s5,88(sp)
800055f4:	05412b03          	lw	s6,84(sp)
800055f8:	05012b83          	lw	s7,80(sp)
800055fc:	04c12c03          	lw	s8,76(sp)
80005600:	04812c83          	lw	s9,72(sp)
80005604:	04412d03          	lw	s10,68(sp)
80005608:	04012d83          	lw	s11,64(sp)
8000560c:	07010113          	addi	sp,sp,112
80005610:	00008067          	ret

80005614 <initialize>:

/**
 * Initialize the priority queues and set logical time to match
 * physical time. This also prints a message reporting the start time.
 */
void initialize() {
80005614:	fb010113          	addi	sp,sp,-80
80005618:	04112623          	sw	ra,76(sp)
8000561c:	04812423          	sw	s0,72(sp)
80005620:	05212223          	sw	s2,68(sp)
80005624:	05312023          	sw	s3,64(sp)
80005628:	03412e23          	sw	s4,60(sp)
8000562c:	03512c23          	sw	s5,56(sp)
80005630:	03612a23          	sw	s6,52(sp)
80005634:	03712823          	sw	s7,48(sp)
80005638:	05010413          	addi	s0,sp,80
    __count_payload_allocations = 0;
8000563c:	8c818793          	addi	a5,gp,-1848 # 8000daf8 <__count_payload_allocations>
80005640:	0007a023          	sw	zero,0(a5)
    __count_token_allocations = 0;
80005644:	8cc18793          	addi	a5,gp,-1844 # 8000dafc <__count_token_allocations>
80005648:	0007a023          	sw	zero,0(a5)
    // Initialize our priority queues.

    // Reaction queue ordered first by deadline, then by level.
    // The index of the reaction holds the deadline in the 48 most significant bits,
    // the level in the 16 least significant bits.
    reaction_q = pqueue_init(INITIAL_REACT_QUEUE_SIZE, in_reverse_order, get_reaction_index,
8000564c:	ffffe817          	auipc	a6,0xffffe
80005650:	89880813          	addi	a6,a6,-1896 # 80002ee4 <print_reaction>
80005654:	ffffd797          	auipc	a5,0xffffd
80005658:	74878793          	addi	a5,a5,1864 # 80002d9c <reaction_matches>
8000565c:	ffffe717          	auipc	a4,0xffffe
80005660:	85870713          	addi	a4,a4,-1960 # 80002eb4 <set_reaction_position>
80005664:	ffffd697          	auipc	a3,0xffffd
80005668:	7f868693          	addi	a3,a3,2040 # 80002e5c <get_reaction_position>
8000566c:	ffffd617          	auipc	a2,0xffffd
80005670:	79860613          	addi	a2,a2,1944 # 80002e04 <get_reaction_index>
80005674:	ffffd597          	auipc	a1,0xffffd
80005678:	65c58593          	addi	a1,a1,1628 # 80002cd0 <in_reverse_order>
8000567c:	00a00513          	li	a0,10
80005680:	fc0fc0ef          	jal	ra,80001e40 <pqueue_init>
80005684:	00050713          	mv	a4,a0
80005688:	87c18793          	addi	a5,gp,-1924 # 8000daac <reaction_q>
8000568c:	00e7a023          	sw	a4,0(a5)
            get_reaction_position, set_reaction_position, reaction_matches, print_reaction);    

    event_q = pqueue_init(INITIAL_EVENT_QUEUE_SIZE, in_reverse_order, get_event_time,
80005690:	ffffe817          	auipc	a6,0xffffe
80005694:	88080813          	addi	a6,a6,-1920 # 80002f10 <print_event>
80005698:	ffffd797          	auipc	a5,0xffffd
8000569c:	6c478793          	addi	a5,a5,1732 # 80002d5c <event_matches>
800056a0:	ffffd717          	auipc	a4,0xffffd
800056a4:	7e470713          	addi	a4,a4,2020 # 80002e84 <set_event_position>
800056a8:	ffffd697          	auipc	a3,0xffffd
800056ac:	78c68693          	addi	a3,a3,1932 # 80002e34 <get_event_position>
800056b0:	ffffd617          	auipc	a2,0xffffd
800056b4:	72460613          	addi	a2,a2,1828 # 80002dd4 <get_event_time>
800056b8:	ffffd597          	auipc	a1,0xffffd
800056bc:	61858593          	addi	a1,a1,1560 # 80002cd0 <in_reverse_order>
800056c0:	00a00513          	li	a0,10
800056c4:	f7cfc0ef          	jal	ra,80001e40 <pqueue_init>
800056c8:	00050713          	mv	a4,a0
800056cc:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
800056d0:	00e7a023          	sw	a4,0(a5)
            get_event_position, set_event_position, event_matches, print_event);
	// NOTE: The recycle and next queue does not need to be sorted. But here it is.
    recycle_q = pqueue_init(INITIAL_EVENT_QUEUE_SIZE, in_no_particular_order, get_event_time,
800056d4:	ffffe817          	auipc	a6,0xffffe
800056d8:	83c80813          	addi	a6,a6,-1988 # 80002f10 <print_event>
800056dc:	ffffd797          	auipc	a5,0xffffd
800056e0:	68078793          	addi	a5,a5,1664 # 80002d5c <event_matches>
800056e4:	ffffd717          	auipc	a4,0xffffd
800056e8:	7a070713          	addi	a4,a4,1952 # 80002e84 <set_event_position>
800056ec:	ffffd697          	auipc	a3,0xffffd
800056f0:	74868693          	addi	a3,a3,1864 # 80002e34 <get_event_position>
800056f4:	ffffd617          	auipc	a2,0xffffd
800056f8:	6e060613          	addi	a2,a2,1760 # 80002dd4 <get_event_time>
800056fc:	ffffd597          	auipc	a1,0xffffd
80005700:	63058593          	addi	a1,a1,1584 # 80002d2c <in_no_particular_order>
80005704:	00a00513          	li	a0,10
80005708:	f38fc0ef          	jal	ra,80001e40 <pqueue_init>
8000570c:	00050713          	mv	a4,a0
80005710:	88018793          	addi	a5,gp,-1920 # 8000dab0 <recycle_q>
80005714:	00e7a023          	sw	a4,0(a5)
            get_event_position, set_event_position, event_matches, print_event);
    next_q = pqueue_init(INITIAL_EVENT_QUEUE_SIZE, in_no_particular_order, get_event_time,
80005718:	ffffd817          	auipc	a6,0xffffd
8000571c:	7f880813          	addi	a6,a6,2040 # 80002f10 <print_event>
80005720:	ffffd797          	auipc	a5,0xffffd
80005724:	63c78793          	addi	a5,a5,1596 # 80002d5c <event_matches>
80005728:	ffffd717          	auipc	a4,0xffffd
8000572c:	75c70713          	addi	a4,a4,1884 # 80002e84 <set_event_position>
80005730:	ffffd697          	auipc	a3,0xffffd
80005734:	70468693          	addi	a3,a3,1796 # 80002e34 <get_event_position>
80005738:	ffffd617          	auipc	a2,0xffffd
8000573c:	69c60613          	addi	a2,a2,1692 # 80002dd4 <get_event_time>
80005740:	ffffd597          	auipc	a1,0xffffd
80005744:	5ec58593          	addi	a1,a1,1516 # 80002d2c <in_no_particular_order>
80005748:	00a00513          	li	a0,10
8000574c:	ef4fc0ef          	jal	ra,80001e40 <pqueue_init>
80005750:	00050713          	mv	a4,a0
80005754:	88418793          	addi	a5,gp,-1916 # 8000dab4 <next_q>
80005758:	00e7a023          	sw	a4,0(a5)
            get_event_position, set_event_position, event_matches, print_event);

    // Initialize the trigger table.
    __initialize_trigger_objects();
8000575c:	6e9010ef          	jal	ra,80007644 <__initialize_trigger_objects>

    // Initialize logical time to match physical time.
    struct timespec actualStartTime;
    clock_gettime(CLOCK_REALTIME, &actualStartTime);
80005760:	fc840793          	addi	a5,s0,-56
80005764:	00078593          	mv	a1,a5
80005768:	00100513          	li	a0,1
8000576c:	30c000ef          	jal	ra,80005a78 <clock_gettime>
    physical_start_time = actualStartTime.tv_sec * BILLION + actualStartTime.tv_nsec;
80005770:	fc842783          	lw	a5,-56(s0)
80005774:	00078a13          	mv	s4,a5
80005778:	41f7d793          	srai	a5,a5,0x1f
8000577c:	00078a93          	mv	s5,a5
80005780:	3b9ad7b7          	lui	a5,0x3b9ad
80005784:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80005788:	02fa8733          	mul	a4,s5,a5
8000578c:	00000793          	li	a5,0
80005790:	02fa07b3          	mul	a5,s4,a5
80005794:	00f70733          	add	a4,a4,a5
80005798:	3b9ad7b7          	lui	a5,0x3b9ad
8000579c:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
800057a0:	02fa06b3          	mul	a3,s4,a5
800057a4:	02fa39b3          	mulhu	s3,s4,a5
800057a8:	00068913          	mv	s2,a3
800057ac:	013707b3          	add	a5,a4,s3
800057b0:	00078993          	mv	s3,a5
800057b4:	fcc42783          	lw	a5,-52(s0)
800057b8:	00078b13          	mv	s6,a5
800057bc:	41f7d793          	srai	a5,a5,0x1f
800057c0:	00078b93          	mv	s7,a5
800057c4:	016907b3          	add	a5,s2,s6
800057c8:	00078713          	mv	a4,a5
800057cc:	01273733          	sltu	a4,a4,s2
800057d0:	01798833          	add	a6,s3,s7
800057d4:	01070733          	add	a4,a4,a6
800057d8:	00070813          	mv	a6,a4
800057dc:	00008717          	auipc	a4,0x8
800057e0:	25470713          	addi	a4,a4,596 # 8000da30 <physical_start_time>
800057e4:	00f72023          	sw	a5,0(a4)
800057e8:	01072223          	sw	a6,4(a4)

    // printf("---- Start execution at time %s---- plus %ld nanoseconds.\n",
            // ctime(&actualStartTime.tv_sec), actualStartTime.tv_nsec);
    current_tag.time = physical_start_time;
800057ec:	00008797          	auipc	a5,0x8
800057f0:	24478793          	addi	a5,a5,580 # 8000da30 <physical_start_time>
800057f4:	0047a803          	lw	a6,4(a5)
800057f8:	0007a783          	lw	a5,0(a5)
800057fc:	8b818713          	addi	a4,gp,-1864 # 8000dae8 <current_tag>
80005800:	00f72023          	sw	a5,0(a4)
80005804:	01072223          	sw	a6,4(a4)
    start_time = current_tag.time;
80005808:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
8000580c:	0047a803          	lw	a6,4(a5)
80005810:	0007a783          	lw	a5,0(a5)
80005814:	00008717          	auipc	a4,0x8
80005818:	22470713          	addi	a4,a4,548 # 8000da38 <start_time>
8000581c:	00f72023          	sw	a5,0(a4)
80005820:	01072223          	sw	a6,4(a4)
    
    if (duration >= 0LL) {
80005824:	81018793          	addi	a5,gp,-2032 # 8000da40 <duration>
80005828:	0047a803          	lw	a6,4(a5)
8000582c:	0007a783          	lw	a5,0(a5)
80005830:	00080793          	mv	a5,a6
80005834:	0607ca63          	bltz	a5,800058a8 <initialize+0x294>
        // A duration has been specified. Calculate the stop time.
        _lf_set_stop_tag((tag_t) {.time = current_tag.time + duration, .microstep = 0});
80005838:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
8000583c:	0047a803          	lw	a6,4(a5)
80005840:	0007a783          	lw	a5,0(a5)
80005844:	81018713          	addi	a4,gp,-2032 # 8000da40 <duration>
80005848:	00072583          	lw	a1,0(a4)
8000584c:	00472603          	lw	a2,4(a4)
80005850:	00b786b3          	add	a3,a5,a1
80005854:	00068513          	mv	a0,a3
80005858:	00f53533          	sltu	a0,a0,a5
8000585c:	00c80733          	add	a4,a6,a2
80005860:	00e507b3          	add	a5,a0,a4
80005864:	00078713          	mv	a4,a5
80005868:	00068793          	mv	a5,a3
8000586c:	00070813          	mv	a6,a4
80005870:	fcf42823          	sw	a5,-48(s0)
80005874:	fd042a23          	sw	a6,-44(s0)
80005878:	fc042c23          	sw	zero,-40(s0)
8000587c:	fd042603          	lw	a2,-48(s0)
80005880:	fd442683          	lw	a3,-44(s0)
80005884:	fd842703          	lw	a4,-40(s0)
80005888:	fdc42783          	lw	a5,-36(s0)
8000588c:	fac42823          	sw	a2,-80(s0)
80005890:	fad42a23          	sw	a3,-76(s0)
80005894:	fae42c23          	sw	a4,-72(s0)
80005898:	faf42e23          	sw	a5,-68(s0)
8000589c:	fb040793          	addi	a5,s0,-80
800058a0:	00078513          	mv	a0,a5
800058a4:	a40fd0ef          	jal	ra,80002ae4 <_lf_set_stop_tag>
    }
}
800058a8:	00000013          	nop
800058ac:	04c12083          	lw	ra,76(sp)
800058b0:	04812403          	lw	s0,72(sp)
800058b4:	04412903          	lw	s2,68(sp)
800058b8:	04012983          	lw	s3,64(sp)
800058bc:	03c12a03          	lw	s4,60(sp)
800058c0:	03812a83          	lw	s5,56(sp)
800058c4:	03412b03          	lw	s6,52(sp)
800058c8:	03012b83          	lw	s7,48(sp)
800058cc:	05010113          	addi	sp,sp,80
800058d0:	00008067          	ret

800058d4 <termination>:

// Check that memory allocated by set_new, set_new_array, or writable_copy
// has been freed and print a warning message if not.
void termination() {
800058d4:	fe010113          	addi	sp,sp,-32
800058d8:	00112e23          	sw	ra,28(sp)
800058dc:	00812c23          	sw	s0,24(sp)
800058e0:	02010413          	addi	s0,sp,32
    // Invoke the code generated termination function.
    __termination();
800058e4:	0e5020ef          	jal	ra,800081c8 <__termination>

    // If the event queue still has events on it, report that.
    if (event_q != NULL && pqueue_size(event_q) > 0) {
800058e8:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
800058ec:	0007a783          	lw	a5,0(a5)
800058f0:	06078663          	beqz	a5,8000595c <termination+0x88>
800058f4:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
800058f8:	0007a783          	lw	a5,0(a5)
800058fc:	00078513          	mv	a0,a5
80005900:	e98fc0ef          	jal	ra,80001f98 <pqueue_size>
80005904:	00050793          	mv	a5,a0
80005908:	04078a63          	beqz	a5,8000595c <termination+0x88>
        // printf("---- There are %zu unprocessed future events on the event queue.\n", pqueue_size(event_q));
        event_t* event = (event_t*)pqueue_peek(event_q);
8000590c:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
80005910:	0007a783          	lw	a5,0(a5)
80005914:	00078513          	mv	a0,a5
80005918:	e01fc0ef          	jal	ra,80002718 <pqueue_peek>
8000591c:	fea42623          	sw	a0,-20(s0)
        interval_t event_time = event->time - start_time;
80005920:	fec42783          	lw	a5,-20(s0)
80005924:	0007a683          	lw	a3,0(a5)
80005928:	0047a703          	lw	a4,4(a5)
8000592c:	00008797          	auipc	a5,0x8
80005930:	10c78793          	addi	a5,a5,268 # 8000da38 <start_time>
80005934:	0007a583          	lw	a1,0(a5)
80005938:	0047a603          	lw	a2,4(a5)
8000593c:	40b687b3          	sub	a5,a3,a1
80005940:	00078513          	mv	a0,a5
80005944:	00a6b533          	sltu	a0,a3,a0
80005948:	40c70833          	sub	a6,a4,a2
8000594c:	40a80733          	sub	a4,a6,a0
80005950:	00070813          	mv	a6,a4
80005954:	fef42023          	sw	a5,-32(s0)
80005958:	ff042223          	sw	a6,-28(s0)
    if (physical_start_time > 0LL) {
        // printf("---- Elapsed physical time (in nsec): ");
        // print_time(get_elapsed_physical_time());
        // printf("\n");
    }
}
8000595c:	00000013          	nop
80005960:	01c12083          	lw	ra,28(sp)
80005964:	01812403          	lw	s0,24(sp)
80005968:	02010113          	addi	sp,sp,32
8000596c:	00008067          	ret

80005970 <__clock_gettime>:
#endif
// ********** End Windows Support

// ********** RISC-V Bare Metal Support
// Gets the current physical time by cycle counting
struct timespec __clock_gettime() {
80005970:	fd010113          	addi	sp,sp,-48
80005974:	02112623          	sw	ra,44(sp)
80005978:	02812423          	sw	s0,40(sp)
8000597c:	03212223          	sw	s2,36(sp)
80005980:	03312023          	sw	s3,32(sp)
80005984:	03010413          	addi	s0,sp,48

80005988 <read_cycle>:
    
    uint32_t cycle_high;
    uint32_t cycle_low;
    struct timespec ts;

    asm(
80005988:	c80022f3          	rdcycleh	t0
8000598c:	c00027f3          	rdcycle	a5
80005990:	c8002773          	rdcycleh	a4
80005994:	fee29ae3          	bne	t0,a4,80005988 <read_cycle>
80005998:	fee42623          	sw	a4,-20(s0)
8000599c:	fef42423          	sw	a5,-24(s0)
    : // inputs
    : "t0" // clobbers
    );

    // Convert cycles to seconds and nanoseconds
    const uint32_t CYCLES_PER_NANOSEC = CLOCK_FREQ / BILLION;
800059a0:	fe042223          	sw	zero,-28(s0)
    const float NSEC_PER_CYCLE = BILLION / CLOCK_FREQ;
800059a4:	00007797          	auipc	a5,0x7
800059a8:	25c78793          	addi	a5,a5,604 # 8000cc00 <__ascii_wctomb+0x298>
800059ac:	0007a783          	lw	a5,0(a5)
800059b0:	fef42023          	sw	a5,-32(s0)

    ts.tv_sec = (time_t) (cycle_low / CLOCK_FREQ) + (time_t) (cycle_high * (UINT32_MAX / CLOCK_FREQ) + (cycle_high / CLOCK_FREQ));
800059b4:	fe842703          	lw	a4,-24(s0)
800059b8:	05f5e7b7          	lui	a5,0x5f5e
800059bc:	10078793          	addi	a5,a5,256 # 5f5e100 <buflen.2800+0x5f5e07c>
800059c0:	02f757b3          	divu	a5,a4,a5
800059c4:	00078613          	mv	a2,a5
800059c8:	fec42703          	lw	a4,-20(s0)
800059cc:	02a00793          	li	a5,42
800059d0:	02f70733          	mul	a4,a4,a5
800059d4:	fec42683          	lw	a3,-20(s0)
800059d8:	05f5e7b7          	lui	a5,0x5f5e
800059dc:	10078793          	addi	a5,a5,256 # 5f5e100 <buflen.2800+0x5f5e07c>
800059e0:	02f6d7b3          	divu	a5,a3,a5
800059e4:	00f707b3          	add	a5,a4,a5
800059e8:	00f607b3          	add	a5,a2,a5
800059ec:	fcf42823          	sw	a5,-48(s0)
    ts.tv_nsec = (long) ((uint32_t) (cycle_low * NSEC_PER_CYCLE) % BILLION);
800059f0:	fe842503          	lw	a0,-24(s0)
800059f4:	5c8050ef          	jal	ra,8000afbc <__floatunsisf>
800059f8:	00050793          	mv	a5,a0
800059fc:	fe042583          	lw	a1,-32(s0)
80005a00:	00078513          	mv	a0,a5
80005a04:	234050ef          	jal	ra,8000ac38 <__mulsf3>
80005a08:	00050793          	mv	a5,a0
80005a0c:	00078513          	mv	a0,a5
80005a10:	548050ef          	jal	ra,8000af58 <__fixunssfsi>
80005a14:	00050713          	mv	a4,a0
80005a18:	3b9ad7b7          	lui	a5,0x3b9ad
80005a1c:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80005a20:	02f777b3          	remu	a5,a4,a5
80005a24:	fcf42a23          	sw	a5,-44(s0)

    return ts;
80005a28:	fd042783          	lw	a5,-48(s0)
80005a2c:	fcf42c23          	sw	a5,-40(s0)
80005a30:	fd442783          	lw	a5,-44(s0)
80005a34:	fcf42e23          	sw	a5,-36(s0)
80005a38:	00000713          	li	a4,0
80005a3c:	fd842703          	lw	a4,-40(s0)
80005a40:	00000793          	li	a5,0
80005a44:	fdc42783          	lw	a5,-36(s0)
80005a48:	00070913          	mv	s2,a4
80005a4c:	00078993          	mv	s3,a5
80005a50:	00090793          	mv	a5,s2
80005a54:	00098813          	mv	a6,s3
}
80005a58:	00078513          	mv	a0,a5
80005a5c:	00080593          	mv	a1,a6
80005a60:	02c12083          	lw	ra,44(sp)
80005a64:	02812403          	lw	s0,40(sp)
80005a68:	02412903          	lw	s2,36(sp)
80005a6c:	02012983          	lw	s3,32(sp)
80005a70:	03010113          	addi	sp,sp,48
80005a74:	00008067          	ret

80005a78 <clock_gettime>:

// System call interface for getting the current time.
int clock_gettime(clockid_t clk_id, struct timespec *tp) {
80005a78:	fe010113          	addi	sp,sp,-32
80005a7c:	00112e23          	sw	ra,28(sp)
80005a80:	00812c23          	sw	s0,24(sp)
80005a84:	02010413          	addi	s0,sp,32
80005a88:	fea42623          	sw	a0,-20(s0)
80005a8c:	feb42423          	sw	a1,-24(s0)

    *tp = __clock_gettime();
80005a90:	ee1ff0ef          	jal	ra,80005970 <__clock_gettime>
80005a94:	00050793          	mv	a5,a0
80005a98:	00058813          	mv	a6,a1
80005a9c:	fe842703          	lw	a4,-24(s0)
80005aa0:	00f72023          	sw	a5,0(a4)
80005aa4:	01072223          	sw	a6,4(a4)
    return 0;
80005aa8:	00000793          	li	a5,0
}
80005aac:	00078513          	mv	a0,a5
80005ab0:	01c12083          	lw	ra,28(sp)
80005ab4:	01812403          	lw	s0,24(sp)
80005ab8:	02010113          	addi	sp,sp,32
80005abc:	00008067          	ret

80005ac0 <nanosleep>:

// Spin waits until the request time has elapsed.
// FIXME: the multithreaded version needs to take care of rem.
int nanosleep(const struct timespec *req, struct timespec *rem) {
80005ac0:	fd010113          	addi	sp,sp,-48
80005ac4:	02112623          	sw	ra,44(sp)
80005ac8:	02812423          	sw	s0,40(sp)
80005acc:	03010413          	addi	s0,sp,48
80005ad0:	fca42e23          	sw	a0,-36(s0)
80005ad4:	fcb42c23          	sw	a1,-40(s0)
    
    struct timespec start_time = __clock_gettime();
80005ad8:	e99ff0ef          	jal	ra,80005970 <__clock_gettime>
80005adc:	00050793          	mv	a5,a0
80005ae0:	00058813          	mv	a6,a1
80005ae4:	fef42423          	sw	a5,-24(s0)
80005ae8:	ff042623          	sw	a6,-20(s0)
    struct timespec ts = start_time;
80005aec:	fe842783          	lw	a5,-24(s0)
80005af0:	fef42023          	sw	a5,-32(s0)
80005af4:	fec42783          	lw	a5,-20(s0)
80005af8:	fef42223          	sw	a5,-28(s0)
    while (ts.tv_sec < start_time.tv_sec + req->tv_sec || (ts.tv_sec == start_time.tv_sec + req->tv_sec && ts.tv_nsec <= start_time.tv_nsec + req->tv_nsec)) {
80005afc:	0180006f          	j	80005b14 <nanosleep+0x54>
        ts = __clock_gettime();
80005b00:	e71ff0ef          	jal	ra,80005970 <__clock_gettime>
80005b04:	00050793          	mv	a5,a0
80005b08:	00058813          	mv	a6,a1
80005b0c:	fef42023          	sw	a5,-32(s0)
80005b10:	ff042223          	sw	a6,-28(s0)
    while (ts.tv_sec < start_time.tv_sec + req->tv_sec || (ts.tv_sec == start_time.tv_sec + req->tv_sec && ts.tv_nsec <= start_time.tv_nsec + req->tv_nsec)) {
80005b14:	fe042703          	lw	a4,-32(s0)
80005b18:	fe842683          	lw	a3,-24(s0)
80005b1c:	fdc42783          	lw	a5,-36(s0)
80005b20:	0007a783          	lw	a5,0(a5)
80005b24:	00f687b3          	add	a5,a3,a5
80005b28:	fcf74ce3          	blt	a4,a5,80005b00 <nanosleep+0x40>
80005b2c:	fe042703          	lw	a4,-32(s0)
80005b30:	fe842683          	lw	a3,-24(s0)
80005b34:	fdc42783          	lw	a5,-36(s0)
80005b38:	0007a783          	lw	a5,0(a5)
80005b3c:	00f687b3          	add	a5,a3,a5
80005b40:	00f71e63          	bne	a4,a5,80005b5c <nanosleep+0x9c>
80005b44:	fe442703          	lw	a4,-28(s0)
80005b48:	fec42683          	lw	a3,-20(s0)
80005b4c:	fdc42783          	lw	a5,-36(s0)
80005b50:	0047a783          	lw	a5,4(a5)
80005b54:	00f687b3          	add	a5,a3,a5
80005b58:	fae7d4e3          	ble	a4,a5,80005b00 <nanosleep+0x40>
    }

    return 0;
80005b5c:	00000793          	li	a5,0
}
80005b60:	00078513          	mv	a0,a5
80005b64:	02c12083          	lw	ra,44(sp)
80005b68:	02812403          	lw	s0,40(sp)
80005b6c:	03010113          	addi	sp,sp,48
80005b70:	00008067          	ret

80005b74 <_lf_schedule_token>:
/**
 * Schedule the specified trigger at current_tag.time plus the offset of the
 * specified trigger plus the delay.
 * See reactor.h for documentation.
 */
handle_t _lf_schedule_token(void* action, interval_t extra_delay, lf_token_t* token) {
80005b74:	fd010113          	addi	sp,sp,-48
80005b78:	02112623          	sw	ra,44(sp)
80005b7c:	02812423          	sw	s0,40(sp)
80005b80:	03010413          	addi	s0,sp,48
80005b84:	fca42e23          	sw	a0,-36(s0)
80005b88:	fcb42823          	sw	a1,-48(s0)
80005b8c:	fcc42a23          	sw	a2,-44(s0)
80005b90:	fcd42c23          	sw	a3,-40(s0)
    trigger_t* trigger = _lf_action_to_trigger(action);
80005b94:	fdc42503          	lw	a0,-36(s0)
80005b98:	c05fe0ef          	jal	ra,8000479c <_lf_action_to_trigger>
80005b9c:	fea42623          	sw	a0,-20(s0)
    return __schedule(trigger, extra_delay, token);
80005ba0:	fd842683          	lw	a3,-40(s0)
80005ba4:	fd042583          	lw	a1,-48(s0)
80005ba8:	fd442603          	lw	a2,-44(s0)
80005bac:	fec42503          	lw	a0,-20(s0)
80005bb0:	bd8fe0ef          	jal	ra,80003f88 <__schedule>
80005bb4:	00050793          	mv	a5,a0
}
80005bb8:	00078513          	mv	a0,a5
80005bbc:	02c12083          	lw	ra,44(sp)
80005bc0:	02812403          	lw	s0,40(sp)
80005bc4:	03010113          	addi	sp,sp,48
80005bc8:	00008067          	ret

80005bcc <_lf_schedule_value>:

/**
 * Variant of schedule_token that creates a token to carry the specified value.
 * See reactor.h for documentation.
 */
handle_t _lf_schedule_value(void* action, interval_t extra_delay, void* value, int length) {
80005bcc:	fc010113          	addi	sp,sp,-64
80005bd0:	02112e23          	sw	ra,60(sp)
80005bd4:	02812c23          	sw	s0,56(sp)
80005bd8:	04010413          	addi	s0,sp,64
80005bdc:	fca42e23          	sw	a0,-36(s0)
80005be0:	fcb42823          	sw	a1,-48(s0)
80005be4:	fcc42a23          	sw	a2,-44(s0)
80005be8:	fcd42c23          	sw	a3,-40(s0)
80005bec:	fce42623          	sw	a4,-52(s0)
    trigger_t* trigger = _lf_action_to_trigger(action);
80005bf0:	fdc42503          	lw	a0,-36(s0)
80005bf4:	ba9fe0ef          	jal	ra,8000479c <_lf_action_to_trigger>
80005bf8:	fea42623          	sw	a0,-20(s0)
    lf_token_t* token = create_token(trigger->element_size);
80005bfc:	fec42783          	lw	a5,-20(s0)
80005c00:	0307a783          	lw	a5,48(a5)
80005c04:	00078513          	mv	a0,a5
80005c08:	e74fd0ef          	jal	ra,8000327c <create_token>
80005c0c:	fea42423          	sw	a0,-24(s0)
    token->value = value;
80005c10:	fe842783          	lw	a5,-24(s0)
80005c14:	fd842703          	lw	a4,-40(s0)
80005c18:	00e7a023          	sw	a4,0(a5)
    token->length = length;
80005c1c:	fe842783          	lw	a5,-24(s0)
80005c20:	fcc42703          	lw	a4,-52(s0)
80005c24:	00e7a423          	sw	a4,8(a5)
    return schedule_token(action, extra_delay, token);
80005c28:	fe842683          	lw	a3,-24(s0)
80005c2c:	fd042583          	lw	a1,-48(s0)
80005c30:	fd442603          	lw	a2,-44(s0)
80005c34:	fdc42503          	lw	a0,-36(s0)
80005c38:	ca4fb0ef          	jal	ra,800010dc <schedule_token>
80005c3c:	00050793          	mv	a5,a0
}
80005c40:	00078513          	mv	a0,a5
80005c44:	03c12083          	lw	ra,60(sp)
80005c48:	03812403          	lw	s0,56(sp)
80005c4c:	04010113          	addi	sp,sp,64
80005c50:	00008067          	ret

80005c54 <_lf_schedule_copy>:
/**
 * Schedule an action to occur with the specified value and time offset
 * with a copy of the specified value.
 * See reactor.h for documentation.
 */
handle_t _lf_schedule_copy(void* action, interval_t offset, void* value, int length) {
80005c54:	fc010113          	addi	sp,sp,-64
80005c58:	02112e23          	sw	ra,60(sp)
80005c5c:	02812c23          	sw	s0,56(sp)
80005c60:	04010413          	addi	s0,sp,64
80005c64:	fca42e23          	sw	a0,-36(s0)
80005c68:	fcb42823          	sw	a1,-48(s0)
80005c6c:	fcc42a23          	sw	a2,-44(s0)
80005c70:	fcd42c23          	sw	a3,-40(s0)
80005c74:	fce42623          	sw	a4,-52(s0)
    trigger_t* trigger = _lf_action_to_trigger(action);
80005c78:	fdc42503          	lw	a0,-36(s0)
80005c7c:	b21fe0ef          	jal	ra,8000479c <_lf_action_to_trigger>
80005c80:	fea42623          	sw	a0,-20(s0)
    if (value == NULL) {
80005c84:	fd842783          	lw	a5,-40(s0)
80005c88:	02079063          	bnez	a5,80005ca8 <_lf_schedule_copy+0x54>
        return schedule_token(action, offset, NULL);
80005c8c:	00000693          	li	a3,0
80005c90:	fd042583          	lw	a1,-48(s0)
80005c94:	fd442603          	lw	a2,-44(s0)
80005c98:	fdc42503          	lw	a0,-36(s0)
80005c9c:	c40fb0ef          	jal	ra,800010dc <schedule_token>
80005ca0:	00050793          	mv	a5,a0
80005ca4:	0880006f          	j	80005d2c <_lf_schedule_copy+0xd8>
    }
    if (trigger == NULL || trigger->token == NULL || trigger->token->element_size <= 0) {
80005ca8:	fec42783          	lw	a5,-20(s0)
80005cac:	02078063          	beqz	a5,80005ccc <_lf_schedule_copy+0x78>
80005cb0:	fec42783          	lw	a5,-20(s0)
80005cb4:	0207a783          	lw	a5,32(a5)
80005cb8:	00078a63          	beqz	a5,80005ccc <_lf_schedule_copy+0x78>
80005cbc:	fec42783          	lw	a5,-20(s0)
80005cc0:	0207a783          	lw	a5,32(a5)
80005cc4:	0047a783          	lw	a5,4(a5)
80005cc8:	00079663          	bnez	a5,80005cd4 <_lf_schedule_copy+0x80>
        // fprintf(stderr, "ERROR: schedule: Invalid trigger or element size.\n");
        return -1;
80005ccc:	fff00793          	li	a5,-1
80005cd0:	05c0006f          	j	80005d2c <_lf_schedule_copy+0xd8>
    }
    DEBUG_PRINT("schedule_copy: Allocating memory for payload (token value): %p.", trigger);
    // Initialize token with an array size of length and a reference count of 0.
    lf_token_t* token = __initialize_token(trigger->token, length);
80005cd4:	fec42783          	lw	a5,-20(s0)
80005cd8:	0207a783          	lw	a5,32(a5)
80005cdc:	fcc42583          	lw	a1,-52(s0)
80005ce0:	00078513          	mv	a0,a5
80005ce4:	e6cfd0ef          	jal	ra,80003350 <__initialize_token>
80005ce8:	fea42423          	sw	a0,-24(s0)
    // Copy the value into the newly allocated memory.
    memcpy(token->value, value, token->element_size * length);
80005cec:	fe842783          	lw	a5,-24(s0)
80005cf0:	0007a683          	lw	a3,0(a5)
80005cf4:	fe842783          	lw	a5,-24(s0)
80005cf8:	0047a703          	lw	a4,4(a5)
80005cfc:	fcc42783          	lw	a5,-52(s0)
80005d00:	02f707b3          	mul	a5,a4,a5
80005d04:	00078613          	mv	a2,a5
80005d08:	fd842583          	lw	a1,-40(s0)
80005d0c:	00068513          	mv	a0,a3
80005d10:	0f9030ef          	jal	ra,80009608 <memcpy>
    // The schedule function will increment the reference count.
    return schedule_token(action, offset, token);
80005d14:	fe842683          	lw	a3,-24(s0)
80005d18:	fd042583          	lw	a1,-48(s0)
80005d1c:	fd442603          	lw	a2,-44(s0)
80005d20:	fdc42503          	lw	a0,-36(s0)
80005d24:	bb8fb0ef          	jal	ra,800010dc <schedule_token>
80005d28:	00050793          	mv	a5,a0
}
80005d2c:	00078513          	mv	a0,a5
80005d30:	03c12083          	lw	ra,60(sp)
80005d34:	03812403          	lw	s0,56(sp)
80005d38:	04010113          	addi	sp,sp,64
80005d3c:	00008067          	ret

80005d40 <wait_until>:
 * execution plus the current_tag.time plus the specified logical time.  If this is not
 * interrupted, then advance current_tag.time by the specified logical_delay.
 * Return 0 if time advanced to the time of the event and -1 if the wait
 * was interrupted or if the timeout time was reached.
 */ 
int wait_until(instant_t logical_time_ns) {
80005d40:	fa010113          	addi	sp,sp,-96
80005d44:	04112e23          	sw	ra,92(sp)
80005d48:	04812c23          	sw	s0,88(sp)
80005d4c:	05212a23          	sw	s2,84(sp)
80005d50:	05312823          	sw	s3,80(sp)
80005d54:	05412623          	sw	s4,76(sp)
80005d58:	05512423          	sw	s5,72(sp)
80005d5c:	05612223          	sw	s6,68(sp)
80005d60:	05712023          	sw	s7,64(sp)
80005d64:	06010413          	addi	s0,sp,96
80005d68:	faa42423          	sw	a0,-88(s0)
80005d6c:	fab42623          	sw	a1,-84(s0)
    int return_value = 0;
80005d70:	fc042e23          	sw	zero,-36(s0)
    if (!fast) {
80005d74:	84918793          	addi	a5,gp,-1975 # 8000da79 <fast>
80005d78:	0007c783          	lbu	a5,0(a5)
80005d7c:	0017c793          	xori	a5,a5,1
80005d80:	0ff7f793          	andi	a5,a5,255
80005d84:	10078863          	beqz	a5,80005e94 <wait_until+0x154>
        DEBUG_PRINT("Waiting for logical time %lld.", logical_time_ns);
    
        // Get the current physical time.
        struct timespec current_physical_time;
        clock_gettime(CLOCK_REALTIME, &current_physical_time);
80005d88:	fc840793          	addi	a5,s0,-56
80005d8c:	00078593          	mv	a1,a5
80005d90:	00100513          	li	a0,1
80005d94:	ce5ff0ef          	jal	ra,80005a78 <clock_gettime>
    
        long long ns_to_wait = logical_time_ns
                - (current_physical_time.tv_sec * BILLION
80005d98:	fc842783          	lw	a5,-56(s0)
80005d9c:	00078a13          	mv	s4,a5
80005da0:	41f7d793          	srai	a5,a5,0x1f
80005da4:	00078a93          	mv	s5,a5
80005da8:	3b9ad7b7          	lui	a5,0x3b9ad
80005dac:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80005db0:	02fa8733          	mul	a4,s5,a5
80005db4:	00000793          	li	a5,0
80005db8:	02fa07b3          	mul	a5,s4,a5
80005dbc:	00f70733          	add	a4,a4,a5
80005dc0:	3b9ad7b7          	lui	a5,0x3b9ad
80005dc4:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80005dc8:	02fa06b3          	mul	a3,s4,a5
80005dcc:	02fa39b3          	mulhu	s3,s4,a5
80005dd0:	00068913          	mv	s2,a3
80005dd4:	013707b3          	add	a5,a4,s3
80005dd8:	00078993          	mv	s3,a5
                + current_physical_time.tv_nsec);
80005ddc:	fcc42783          	lw	a5,-52(s0)
80005de0:	00078b13          	mv	s6,a5
80005de4:	41f7d793          	srai	a5,a5,0x1f
80005de8:	00078b93          	mv	s7,a5
80005dec:	016907b3          	add	a5,s2,s6
80005df0:	00078713          	mv	a4,a5
80005df4:	01273733          	sltu	a4,a4,s2
80005df8:	01798833          	add	a6,s3,s7
80005dfc:	01070733          	add	a4,a4,a6
80005e00:	00070813          	mv	a6,a4
80005e04:	00078593          	mv	a1,a5
80005e08:	00080613          	mv	a2,a6
        long long ns_to_wait = logical_time_ns
80005e0c:	fa842683          	lw	a3,-88(s0)
80005e10:	fac42703          	lw	a4,-84(s0)
80005e14:	40b687b3          	sub	a5,a3,a1
80005e18:	00078513          	mv	a0,a5
80005e1c:	00a6b533          	sltu	a0,a3,a0
80005e20:	40c70833          	sub	a6,a4,a2
80005e24:	40a80733          	sub	a4,a6,a0
80005e28:	00070813          	mv	a6,a4
80005e2c:	fcf42823          	sw	a5,-48(s0)
80005e30:	fd042a23          	sw	a6,-44(s0)
    
        if (ns_to_wait <= 0) {
80005e34:	fd442783          	lw	a5,-44(s0)
80005e38:	00f04e63          	bgtz	a5,80005e54 <wait_until+0x114>
80005e3c:	fd442783          	lw	a5,-44(s0)
80005e40:	00079663          	bnez	a5,80005e4c <wait_until+0x10c>
80005e44:	fd042783          	lw	a5,-48(s0)
80005e48:	00079663          	bnez	a5,80005e54 <wait_until+0x114>
            return return_value;
80005e4c:	fdc42783          	lw	a5,-36(s0)
80005e50:	0480006f          	j	80005e98 <wait_until+0x158>
        }
    
        // timespec is seconds and nanoseconds.
        struct timespec wait_time = {(time_t)ns_to_wait / BILLION, (long)ns_to_wait % BILLION};
80005e54:	fd042703          	lw	a4,-48(s0)
80005e58:	3b9ad7b7          	lui	a5,0x3b9ad
80005e5c:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80005e60:	02f747b3          	div	a5,a4,a5
80005e64:	fcf42023          	sw	a5,-64(s0)
80005e68:	fd042703          	lw	a4,-48(s0)
80005e6c:	3b9ad7b7          	lui	a5,0x3b9ad
80005e70:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80005e74:	02f767b3          	rem	a5,a4,a5
80005e78:	fcf42223          	sw	a5,-60(s0)
        DEBUG_PRINT("Waiting %lld seconds, %lld nanoseconds.", ns_to_wait / BILLION, ns_to_wait % BILLION);
        struct timespec remaining_time;
        // FIXME: If the wait time is less than the time resolution, don't sleep.
        return_value = nanosleep(&wait_time, &remaining_time);
80005e7c:	fb840713          	addi	a4,s0,-72
80005e80:	fc040793          	addi	a5,s0,-64
80005e84:	00070593          	mv	a1,a4
80005e88:	00078513          	mv	a0,a5
80005e8c:	c35ff0ef          	jal	ra,80005ac0 <nanosleep>
80005e90:	fca42e23          	sw	a0,-36(s0)
    }
    return return_value;
80005e94:	fdc42783          	lw	a5,-36(s0)
}
80005e98:	00078513          	mv	a0,a5
80005e9c:	05c12083          	lw	ra,92(sp)
80005ea0:	05812403          	lw	s0,88(sp)
80005ea4:	05412903          	lw	s2,84(sp)
80005ea8:	05012983          	lw	s3,80(sp)
80005eac:	04c12a03          	lw	s4,76(sp)
80005eb0:	04812a83          	lw	s5,72(sp)
80005eb4:	04412b03          	lw	s6,68(sp)
80005eb8:	04012b83          	lw	s7,64(sp)
80005ebc:	06010113          	addi	sp,sp,96
80005ec0:	00008067          	ret

80005ec4 <print_snapshot>:

void print_snapshot() {
80005ec4:	ff010113          	addi	sp,sp,-16
80005ec8:	00812623          	sw	s0,12(sp)
80005ecc:	01010413          	addi	s0,sp,16
    // printf(">>> START Snapshot\n");
    // pqueue_dump(reaction_q, stdout, reaction_q->prt);
    // printf(">>> END Snapshot\n");
}
80005ed0:	00000013          	nop
80005ed4:	00c12403          	lw	s0,12(sp)
80005ed8:	01010113          	addi	sp,sp,16
80005edc:	00008067          	ret

80005ee0 <_lf_enqueue_reaction>:
/**
 * Put the specified reaction on the reaction queue.
 * This version does not acquire a mutex lock.
 * @param reaction The reaction.
 */
void _lf_enqueue_reaction(reaction_t* reaction) {
80005ee0:	fe010113          	addi	sp,sp,-32
80005ee4:	00112e23          	sw	ra,28(sp)
80005ee8:	00812c23          	sw	s0,24(sp)
80005eec:	02010413          	addi	s0,sp,32
80005ef0:	fea42623          	sw	a0,-20(s0)
    // Do not enqueue this reaction twice.
    if (pqueue_find_equal_same_priority(reaction_q, reaction) == NULL) {
80005ef4:	87c18793          	addi	a5,gp,-1924 # 8000daac <reaction_q>
80005ef8:	0007a783          	lw	a5,0(a5)
80005efc:	fec42583          	lw	a1,-20(s0)
80005f00:	00078513          	mv	a0,a5
80005f04:	cbcfc0ef          	jal	ra,800023c0 <pqueue_find_equal_same_priority>
80005f08:	00050793          	mv	a5,a0
80005f0c:	00079c63          	bnez	a5,80005f24 <_lf_enqueue_reaction+0x44>
        DEBUG_PRINT("Enqueing downstream reaction %p.", reaction);
        pqueue_insert(reaction_q, reaction);
80005f10:	87c18793          	addi	a5,gp,-1924 # 8000daac <reaction_q>
80005f14:	0007a783          	lw	a5,0(a5)
80005f18:	fec42583          	lw	a1,-20(s0)
80005f1c:	00078513          	mv	a0,a5
80005f20:	d30fc0ef          	jal	ra,80002450 <pqueue_insert>
    }
}
80005f24:	00000013          	nop
80005f28:	01c12083          	lw	ra,28(sp)
80005f2c:	01812403          	lw	s0,24(sp)
80005f30:	02010113          	addi	sp,sp,32
80005f34:	00008067          	ret

80005f38 <_lf_do_step>:
 * Execute all the reactions in the reaction queue at the current tag.
 * 
 * @return Returns 1 if the execution should continue and 0 if the execution
 *  should stop.
 */
int _lf_do_step() {
80005f38:	fa010113          	addi	sp,sp,-96
80005f3c:	04112e23          	sw	ra,92(sp)
80005f40:	04812c23          	sw	s0,88(sp)
80005f44:	05212a23          	sw	s2,84(sp)
80005f48:	05312823          	sw	s3,80(sp)
80005f4c:	05412623          	sw	s4,76(sp)
80005f50:	05512423          	sw	s5,72(sp)
80005f54:	05612223          	sw	s6,68(sp)
80005f58:	05712023          	sw	s7,64(sp)
80005f5c:	06010413          	addi	s0,sp,96
        // Invoke reactions.
    while(pqueue_size(reaction_q) > 0) {
80005f60:	1a80006f          	j	80006108 <_lf_do_step+0x1d0>
        // print_snapshot();
        reaction_t* reaction = (reaction_t*)pqueue_pop(reaction_q);
80005f64:	87c18793          	addi	a5,gp,-1924 # 8000daac <reaction_q>
80005f68:	0007a783          	lw	a5,0(a5)
80005f6c:	00078513          	mv	a0,a5
80005f70:	f00fc0ef          	jal	ra,80002670 <pqueue_pop>
80005f74:	fca42c23          	sw	a0,-40(s0)
        
        DEBUG_PRINT("Popped from reaction_q reaction with deadline: %lld.", reaction->deadline);
        DEBUG_PRINT("Address of reaction: %p.", reaction);

        bool violation = false;
80005f78:	fc040fa3          	sb	zero,-33(s0)
        // and invoke the deadline violation reaction instead of the reaction function
        // if a violation has occurred. Note that the violation reaction will be invoked
        // at most once per logical time value. If the violation reaction triggers the
        // same reaction at the current time value, even if at a future superdense time,
        // then the reaction will be invoked and the violation reaction will not be invoked again.
        if (reaction->deadline > 0LL) {
80005f7c:	fd842783          	lw	a5,-40(s0)
80005f80:	0447a803          	lw	a6,68(a5)
80005f84:	0407a783          	lw	a5,64(a5)
80005f88:	00080713          	mv	a4,a6
80005f8c:	00e04863          	bgtz	a4,80005f9c <_lf_do_step+0x64>
80005f90:	00080713          	mv	a4,a6
80005f94:	14071063          	bnez	a4,800060d4 <_lf_do_step+0x19c>
80005f98:	12078e63          	beqz	a5,800060d4 <_lf_do_step+0x19c>
            // Get the current physical time.
            struct timespec current_physical_time;
            clock_gettime(CLOCK_REALTIME, &current_physical_time);
80005f9c:	fc440793          	addi	a5,s0,-60
80005fa0:	00078593          	mv	a1,a5
80005fa4:	00100513          	li	a0,1
80005fa8:	ad1ff0ef          	jal	ra,80005a78 <clock_gettime>
            // Convert to instant_t.
            instant_t physical_time = 
                    current_physical_time.tv_sec * BILLION
80005fac:	fc442783          	lw	a5,-60(s0)
80005fb0:	00078a13          	mv	s4,a5
80005fb4:	41f7d793          	srai	a5,a5,0x1f
80005fb8:	00078a93          	mv	s5,a5
80005fbc:	3b9ad7b7          	lui	a5,0x3b9ad
80005fc0:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80005fc4:	02fa8733          	mul	a4,s5,a5
80005fc8:	00000793          	li	a5,0
80005fcc:	02fa07b3          	mul	a5,s4,a5
80005fd0:	00f70733          	add	a4,a4,a5
80005fd4:	3b9ad7b7          	lui	a5,0x3b9ad
80005fd8:	a0078793          	addi	a5,a5,-1536 # 3b9aca00 <buflen.2800+0x3b9ac97c>
80005fdc:	02fa06b3          	mul	a3,s4,a5
80005fe0:	02fa39b3          	mulhu	s3,s4,a5
80005fe4:	00068913          	mv	s2,a3
80005fe8:	013707b3          	add	a5,a4,s3
80005fec:	00078993          	mv	s3,a5
                    + current_physical_time.tv_nsec;
80005ff0:	fc842783          	lw	a5,-56(s0)
80005ff4:	00078b13          	mv	s6,a5
80005ff8:	41f7d793          	srai	a5,a5,0x1f
80005ffc:	00078b93          	mv	s7,a5
            instant_t physical_time = 
80006000:	016907b3          	add	a5,s2,s6
80006004:	00078713          	mv	a4,a5
80006008:	01273733          	sltu	a4,a4,s2
8000600c:	01798833          	add	a6,s3,s7
80006010:	01070733          	add	a4,a4,a6
80006014:	00070813          	mv	a6,a4
80006018:	fcf42823          	sw	a5,-48(s0)
8000601c:	fd042a23          	sw	a6,-44(s0)
            // There are currently two distinct deadline mechanisms:
            // local deadlines are defined with the reaction;
            // container deadlines are defined in the container.
            // They can have different deadlines, so we have to check both.
            // Handle the local deadline first.
            if (reaction->deadline > 0LL && physical_time > current_tag.time + reaction->deadline) {
80006020:	fd842783          	lw	a5,-40(s0)
80006024:	0447a803          	lw	a6,68(a5)
80006028:	0407a783          	lw	a5,64(a5)
8000602c:	00080713          	mv	a4,a6
80006030:	00e04863          	bgtz	a4,80006040 <_lf_do_step+0x108>
80006034:	00080713          	mv	a4,a6
80006038:	08071e63          	bnez	a4,800060d4 <_lf_do_step+0x19c>
8000603c:	08078c63          	beqz	a5,800060d4 <_lf_do_step+0x19c>
80006040:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
80006044:	0047a803          	lw	a6,4(a5)
80006048:	0007a783          	lw	a5,0(a5)
8000604c:	fd842703          	lw	a4,-40(s0)
80006050:	04072583          	lw	a1,64(a4)
80006054:	04472603          	lw	a2,68(a4)
80006058:	00b786b3          	add	a3,a5,a1
8000605c:	00068513          	mv	a0,a3
80006060:	00f53533          	sltu	a0,a0,a5
80006064:	00c80733          	add	a4,a6,a2
80006068:	00e507b3          	add	a5,a0,a4
8000606c:	00078713          	mv	a4,a5
80006070:	00068793          	mv	a5,a3
80006074:	00070813          	mv	a6,a4
80006078:	fd442703          	lw	a4,-44(s0)
8000607c:	00080693          	mv	a3,a6
80006080:	00e6cc63          	blt	a3,a4,80006098 <_lf_do_step+0x160>
80006084:	fd442703          	lw	a4,-44(s0)
80006088:	00080693          	mv	a3,a6
8000608c:	04d71463          	bne	a4,a3,800060d4 <_lf_do_step+0x19c>
80006090:	fd042703          	lw	a4,-48(s0)
80006094:	04e7f063          	bleu	a4,a5,800060d4 <_lf_do_step+0x19c>
                DEBUG_PRINT("Deadline violation.");
                // Deadline violation has occurred.
                violation = true;
80006098:	00100793          	li	a5,1
8000609c:	fcf40fa3          	sb	a5,-33(s0)
                // Invoke the local handler, if there is one.
                reaction_function_t handler = reaction->deadline_violation_handler;
800060a0:	fd842783          	lw	a5,-40(s0)
800060a4:	04c7a783          	lw	a5,76(a5)
800060a8:	fcf42623          	sw	a5,-52(s0)
                if (handler != NULL) {
800060ac:	fcc42783          	lw	a5,-52(s0)
800060b0:	02078263          	beqz	a5,800060d4 <_lf_do_step+0x19c>
                    (*handler)(reaction->self);
800060b4:	fd842783          	lw	a5,-40(s0)
800060b8:	0047a783          	lw	a5,4(a5)
800060bc:	fcc42703          	lw	a4,-52(s0)
800060c0:	00078513          	mv	a0,a5
800060c4:	000700e7          	jalr	a4
                    // If the reaction produced outputs, put the resulting
                    // triggered reactions into the queue.
                    schedule_output_reactions(reaction, 0);
800060c8:	00000593          	li	a1,0
800060cc:	fd842503          	lw	a0,-40(s0)
800060d0:	865fe0ef          	jal	ra,80004934 <schedule_output_reactions>
                }
            }
        }
        
        if (!violation) {
800060d4:	fdf44783          	lbu	a5,-33(s0)
800060d8:	0017c793          	xori	a5,a5,1
800060dc:	0ff7f793          	andi	a5,a5,255
800060e0:	02078463          	beqz	a5,80006108 <_lf_do_step+0x1d0>
            // Invoke the reaction function.
            tracepoint_reaction_starts(reaction, 0); // 0 indicates unthreaded.
            reaction->function(reaction->self);
800060e4:	fd842783          	lw	a5,-40(s0)
800060e8:	0007a703          	lw	a4,0(a5)
800060ec:	fd842783          	lw	a5,-40(s0)
800060f0:	0047a783          	lw	a5,4(a5)
800060f4:	00078513          	mv	a0,a5
800060f8:	000700e7          	jalr	a4
            tracepoint_reaction_ends(reaction, 0);

            // If the reaction produced outputs, put the resulting triggered
            // reactions into the queue.
            schedule_output_reactions(reaction, 0);
800060fc:	00000593          	li	a1,0
80006100:	fd842503          	lw	a0,-40(s0)
80006104:	831fe0ef          	jal	ra,80004934 <schedule_output_reactions>
    while(pqueue_size(reaction_q) > 0) {
80006108:	87c18793          	addi	a5,gp,-1924 # 8000daac <reaction_q>
8000610c:	0007a783          	lw	a5,0(a5)
80006110:	00078513          	mv	a0,a5
80006114:	e85fb0ef          	jal	ra,80001f98 <pqueue_size>
80006118:	00050793          	mv	a5,a0
8000611c:	e40794e3          	bnez	a5,80005f64 <_lf_do_step+0x2c>
    }
    
    // No more reactions should be blocked at this point.
    //assert(pqueue_size(blocked_q) == 0);

    if (compare_tags(current_tag, stop_tag) >= 0) {
80006120:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
80006124:	0007a603          	lw	a2,0(a5)
80006128:	0047a683          	lw	a3,4(a5)
8000612c:	0087a703          	lw	a4,8(a5)
80006130:	00c7a783          	lw	a5,12(a5)
80006134:	fac42823          	sw	a2,-80(s0)
80006138:	fad42a23          	sw	a3,-76(s0)
8000613c:	fae42c23          	sw	a4,-72(s0)
80006140:	faf42e23          	sw	a5,-68(s0)
80006144:	00007797          	auipc	a5,0x7
80006148:	f3c78793          	addi	a5,a5,-196 # 8000d080 <stop_tag>
8000614c:	0007a603          	lw	a2,0(a5)
80006150:	0047a683          	lw	a3,4(a5)
80006154:	0087a703          	lw	a4,8(a5)
80006158:	00c7a783          	lw	a5,12(a5)
8000615c:	fac42023          	sw	a2,-96(s0)
80006160:	fad42223          	sw	a3,-92(s0)
80006164:	fae42423          	sw	a4,-88(s0)
80006168:	faf42623          	sw	a5,-84(s0)
8000616c:	fa040713          	addi	a4,s0,-96
80006170:	fb040793          	addi	a5,s0,-80
80006174:	00070593          	mv	a1,a4
80006178:	00078513          	mv	a0,a5
8000617c:	ce8fb0ef          	jal	ra,80001664 <compare_tags>
80006180:	00050793          	mv	a5,a0
80006184:	0007c663          	bltz	a5,80006190 <_lf_do_step+0x258>
        return 0;
80006188:	00000793          	li	a5,0
8000618c:	0080006f          	j	80006194 <_lf_do_step+0x25c>
    }

    return 1;
80006190:	00100793          	li	a5,1
}
80006194:	00078513          	mv	a0,a5
80006198:	05c12083          	lw	ra,92(sp)
8000619c:	05812403          	lw	s0,88(sp)
800061a0:	05412903          	lw	s2,84(sp)
800061a4:	05012983          	lw	s3,80(sp)
800061a8:	04c12a03          	lw	s4,76(sp)
800061ac:	04812a83          	lw	s5,72(sp)
800061b0:	04412b03          	lw	s6,68(sp)
800061b4:	04012b83          	lw	s7,64(sp)
800061b8:	06010113          	addi	sp,sp,96
800061bc:	00008067          	ret

800061c0 <next>:
// If the -timeout option has been given on the command line, then return
// 0 when the logical time duration matches the specified duration.
// Also return 0 if there are no more events in the queue and
// the keepalive command-line option has not been given.
// Otherwise, return 1.
int next() {
800061c0:	fa010113          	addi	sp,sp,-96
800061c4:	04112e23          	sw	ra,92(sp)
800061c8:	04812c23          	sw	s0,88(sp)
800061cc:	06010413          	addi	s0,sp,96
    event_t* event = (event_t*)pqueue_peek(event_q);
800061d0:	87818793          	addi	a5,gp,-1928 # 8000daa8 <event_q>
800061d4:	0007a783          	lw	a5,0(a5)
800061d8:	00078513          	mv	a0,a5
800061dc:	d3cfc0ef          	jal	ra,80002718 <pqueue_peek>
800061e0:	fea42623          	sw	a0,-20(s0)
    //pqueue_dump(event_q, stdout, event_q->prt);
    // If there is no next event and -keepalive has been specified
    // on the command line, then we will wait the maximum time possible.
    // FIXME: is LLONG_MAX different from FOREVER?
    tag_t next_tag = { .time = LLONG_MAX, .microstep = UINT_MAX};
800061e4:	00007797          	auipc	a5,0x7
800061e8:	97478793          	addi	a5,a5,-1676 # 8000cb58 <__ascii_wctomb+0x1f0>
800061ec:	0007a603          	lw	a2,0(a5)
800061f0:	0047a683          	lw	a3,4(a5)
800061f4:	0087a703          	lw	a4,8(a5)
800061f8:	00c7a783          	lw	a5,12(a5)
800061fc:	fcc42423          	sw	a2,-56(s0)
80006200:	fcd42623          	sw	a3,-52(s0)
80006204:	fce42823          	sw	a4,-48(s0)
80006208:	fcf42a23          	sw	a5,-44(s0)
    if (event == NULL) {
8000620c:	fec42783          	lw	a5,-20(s0)
80006210:	06079663          	bnez	a5,8000627c <next+0xbc>
        // No event in the queue.
        if (!keepalive_specified) { // FIXME: validator should issue a warning for unthreaded implementation
80006214:	85118793          	addi	a5,gp,-1967 # 8000da81 <keepalive_specified>
80006218:	0007c783          	lbu	a5,0(a5)
8000621c:	0017c793          	xori	a5,a5,1
80006220:	0ff7f793          	andi	a5,a5,255
80006224:	0a078663          	beqz	a5,800062d0 <next+0x110>
                                    // schedule is not thread-safe
            _lf_set_stop_tag((tag_t){.time=current_tag.time,.microstep=current_tag.microstep+1});
80006228:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
8000622c:	0047a803          	lw	a6,4(a5)
80006230:	0007a783          	lw	a5,0(a5)
80006234:	fcf42c23          	sw	a5,-40(s0)
80006238:	fd042e23          	sw	a6,-36(s0)
8000623c:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
80006240:	0087a783          	lw	a5,8(a5)
80006244:	00178793          	addi	a5,a5,1
80006248:	fef42023          	sw	a5,-32(s0)
8000624c:	fd842603          	lw	a2,-40(s0)
80006250:	fdc42683          	lw	a3,-36(s0)
80006254:	fe042703          	lw	a4,-32(s0)
80006258:	fe442783          	lw	a5,-28(s0)
8000625c:	fac42823          	sw	a2,-80(s0)
80006260:	fad42a23          	sw	a3,-76(s0)
80006264:	fae42c23          	sw	a4,-72(s0)
80006268:	faf42e23          	sw	a5,-68(s0)
8000626c:	fb040793          	addi	a5,s0,-80
80006270:	00078513          	mv	a0,a5
80006274:	871fc0ef          	jal	ra,80002ae4 <_lf_set_stop_tag>
80006278:	0580006f          	j	800062d0 <next+0x110>
        }
    } else {
        next_tag.time = event->time;
8000627c:	fec42783          	lw	a5,-20(s0)
80006280:	0047a803          	lw	a6,4(a5)
80006284:	0007a783          	lw	a5,0(a5)
80006288:	fcf42423          	sw	a5,-56(s0)
8000628c:	fd042623          	sw	a6,-52(s0)
        // Deduce the microstep
        if (next_tag.time == current_tag.time) {
80006290:	fc842683          	lw	a3,-56(s0)
80006294:	fcc42703          	lw	a4,-52(s0)
80006298:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
8000629c:	0047a803          	lw	a6,4(a5)
800062a0:	0007a783          	lw	a5,0(a5)
800062a4:	00068593          	mv	a1,a3
800062a8:	00078613          	mv	a2,a5
800062ac:	02c59063          	bne	a1,a2,800062cc <next+0x10c>
800062b0:	00080793          	mv	a5,a6
800062b4:	00f71c63          	bne	a4,a5,800062cc <next+0x10c>
            next_tag.microstep = get_microstep() + 1;
800062b8:	e04fb0ef          	jal	ra,800018bc <get_microstep>
800062bc:	00050793          	mv	a5,a0
800062c0:	00178793          	addi	a5,a5,1
800062c4:	fcf42823          	sw	a5,-48(s0)
800062c8:	0080006f          	j	800062d0 <next+0x110>
        } else {
            next_tag.microstep = 0;
800062cc:	fc042823          	sw	zero,-48(s0)
        }
    }
    
    if (_lf_is_tag_after_stop_tag(next_tag)) {
800062d0:	fc842603          	lw	a2,-56(s0)
800062d4:	fcc42683          	lw	a3,-52(s0)
800062d8:	fd042703          	lw	a4,-48(s0)
800062dc:	fd442783          	lw	a5,-44(s0)
800062e0:	fac42823          	sw	a2,-80(s0)
800062e4:	fad42a23          	sw	a3,-76(s0)
800062e8:	fae42c23          	sw	a4,-72(s0)
800062ec:	faf42e23          	sw	a5,-68(s0)
800062f0:	fb040793          	addi	a5,s0,-80
800062f4:	00078513          	mv	a0,a5
800062f8:	8ccfd0ef          	jal	ra,800033c4 <_lf_is_tag_after_stop_tag>
800062fc:	00050793          	mv	a5,a0
80006300:	02078663          	beqz	a5,8000632c <next+0x16c>
        // Cannot process events after the stop tag.
        next_tag = stop_tag;
80006304:	00007797          	auipc	a5,0x7
80006308:	d7c78793          	addi	a5,a5,-644 # 8000d080 <stop_tag>
8000630c:	0007a603          	lw	a2,0(a5)
80006310:	0047a683          	lw	a3,4(a5)
80006314:	0087a703          	lw	a4,8(a5)
80006318:	00c7a783          	lw	a5,12(a5)
8000631c:	fcc42423          	sw	a2,-56(s0)
80006320:	fcd42623          	sw	a3,-52(s0)
80006324:	fce42823          	sw	a4,-48(s0)
80006328:	fcf42a23          	sw	a5,-44(s0)
    }

    // printf("DEBUG: Next event (elapsed) time is %lld.\n", next_tag.time - start_time);
    // Wait until physical time >= event.time.
    // The wait_until function will advance current_tag.time.
    if (wait_until(next_tag.time) != 0) {
8000632c:	fc842783          	lw	a5,-56(s0)
80006330:	fcc42803          	lw	a6,-52(s0)
80006334:	00078513          	mv	a0,a5
80006338:	00080593          	mv	a1,a6
8000633c:	a05ff0ef          	jal	ra,80005d40 <wait_until>
80006340:	00050793          	mv	a5,a0
80006344:	00078663          	beqz	a5,80006350 <next+0x190>
        // be called asynchronously. Perhaps in some runtime such as for a
        // PRET machine this will be supported, so here we handle this as
        // if an asynchronous call to schedule has occurred. In that case,
        // we should return 1 to let the runtime loop around to see what
        // is on the event queue.
        return 1;
80006348:	00100793          	li	a5,1
8000634c:	0940006f          	j	800063e0 <next+0x220>
    }

    // At this point, finally, we have an event to process.
    // Advance current time to match that of the first event on the queue.
    _lf_advance_logical_time(next_tag.time);
80006350:	fc842783          	lw	a5,-56(s0)
80006354:	fcc42803          	lw	a6,-52(s0)
80006358:	00078513          	mv	a0,a5
8000635c:	00080593          	mv	a1,a6
80006360:	c64fe0ef          	jal	ra,800047c4 <_lf_advance_logical_time>

    if (compare_tags(current_tag, stop_tag) >= 0) {        
80006364:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
80006368:	0007a603          	lw	a2,0(a5)
8000636c:	0047a683          	lw	a3,4(a5)
80006370:	0087a703          	lw	a4,8(a5)
80006374:	00c7a783          	lw	a5,12(a5)
80006378:	fac42823          	sw	a2,-80(s0)
8000637c:	fad42a23          	sw	a3,-76(s0)
80006380:	fae42c23          	sw	a4,-72(s0)
80006384:	faf42e23          	sw	a5,-68(s0)
80006388:	00007797          	auipc	a5,0x7
8000638c:	cf878793          	addi	a5,a5,-776 # 8000d080 <stop_tag>
80006390:	0007a603          	lw	a2,0(a5)
80006394:	0047a683          	lw	a3,4(a5)
80006398:	0087a703          	lw	a4,8(a5)
8000639c:	00c7a783          	lw	a5,12(a5)
800063a0:	fac42023          	sw	a2,-96(s0)
800063a4:	fad42223          	sw	a3,-92(s0)
800063a8:	fae42423          	sw	a4,-88(s0)
800063ac:	faf42623          	sw	a5,-84(s0)
800063b0:	fa040713          	addi	a4,s0,-96
800063b4:	fb040793          	addi	a5,s0,-80
800063b8:	00070593          	mv	a1,a4
800063bc:	00078513          	mv	a0,a5
800063c0:	aa4fb0ef          	jal	ra,80001664 <compare_tags>
800063c4:	00050793          	mv	a5,a0
800063c8:	0007c463          	bltz	a5,800063d0 <next+0x210>
        __trigger_shutdown_reactions();
800063cc:	569010ef          	jal	ra,80008134 <__trigger_shutdown_reactions>
    }

    // Invoke code that must execute before starting a new logical time round,
    // such as initializing outputs to be absent.
    __start_time_step();
800063d0:	c8dfc0ef          	jal	ra,8000305c <__start_time_step>
    
    // Pop all events from event_q with timestamp equal to current_tag.time,
    // extract all the reactions triggered by these events, and
    // stick them into the reaction queue.
    __pop_events();
800063d4:	888fd0ef          	jal	ra,8000345c <__pop_events>

    return _lf_do_step();
800063d8:	b61ff0ef          	jal	ra,80005f38 <_lf_do_step>
800063dc:	00050793          	mv	a5,a0
}
800063e0:	00078513          	mv	a0,a5
800063e4:	05c12083          	lw	ra,92(sp)
800063e8:	05812403          	lw	s0,88(sp)
800063ec:	06010113          	addi	sp,sp,96
800063f0:	00008067          	ret

800063f4 <request_stop>:

/**
 * Stop execution at the conclusion of the next microstep.
 */
void request_stop() {
800063f4:	ff010113          	addi	sp,sp,-16
800063f8:	00812623          	sw	s0,12(sp)
800063fc:	01010413          	addi	s0,sp,16
    stop_tag = current_tag;
80006400:	00007797          	auipc	a5,0x7
80006404:	c8078793          	addi	a5,a5,-896 # 8000d080 <stop_tag>
80006408:	8b818713          	addi	a4,gp,-1864 # 8000dae8 <current_tag>
8000640c:	00072583          	lw	a1,0(a4)
80006410:	00472603          	lw	a2,4(a4)
80006414:	00872683          	lw	a3,8(a4)
80006418:	00c72703          	lw	a4,12(a4)
8000641c:	00b7a023          	sw	a1,0(a5)
80006420:	00c7a223          	sw	a2,4(a5)
80006424:	00d7a423          	sw	a3,8(a5)
80006428:	00e7a623          	sw	a4,12(a5)
    stop_tag.microstep++;
8000642c:	00007797          	auipc	a5,0x7
80006430:	c5478793          	addi	a5,a5,-940 # 8000d080 <stop_tag>
80006434:	0087a783          	lw	a5,8(a5)
80006438:	00178713          	addi	a4,a5,1
8000643c:	00007797          	auipc	a5,0x7
80006440:	c4478793          	addi	a5,a5,-956 # 8000d080 <stop_tag>
80006444:	00e7a423          	sw	a4,8(a5)
}
80006448:	00000013          	nop
8000644c:	00c12403          	lw	s0,12(sp)
80006450:	01010113          	addi	sp,sp,16
80006454:	00008067          	ret

80006458 <main>:

int main(int argc, char* argv[]) {
80006458:	fc010113          	addi	sp,sp,-64
8000645c:	02112e23          	sw	ra,60(sp)
80006460:	02812c23          	sw	s0,56(sp)
80006464:	04010413          	addi	s0,sp,64
80006468:	fea42623          	sw	a0,-20(s0)
8000646c:	feb42423          	sw	a1,-24(s0)
    // Invoke the function that optionally provides default command-line options.
    __set_default_command_line_options();
80006470:	194010ef          	jal	ra,80007604 <__set_default_command_line_options>

    if (process_args(default_argc, default_argv)
80006474:	89018793          	addi	a5,gp,-1904 # 8000dac0 <default_argc>
80006478:	0007a703          	lw	a4,0(a5)
8000647c:	89418793          	addi	a5,gp,-1900 # 8000dac4 <default_argv>
80006480:	0007a783          	lw	a5,0(a5)
80006484:	00078593          	mv	a1,a5
80006488:	00070513          	mv	a0,a4
8000648c:	8e1fe0ef          	jal	ra,80004d6c <process_args>
80006490:	00050793          	mv	a5,a0
80006494:	0c078263          	beqz	a5,80006558 <main+0x100>
            && process_args(argc, argv)) {
80006498:	fe842583          	lw	a1,-24(s0)
8000649c:	fec42503          	lw	a0,-20(s0)
800064a0:	8cdfe0ef          	jal	ra,80004d6c <process_args>
800064a4:	00050793          	mv	a5,a0
800064a8:	0a078863          	beqz	a5,80006558 <main+0x100>
        initialize();
800064ac:	968ff0ef          	jal	ra,80005614 <initialize>
        _lf_execution_started = true;
800064b0:	85018793          	addi	a5,gp,-1968 # 8000da80 <_lf_execution_started>
800064b4:	00100713          	li	a4,1
800064b8:	00e78023          	sb	a4,0(a5)
        __trigger_startup_reactions();
800064bc:	30d010ef          	jal	ra,80007fc8 <__trigger_startup_reactions>
        __initialize_timers(); 
800064c0:	385010ef          	jal	ra,80008044 <__initialize_timers>
        // If the stop_tag is (0,0), also insert the shutdown
        // reactions. This can only happen if the timeout time
        // was set to 0.
        if (compare_tags(current_tag, stop_tag) >= 0) {
800064c4:	8b818793          	addi	a5,gp,-1864 # 8000dae8 <current_tag>
800064c8:	0007a603          	lw	a2,0(a5)
800064cc:	0047a683          	lw	a3,4(a5)
800064d0:	0087a703          	lw	a4,8(a5)
800064d4:	00c7a783          	lw	a5,12(a5)
800064d8:	fcc42823          	sw	a2,-48(s0)
800064dc:	fcd42a23          	sw	a3,-44(s0)
800064e0:	fce42c23          	sw	a4,-40(s0)
800064e4:	fcf42e23          	sw	a5,-36(s0)
800064e8:	00007797          	auipc	a5,0x7
800064ec:	b9878793          	addi	a5,a5,-1128 # 8000d080 <stop_tag>
800064f0:	0007a603          	lw	a2,0(a5)
800064f4:	0047a683          	lw	a3,4(a5)
800064f8:	0087a703          	lw	a4,8(a5)
800064fc:	00c7a783          	lw	a5,12(a5)
80006500:	fcc42023          	sw	a2,-64(s0)
80006504:	fcd42223          	sw	a3,-60(s0)
80006508:	fce42423          	sw	a4,-56(s0)
8000650c:	fcf42623          	sw	a5,-52(s0)
80006510:	fc040713          	addi	a4,s0,-64
80006514:	fd040793          	addi	a5,s0,-48
80006518:	00070593          	mv	a1,a4
8000651c:	00078513          	mv	a0,a5
80006520:	944fb0ef          	jal	ra,80001664 <compare_tags>
80006524:	00050793          	mv	a5,a0
80006528:	0007c463          	bltz	a5,80006530 <main+0xd8>
            __trigger_shutdown_reactions(); // __trigger_shutdown_reactions();
8000652c:	409010ef          	jal	ra,80008134 <__trigger_shutdown_reactions>
        }
        // Handle reactions triggered at time (T,m).
        if (_lf_do_step()) {
80006530:	a09ff0ef          	jal	ra,80005f38 <_lf_do_step>
80006534:	00050793          	mv	a5,a0
80006538:	00078a63          	beqz	a5,8000654c <main+0xf4>
            while (next() != 0);
8000653c:	00000013          	nop
80006540:	c81ff0ef          	jal	ra,800061c0 <next>
80006544:	00050793          	mv	a5,a0
80006548:	fe079ce3          	bnez	a5,80006540 <main+0xe8>
        }
        termination();
8000654c:	b88ff0ef          	jal	ra,800058d4 <termination>
        // __spike_return(0);
        return 0;
80006550:	00000793          	li	a5,0
80006554:	00c0006f          	j	80006560 <main+0x108>
    } else {
        // printf("DEBUG: invoking termination.\n");
        termination();
80006558:	b7cff0ef          	jal	ra,800058d4 <termination>
        // __spike_return(1);
        return -1;
8000655c:	fff00793          	li	a5,-1
    }
}
80006560:	00078513          	mv	a0,a5
80006564:	03c12083          	lw	ra,60(sp)
80006568:	03812403          	lw	s0,56(sp)
8000656c:	04010113          	addi	sp,sp,64
80006570:	00008067          	ret

80006574 <controllerreaction_function_0>:
80006574:	fd010113          	addi	sp,sp,-48
80006578:	02812623          	sw	s0,44(sp)
8000657c:	03010413          	addi	s0,sp,48
80006580:	fca42e23          	sw	a0,-36(s0)
80006584:	fdc42783          	lw	a5,-36(s0)
80006588:	fef42623          	sw	a5,-20(s0)
8000658c:	fec42783          	lw	a5,-20(s0)
80006590:	02c7a783          	lw	a5,44(a5)
80006594:	fef42423          	sw	a5,-24(s0)
80006598:	fec42783          	lw	a5,-20(s0)
8000659c:	0307a783          	lw	a5,48(a5)
800065a0:	fef42223          	sw	a5,-28(s0)
800065a4:	8f0007b7          	lui	a5,0x8f000
800065a8:	00001737          	lui	a4,0x1
800065ac:	49a70713          	addi	a4,a4,1178 # 149a <buflen.2800+0x1416>
800065b0:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
800065b4:	fe842783          	lw	a5,-24(s0)
800065b8:	0017c783          	lbu	a5,1(a5)
800065bc:	02078063          	beqz	a5,800065dc <controllerreaction_function_0+0x68>
800065c0:	fe842783          	lw	a5,-24(s0)
800065c4:	0007c783          	lbu	a5,0(a5)
800065c8:	00078a63          	beqz	a5,800065dc <controllerreaction_function_0+0x68>
800065cc:	fec42783          	lw	a5,-20(s0)
800065d0:	00100713          	li	a4,1
800065d4:	00e7a223          	sw	a4,4(a5)
800065d8:	02c0006f          	j	80006604 <controllerreaction_function_0+0x90>
800065dc:	fe842783          	lw	a5,-24(s0)
800065e0:	0017c783          	lbu	a5,1(a5)
800065e4:	02078063          	beqz	a5,80006604 <controllerreaction_function_0+0x90>
800065e8:	fe842783          	lw	a5,-24(s0)
800065ec:	0007c783          	lbu	a5,0(a5)
800065f0:	0017c793          	xori	a5,a5,1
800065f4:	0ff7f793          	andi	a5,a5,255
800065f8:	00078663          	beqz	a5,80006604 <controllerreaction_function_0+0x90>
800065fc:	fec42783          	lw	a5,-20(s0)
80006600:	0007a223          	sw	zero,4(a5)
80006604:	8f0007b7          	lui	a5,0x8f000
80006608:	00002737          	lui	a4,0x2
8000660c:	49a70713          	addi	a4,a4,1178 # 249a <buflen.2800+0x2416>
80006610:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
80006614:	00000013          	nop
80006618:	02c12403          	lw	s0,44(sp)
8000661c:	03010113          	addi	sp,sp,48
80006620:	00008067          	ret

80006624 <controllerreaction_function_1>:
80006624:	fc010113          	addi	sp,sp,-64
80006628:	02112e23          	sw	ra,60(sp)
8000662c:	02812c23          	sw	s0,56(sp)
80006630:	04010413          	addi	s0,sp,64
80006634:	fca42623          	sw	a0,-52(s0)
80006638:	fcc42783          	lw	a5,-52(s0)
8000663c:	fef42623          	sw	a5,-20(s0)
80006640:	fec42783          	lw	a5,-20(s0)
80006644:	01c7a783          	lw	a5,28(a5)
80006648:	fef42423          	sw	a5,-24(s0)
8000664c:	fec42783          	lw	a5,-20(s0)
80006650:	0207a783          	lw	a5,32(a5)
80006654:	fef42223          	sw	a5,-28(s0)
80006658:	fec42783          	lw	a5,-20(s0)
8000665c:	03c78793          	addi	a5,a5,60
80006660:	fef42023          	sw	a5,-32(s0)
80006664:	8f0007b7          	lui	a5,0x8f000
80006668:	00001737          	lui	a4,0x1
8000666c:	49a70713          	addi	a4,a4,1178 # 149a <buflen.2800+0x1416>
80006670:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
80006674:	00800513          	li	a0,8
80006678:	365040ef          	jal	ra,8000b1dc <malloc>
8000667c:	00050793          	mv	a5,a0
80006680:	fcf42e23          	sw	a5,-36(s0)
80006684:	fe042783          	lw	a5,-32(s0)
80006688:	00100713          	li	a4,1
8000668c:	00e78223          	sb	a4,4(a5)
80006690:	fe042783          	lw	a5,-32(s0)
80006694:	00c7a783          	lw	a5,12(a5)
80006698:	00200613          	li	a2,2
8000669c:	fdc42583          	lw	a1,-36(s0)
800066a0:	00078513          	mv	a0,a5
800066a4:	c31fc0ef          	jal	ra,800032d4 <__initialize_token_with_value>
800066a8:	fca42c23          	sw	a0,-40(s0)
800066ac:	fe042783          	lw	a5,-32(s0)
800066b0:	0087a703          	lw	a4,8(a5)
800066b4:	fd842783          	lw	a5,-40(s0)
800066b8:	00e7a623          	sw	a4,12(a5)
800066bc:	fe042783          	lw	a5,-32(s0)
800066c0:	fd842703          	lw	a4,-40(s0)
800066c4:	00e7a623          	sw	a4,12(a5)
800066c8:	fd842783          	lw	a5,-40(s0)
800066cc:	0007a703          	lw	a4,0(a5)
800066d0:	fe042783          	lw	a5,-32(s0)
800066d4:	00e7a023          	sw	a4,0(a5)
800066d8:	fec42783          	lw	a5,-20(s0)
800066dc:	0047a783          	lw	a5,4(a5)
800066e0:	00100713          	li	a4,1
800066e4:	06e78263          	beq	a5,a4,80006748 <controllerreaction_function_1+0x124>
800066e8:	00100713          	li	a4,1
800066ec:	00f74663          	blt	a4,a5,800066f8 <controllerreaction_function_1+0xd4>
800066f0:	00078e63          	beqz	a5,8000670c <controllerreaction_function_1+0xe8>
800066f4:	2080006f          	j	800068fc <controllerreaction_function_1+0x2d8>
800066f8:	00200713          	li	a4,2
800066fc:	0ce78e63          	beq	a5,a4,800067d8 <controllerreaction_function_1+0x1b4>
80006700:	00300713          	li	a4,3
80006704:	16e78463          	beq	a5,a4,8000686c <controllerreaction_function_1+0x248>
80006708:	1f40006f          	j	800068fc <controllerreaction_function_1+0x2d8>
8000670c:	00006517          	auipc	a0,0x6
80006710:	45c50513          	addi	a0,a0,1116 # 8000cb68 <__ascii_wctomb+0x200>
80006714:	521020ef          	jal	ra,80009434 <printf>
80006718:	fe042783          	lw	a5,-32(s0)
8000671c:	0007a783          	lw	a5,0(a5)
80006720:	fec42703          	lw	a4,-20(s0)
80006724:	00c72703          	lw	a4,12(a4)
80006728:	00e7a023          	sw	a4,0(a5)
8000672c:	fe042783          	lw	a5,-32(s0)
80006730:	0007a783          	lw	a5,0(a5)
80006734:	00478793          	addi	a5,a5,4
80006738:	fec42703          	lw	a4,-20(s0)
8000673c:	00c72703          	lw	a4,12(a4)
80006740:	00e7a023          	sw	a4,0(a5)
80006744:	1b80006f          	j	800068fc <controllerreaction_function_1+0x2d8>
80006748:	fe842783          	lw	a5,-24(s0)
8000674c:	0007c783          	lbu	a5,0(a5)
80006750:	00078a63          	beqz	a5,80006764 <controllerreaction_function_1+0x140>
80006754:	fec42783          	lw	a5,-20(s0)
80006758:	00300713          	li	a4,3
8000675c:	00e7a223          	sw	a4,4(a5)
80006760:	19c0006f          	j	800068fc <controllerreaction_function_1+0x2d8>
80006764:	00006517          	auipc	a0,0x6
80006768:	41050513          	addi	a0,a0,1040 # 8000cb74 <__ascii_wctomb+0x20c>
8000676c:	4c9020ef          	jal	ra,80009434 <printf>
80006770:	fec42783          	lw	a5,-20(s0)
80006774:	0107a783          	lw	a5,16(a5)
80006778:	00178713          	addi	a4,a5,1
8000677c:	fec42783          	lw	a5,-20(s0)
80006780:	00e7a823          	sw	a4,16(a5)
80006784:	fe042783          	lw	a5,-32(s0)
80006788:	0007a783          	lw	a5,0(a5)
8000678c:	fec42703          	lw	a4,-20(s0)
80006790:	00872703          	lw	a4,8(a4)
80006794:	00e7a023          	sw	a4,0(a5)
80006798:	fe042783          	lw	a5,-32(s0)
8000679c:	0007a783          	lw	a5,0(a5)
800067a0:	00478793          	addi	a5,a5,4
800067a4:	fec42703          	lw	a4,-20(s0)
800067a8:	00872703          	lw	a4,8(a4)
800067ac:	00e7a023          	sw	a4,0(a5)
800067b0:	fec42783          	lw	a5,-20(s0)
800067b4:	0107a703          	lw	a4,16(a5)
800067b8:	01400793          	li	a5,20
800067bc:	12e7d663          	ble	a4,a5,800068e8 <controllerreaction_function_1+0x2c4>
800067c0:	fec42783          	lw	a5,-20(s0)
800067c4:	0007a823          	sw	zero,16(a5)
800067c8:	fec42783          	lw	a5,-20(s0)
800067cc:	00200713          	li	a4,2
800067d0:	00e7a223          	sw	a4,4(a5)
800067d4:	1140006f          	j	800068e8 <controllerreaction_function_1+0x2c4>
800067d8:	fe842783          	lw	a5,-24(s0)
800067dc:	0007c783          	lbu	a5,0(a5)
800067e0:	00078a63          	beqz	a5,800067f4 <controllerreaction_function_1+0x1d0>
800067e4:	fec42783          	lw	a5,-20(s0)
800067e8:	00300713          	li	a4,3
800067ec:	00e7a223          	sw	a4,4(a5)
800067f0:	10c0006f          	j	800068fc <controllerreaction_function_1+0x2d8>
800067f4:	00006517          	auipc	a0,0x6
800067f8:	39050513          	addi	a0,a0,912 # 8000cb84 <__ascii_wctomb+0x21c>
800067fc:	439020ef          	jal	ra,80009434 <printf>
80006800:	fec42783          	lw	a5,-20(s0)
80006804:	0187a783          	lw	a5,24(a5)
80006808:	00178713          	addi	a4,a5,1
8000680c:	fec42783          	lw	a5,-20(s0)
80006810:	00e7ac23          	sw	a4,24(a5)
80006814:	fe042783          	lw	a5,-32(s0)
80006818:	0007a783          	lw	a5,0(a5)
8000681c:	fec42703          	lw	a4,-20(s0)
80006820:	00872703          	lw	a4,8(a4)
80006824:	00e7a023          	sw	a4,0(a5)
80006828:	fec42783          	lw	a5,-20(s0)
8000682c:	0087a703          	lw	a4,8(a5)
80006830:	fe042783          	lw	a5,-32(s0)
80006834:	0007a783          	lw	a5,0(a5)
80006838:	00478793          	addi	a5,a5,4
8000683c:	40e00733          	neg	a4,a4
80006840:	00e7a023          	sw	a4,0(a5)
80006844:	fec42783          	lw	a5,-20(s0)
80006848:	0187a703          	lw	a4,24(a5)
8000684c:	00a00793          	li	a5,10
80006850:	0ae7d063          	ble	a4,a5,800068f0 <controllerreaction_function_1+0x2cc>
80006854:	fec42783          	lw	a5,-20(s0)
80006858:	0007ac23          	sw	zero,24(a5)
8000685c:	fec42783          	lw	a5,-20(s0)
80006860:	00100713          	li	a4,1
80006864:	00e7a223          	sw	a4,4(a5)
80006868:	0880006f          	j	800068f0 <controllerreaction_function_1+0x2cc>
8000686c:	00006517          	auipc	a0,0x6
80006870:	32850513          	addi	a0,a0,808 # 8000cb94 <__ascii_wctomb+0x22c>
80006874:	3c1020ef          	jal	ra,80009434 <printf>
80006878:	fec42783          	lw	a5,-20(s0)
8000687c:	0147a783          	lw	a5,20(a5)
80006880:	00178713          	addi	a4,a5,1
80006884:	fec42783          	lw	a5,-20(s0)
80006888:	00e7aa23          	sw	a4,20(a5)
8000688c:	fec42783          	lw	a5,-20(s0)
80006890:	0087a703          	lw	a4,8(a5)
80006894:	fe042783          	lw	a5,-32(s0)
80006898:	0007a783          	lw	a5,0(a5)
8000689c:	40e00733          	neg	a4,a4
800068a0:	00e7a023          	sw	a4,0(a5)
800068a4:	fec42783          	lw	a5,-20(s0)
800068a8:	0087a703          	lw	a4,8(a5)
800068ac:	fe042783          	lw	a5,-32(s0)
800068b0:	0007a783          	lw	a5,0(a5)
800068b4:	00478793          	addi	a5,a5,4
800068b8:	40e00733          	neg	a4,a4
800068bc:	00e7a023          	sw	a4,0(a5)
800068c0:	fec42783          	lw	a5,-20(s0)
800068c4:	0147a703          	lw	a4,20(a5)
800068c8:	00900793          	li	a5,9
800068cc:	02e7d663          	ble	a4,a5,800068f8 <controllerreaction_function_1+0x2d4>
800068d0:	fec42783          	lw	a5,-20(s0)
800068d4:	0007aa23          	sw	zero,20(a5)
800068d8:	fec42783          	lw	a5,-20(s0)
800068dc:	00200713          	li	a4,2
800068e0:	00e7a223          	sw	a4,4(a5)
800068e4:	0140006f          	j	800068f8 <controllerreaction_function_1+0x2d4>
800068e8:	00000013          	nop
800068ec:	0100006f          	j	800068fc <controllerreaction_function_1+0x2d8>
800068f0:	00000013          	nop
800068f4:	0080006f          	j	800068fc <controllerreaction_function_1+0x2d8>
800068f8:	00000013          	nop
800068fc:	8f0007b7          	lui	a5,0x8f000
80006900:	00002737          	lui	a4,0x2
80006904:	49a70713          	addi	a4,a4,1178 # 249a <buflen.2800+0x2416>
80006908:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
8000690c:	00000013          	nop
80006910:	03c12083          	lw	ra,60(sp)
80006914:	03812403          	lw	s0,56(sp)
80006918:	04010113          	addi	sp,sp,64
8000691c:	00008067          	ret

80006920 <controllerreaction_function_2>:
80006920:	fd010113          	addi	sp,sp,-48
80006924:	02812623          	sw	s0,44(sp)
80006928:	03010413          	addi	s0,sp,48
8000692c:	fca42e23          	sw	a0,-36(s0)
80006930:	fdc42783          	lw	a5,-36(s0)
80006934:	fef42623          	sw	a5,-20(s0)
80006938:	fec42783          	lw	a5,-20(s0)
8000693c:	01c7a783          	lw	a5,28(a5)
80006940:	fef42423          	sw	a5,-24(s0)
80006944:	fec42783          	lw	a5,-20(s0)
80006948:	0207a783          	lw	a5,32(a5)
8000694c:	fef42223          	sw	a5,-28(s0)
80006950:	8f0007b7          	lui	a5,0x8f000
80006954:	00001737          	lui	a4,0x1
80006958:	49a70713          	addi	a4,a4,1178 # 149a <buflen.2800+0x1416>
8000695c:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
80006960:	8f0007b7          	lui	a5,0x8f000
80006964:	00002737          	lui	a4,0x2
80006968:	49a70713          	addi	a4,a4,1178 # 249a <buflen.2800+0x2416>
8000696c:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
80006970:	00000013          	nop
80006974:	02c12403          	lw	s0,44(sp)
80006978:	03010113          	addi	sp,sp,48
8000697c:	00008067          	ret

80006980 <new_Controller>:
80006980:	fe010113          	addi	sp,sp,-32
80006984:	00112e23          	sw	ra,28(sp)
80006988:	00812c23          	sw	s0,24(sp)
8000698c:	02010413          	addi	s0,sp,32
80006990:	1e000593          	li	a1,480
80006994:	00100513          	li	a0,1
80006998:	798040ef          	jal	ra,8000b130 <calloc>
8000699c:	00050793          	mv	a5,a0
800069a0:	fef42623          	sw	a5,-20(s0)
800069a4:	fec42783          	lw	a5,-20(s0)
800069a8:	02478713          	addi	a4,a5,36
800069ac:	fec42783          	lw	a5,-20(s0)
800069b0:	00e7ae23          	sw	a4,28(a5)
800069b4:	fec42783          	lw	a5,-20(s0)
800069b8:	03478713          	addi	a4,a5,52
800069bc:	fec42783          	lw	a5,-20(s0)
800069c0:	02e7a623          	sw	a4,44(a5)
800069c4:	fec42783          	lw	a5,-20(s0)
800069c8:	0607a023          	sw	zero,96(a5)
800069cc:	fec42783          	lw	a5,-20(s0)
800069d0:	00000717          	auipc	a4,0x0
800069d4:	ba470713          	addi	a4,a4,-1116 # 80006574 <controllerreaction_function_0>
800069d8:	04e7ac23          	sw	a4,88(a5)
800069dc:	fec42783          	lw	a5,-20(s0)
800069e0:	fec42703          	lw	a4,-20(s0)
800069e4:	04e7ae23          	sw	a4,92(a5)
800069e8:	fec42783          	lw	a5,-20(s0)
800069ec:	0a07a223          	sw	zero,164(a5)
800069f0:	fec42783          	lw	a5,-20(s0)
800069f4:	0a07a423          	sw	zero,168(a5)
800069f8:	fec42783          	lw	a5,-20(s0)
800069fc:	00100713          	li	a4,1
80006a00:	0ae7ac23          	sw	a4,184(a5)
80006a04:	fec42783          	lw	a5,-20(s0)
80006a08:	00000717          	auipc	a4,0x0
80006a0c:	c1c70713          	addi	a4,a4,-996 # 80006624 <controllerreaction_function_1>
80006a10:	0ae7a823          	sw	a4,176(a5)
80006a14:	fec42783          	lw	a5,-20(s0)
80006a18:	fec42703          	lw	a4,-20(s0)
80006a1c:	0ae7aa23          	sw	a4,180(a5)
80006a20:	fec42783          	lw	a5,-20(s0)
80006a24:	0e07ae23          	sw	zero,252(a5)
80006a28:	fec42783          	lw	a5,-20(s0)
80006a2c:	1007a023          	sw	zero,256(a5)
80006a30:	fec42783          	lw	a5,-20(s0)
80006a34:	00200713          	li	a4,2
80006a38:	10e7a823          	sw	a4,272(a5)
80006a3c:	fec42783          	lw	a5,-20(s0)
80006a40:	00000717          	auipc	a4,0x0
80006a44:	ee070713          	addi	a4,a4,-288 # 80006920 <controllerreaction_function_2>
80006a48:	10e7a423          	sw	a4,264(a5)
80006a4c:	fec42783          	lw	a5,-20(s0)
80006a50:	fec42703          	lw	a4,-20(s0)
80006a54:	10e7a623          	sw	a4,268(a5)
80006a58:	fec42783          	lw	a5,-20(s0)
80006a5c:	1407aa23          	sw	zero,340(a5)
80006a60:	fec42783          	lw	a5,-20(s0)
80006a64:	1407ac23          	sw	zero,344(a5)
80006a68:	fec42783          	lw	a5,-20(s0)
80006a6c:	1807a423          	sw	zero,392(a5)
80006a70:	fec42783          	lw	a5,-20(s0)
80006a74:	0b078713          	addi	a4,a5,176
80006a78:	fec42783          	lw	a5,-20(s0)
80006a7c:	18e7ac23          	sw	a4,408(a5)
80006a80:	fec42783          	lw	a5,-20(s0)
80006a84:	10878713          	addi	a4,a5,264
80006a88:	fec42783          	lw	a5,-20(s0)
80006a8c:	18e7ae23          	sw	a4,412(a5)
80006a90:	fec42783          	lw	a5,-20(s0)
80006a94:	19878713          	addi	a4,a5,408
80006a98:	fec42783          	lw	a5,-20(s0)
80006a9c:	16e7a023          	sw	a4,352(a5)
80006aa0:	fec42783          	lw	a5,-20(s0)
80006aa4:	00200713          	li	a4,2
80006aa8:	16e7a223          	sw	a4,356(a5)
80006aac:	fec42783          	lw	a5,-20(s0)
80006ab0:	00100713          	li	a4,1
80006ab4:	18e7a823          	sw	a4,400(a5)
80006ab8:	fec42783          	lw	a5,-20(s0)
80006abc:	1c07a423          	sw	zero,456(a5)
80006ac0:	fec42783          	lw	a5,-20(s0)
80006ac4:	05878713          	addi	a4,a5,88
80006ac8:	fec42783          	lw	a5,-20(s0)
80006acc:	1ce7ac23          	sw	a4,472(a5)
80006ad0:	fec42783          	lw	a5,-20(s0)
80006ad4:	1d878713          	addi	a4,a5,472
80006ad8:	fec42783          	lw	a5,-20(s0)
80006adc:	1ae7a023          	sw	a4,416(a5)
80006ae0:	fec42783          	lw	a5,-20(s0)
80006ae4:	00100713          	li	a4,1
80006ae8:	1ae7a223          	sw	a4,420(a5)
80006aec:	fec42783          	lw	a5,-20(s0)
80006af0:	00100713          	li	a4,1
80006af4:	1ce7a823          	sw	a4,464(a5)
80006af8:	fec42783          	lw	a5,-20(s0)
80006afc:	00078513          	mv	a0,a5
80006b00:	01c12083          	lw	ra,28(sp)
80006b04:	01812403          	lw	s0,24(sp)
80006b08:	02010113          	addi	sp,sp,32
80006b0c:	00008067          	ret

80006b10 <delete_Controller>:
80006b10:	fd010113          	addi	sp,sp,-48
80006b14:	02112623          	sw	ra,44(sp)
80006b18:	02812423          	sw	s0,40(sp)
80006b1c:	03010413          	addi	s0,sp,48
80006b20:	fca42e23          	sw	a0,-36(s0)
80006b24:	fdc42783          	lw	a5,-36(s0)
80006b28:	0847a783          	lw	a5,132(a5)
80006b2c:	00078a63          	beqz	a5,80006b40 <delete_Controller+0x30>
80006b30:	fdc42783          	lw	a5,-36(s0)
80006b34:	0847a783          	lw	a5,132(a5)
80006b38:	00078513          	mv	a0,a5
80006b3c:	6ac040ef          	jal	ra,8000b1e8 <free>
80006b40:	fdc42783          	lw	a5,-36(s0)
80006b44:	08c7a783          	lw	a5,140(a5)
80006b48:	00078a63          	beqz	a5,80006b5c <delete_Controller+0x4c>
80006b4c:	fdc42783          	lw	a5,-36(s0)
80006b50:	08c7a783          	lw	a5,140(a5)
80006b54:	00078513          	mv	a0,a5
80006b58:	690040ef          	jal	ra,8000b1e8 <free>
80006b5c:	fdc42783          	lw	a5,-36(s0)
80006b60:	0887a783          	lw	a5,136(a5)
80006b64:	00078a63          	beqz	a5,80006b78 <delete_Controller+0x68>
80006b68:	fdc42783          	lw	a5,-36(s0)
80006b6c:	0887a783          	lw	a5,136(a5)
80006b70:	00078513          	mv	a0,a5
80006b74:	674040ef          	jal	ra,8000b1e8 <free>
80006b78:	fdc42783          	lw	a5,-36(s0)
80006b7c:	0dc7a783          	lw	a5,220(a5)
80006b80:	00078a63          	beqz	a5,80006b94 <delete_Controller+0x84>
80006b84:	fdc42783          	lw	a5,-36(s0)
80006b88:	0dc7a783          	lw	a5,220(a5)
80006b8c:	00078513          	mv	a0,a5
80006b90:	658040ef          	jal	ra,8000b1e8 <free>
80006b94:	fdc42783          	lw	a5,-36(s0)
80006b98:	0e47a783          	lw	a5,228(a5)
80006b9c:	00078a63          	beqz	a5,80006bb0 <delete_Controller+0xa0>
80006ba0:	fdc42783          	lw	a5,-36(s0)
80006ba4:	0e47a783          	lw	a5,228(a5)
80006ba8:	00078513          	mv	a0,a5
80006bac:	63c040ef          	jal	ra,8000b1e8 <free>
80006bb0:	fdc42783          	lw	a5,-36(s0)
80006bb4:	0e07a783          	lw	a5,224(a5)
80006bb8:	00078a63          	beqz	a5,80006bcc <delete_Controller+0xbc>
80006bbc:	fdc42783          	lw	a5,-36(s0)
80006bc0:	0e07a783          	lw	a5,224(a5)
80006bc4:	00078513          	mv	a0,a5
80006bc8:	620040ef          	jal	ra,8000b1e8 <free>
80006bcc:	fdc42783          	lw	a5,-36(s0)
80006bd0:	1347a783          	lw	a5,308(a5)
80006bd4:	00078a63          	beqz	a5,80006be8 <delete_Controller+0xd8>
80006bd8:	fdc42783          	lw	a5,-36(s0)
80006bdc:	1347a783          	lw	a5,308(a5)
80006be0:	00078513          	mv	a0,a5
80006be4:	604040ef          	jal	ra,8000b1e8 <free>
80006be8:	fdc42783          	lw	a5,-36(s0)
80006bec:	13c7a783          	lw	a5,316(a5)
80006bf0:	00078a63          	beqz	a5,80006c04 <delete_Controller+0xf4>
80006bf4:	fdc42783          	lw	a5,-36(s0)
80006bf8:	13c7a783          	lw	a5,316(a5)
80006bfc:	00078513          	mv	a0,a5
80006c00:	5e8040ef          	jal	ra,8000b1e8 <free>
80006c04:	fdc42783          	lw	a5,-36(s0)
80006c08:	1387a783          	lw	a5,312(a5)
80006c0c:	00078a63          	beqz	a5,80006c20 <delete_Controller+0x110>
80006c10:	fdc42783          	lw	a5,-36(s0)
80006c14:	1387a783          	lw	a5,312(a5)
80006c18:	00078513          	mv	a0,a5
80006c1c:	5cc040ef          	jal	ra,8000b1e8 <free>
80006c20:	fe042623          	sw	zero,-20(s0)
80006c24:	0300006f          	j	80006c54 <delete_Controller+0x144>
80006c28:	fdc42783          	lw	a5,-36(s0)
80006c2c:	08c7a703          	lw	a4,140(a5)
80006c30:	fec42783          	lw	a5,-20(s0)
80006c34:	00279793          	slli	a5,a5,0x2
80006c38:	00f707b3          	add	a5,a4,a5
80006c3c:	0007a783          	lw	a5,0(a5)
80006c40:	00078513          	mv	a0,a5
80006c44:	5a4040ef          	jal	ra,8000b1e8 <free>
80006c48:	fec42783          	lw	a5,-20(s0)
80006c4c:	00178793          	addi	a5,a5,1
80006c50:	fef42623          	sw	a5,-20(s0)
80006c54:	fdc42783          	lw	a5,-36(s0)
80006c58:	0807a783          	lw	a5,128(a5)
80006c5c:	fec42703          	lw	a4,-20(s0)
80006c60:	fcf744e3          	blt	a4,a5,80006c28 <delete_Controller+0x118>
80006c64:	fe042423          	sw	zero,-24(s0)
80006c68:	0300006f          	j	80006c98 <delete_Controller+0x188>
80006c6c:	fdc42783          	lw	a5,-36(s0)
80006c70:	0e47a703          	lw	a4,228(a5)
80006c74:	fe842783          	lw	a5,-24(s0)
80006c78:	00279793          	slli	a5,a5,0x2
80006c7c:	00f707b3          	add	a5,a4,a5
80006c80:	0007a783          	lw	a5,0(a5)
80006c84:	00078513          	mv	a0,a5
80006c88:	560040ef          	jal	ra,8000b1e8 <free>
80006c8c:	fe842783          	lw	a5,-24(s0)
80006c90:	00178793          	addi	a5,a5,1
80006c94:	fef42423          	sw	a5,-24(s0)
80006c98:	fdc42783          	lw	a5,-36(s0)
80006c9c:	0d87a783          	lw	a5,216(a5)
80006ca0:	fe842703          	lw	a4,-24(s0)
80006ca4:	fcf744e3          	blt	a4,a5,80006c6c <delete_Controller+0x15c>
80006ca8:	fe042223          	sw	zero,-28(s0)
80006cac:	0300006f          	j	80006cdc <delete_Controller+0x1cc>
80006cb0:	fdc42783          	lw	a5,-36(s0)
80006cb4:	13c7a703          	lw	a4,316(a5)
80006cb8:	fe442783          	lw	a5,-28(s0)
80006cbc:	00279793          	slli	a5,a5,0x2
80006cc0:	00f707b3          	add	a5,a4,a5
80006cc4:	0007a783          	lw	a5,0(a5)
80006cc8:	00078513          	mv	a0,a5
80006ccc:	51c040ef          	jal	ra,8000b1e8 <free>
80006cd0:	fe442783          	lw	a5,-28(s0)
80006cd4:	00178793          	addi	a5,a5,1
80006cd8:	fef42223          	sw	a5,-28(s0)
80006cdc:	fdc42783          	lw	a5,-36(s0)
80006ce0:	1307a783          	lw	a5,304(a5)
80006ce4:	fe442703          	lw	a4,-28(s0)
80006ce8:	fcf744e3          	blt	a4,a5,80006cb0 <delete_Controller+0x1a0>
80006cec:	fdc42503          	lw	a0,-36(s0)
80006cf0:	4f8040ef          	jal	ra,8000b1e8 <free>
80006cf4:	00000013          	nop
80006cf8:	02c12083          	lw	ra,44(sp)
80006cfc:	02812403          	lw	s0,40(sp)
80006d00:	03010113          	addi	sp,sp,48
80006d04:	00008067          	ret

80006d08 <motorsreaction_function_0>:
80006d08:	fd010113          	addi	sp,sp,-48
80006d0c:	02112623          	sw	ra,44(sp)
80006d10:	02812423          	sw	s0,40(sp)
80006d14:	03010413          	addi	s0,sp,48
80006d18:	fca42e23          	sw	a0,-36(s0)
80006d1c:	fdc42783          	lw	a5,-36(s0)
80006d20:	fef42623          	sw	a5,-20(s0)
80006d24:	fec42783          	lw	a5,-20(s0)
80006d28:	0087a783          	lw	a5,8(a5)
80006d2c:	fef42423          	sw	a5,-24(s0)
80006d30:	fe842783          	lw	a5,-24(s0)
80006d34:	0047c783          	lbu	a5,4(a5)
80006d38:	02078863          	beqz	a5,80006d68 <motorsreaction_function_0+0x60>
80006d3c:	fe842783          	lw	a5,-24(s0)
80006d40:	00c7a783          	lw	a5,12(a5)
80006d44:	0087a703          	lw	a4,8(a5)
80006d48:	fe842783          	lw	a5,-24(s0)
80006d4c:	00e7a823          	sw	a4,16(a5)
80006d50:	fe842783          	lw	a5,-24(s0)
80006d54:	00c7a783          	lw	a5,12(a5)
80006d58:	0007a703          	lw	a4,0(a5)
80006d5c:	fe842783          	lw	a5,-24(s0)
80006d60:	00e7a023          	sw	a4,0(a5)
80006d64:	00c0006f          	j	80006d70 <motorsreaction_function_0+0x68>
80006d68:	fe842783          	lw	a5,-24(s0)
80006d6c:	0007a823          	sw	zero,16(a5)
80006d70:	fec42783          	lw	a5,-20(s0)
80006d74:	00c7a783          	lw	a5,12(a5)
80006d78:	fef42223          	sw	a5,-28(s0)
80006d7c:	8f0007b7          	lui	a5,0x8f000
80006d80:	00001737          	lui	a4,0x1
80006d84:	49a70713          	addi	a4,a4,1178 # 149a <buflen.2800+0x1416>
80006d88:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
80006d8c:	fec42783          	lw	a5,-20(s0)
80006d90:	0047c783          	lbu	a5,4(a5)
80006d94:	0017c793          	xori	a5,a5,1
80006d98:	0ff7f793          	andi	a5,a5,255
80006d9c:	02078a63          	beqz	a5,80006dd0 <motorsreaction_function_0+0xc8>
80006da0:	fe842783          	lw	a5,-24(s0)
80006da4:	0007a783          	lw	a5,0(a5)
80006da8:	0007a703          	lw	a4,0(a5)
80006dac:	fe842783          	lw	a5,-24(s0)
80006db0:	0007a783          	lw	a5,0(a5)
80006db4:	00478793          	addi	a5,a5,4
80006db8:	0007a783          	lw	a5,0(a5)
80006dbc:	00078613          	mv	a2,a5
80006dc0:	00070593          	mv	a1,a4
80006dc4:	00006517          	auipc	a0,0x6
80006dc8:	de450513          	addi	a0,a0,-540 # 8000cba8 <__ascii_wctomb+0x240>
80006dcc:	668020ef          	jal	ra,80009434 <printf>
80006dd0:	8f0007b7          	lui	a5,0x8f000
80006dd4:	00002737          	lui	a4,0x2
80006dd8:	49a70713          	addi	a4,a4,1178 # 249a <buflen.2800+0x2416>
80006ddc:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
80006de0:	00000013          	nop
80006de4:	02c12083          	lw	ra,44(sp)
80006de8:	02812403          	lw	s0,40(sp)
80006dec:	03010113          	addi	sp,sp,48
80006df0:	00008067          	ret

80006df4 <new_Motors>:
80006df4:	fe010113          	addi	sp,sp,-32
80006df8:	00112e23          	sw	ra,28(sp)
80006dfc:	00812c23          	sw	s0,24(sp)
80006e00:	02010413          	addi	s0,sp,32
80006e04:	0c000593          	li	a1,192
80006e08:	00100513          	li	a0,1
80006e0c:	324040ef          	jal	ra,8000b130 <calloc>
80006e10:	00050793          	mv	a5,a0
80006e14:	fef42623          	sw	a5,-20(s0)
80006e18:	fec42783          	lw	a5,-20(s0)
80006e1c:	01078713          	addi	a4,a5,16
80006e20:	fec42783          	lw	a5,-20(s0)
80006e24:	00e7a423          	sw	a4,8(a5)
80006e28:	fec42783          	lw	a5,-20(s0)
80006e2c:	0207a823          	sw	zero,48(a5)
80006e30:	fec42783          	lw	a5,-20(s0)
80006e34:	00000717          	auipc	a4,0x0
80006e38:	ed470713          	addi	a4,a4,-300 # 80006d08 <motorsreaction_function_0>
80006e3c:	02e7a423          	sw	a4,40(a5)
80006e40:	fec42783          	lw	a5,-20(s0)
80006e44:	fec42703          	lw	a4,-20(s0)
80006e48:	02e7a623          	sw	a4,44(a5)
80006e4c:	fec42783          	lw	a5,-20(s0)
80006e50:	0607aa23          	sw	zero,116(a5)
80006e54:	fec42783          	lw	a5,-20(s0)
80006e58:	0607ac23          	sw	zero,120(a5)
80006e5c:	fec42783          	lw	a5,-20(s0)
80006e60:	0a07a423          	sw	zero,168(a5)
80006e64:	fec42783          	lw	a5,-20(s0)
80006e68:	02878713          	addi	a4,a5,40
80006e6c:	fec42783          	lw	a5,-20(s0)
80006e70:	0ae7ac23          	sw	a4,184(a5)
80006e74:	fec42783          	lw	a5,-20(s0)
80006e78:	0b878713          	addi	a4,a5,184
80006e7c:	fec42783          	lw	a5,-20(s0)
80006e80:	08e7a023          	sw	a4,128(a5)
80006e84:	fec42783          	lw	a5,-20(s0)
80006e88:	00100713          	li	a4,1
80006e8c:	08e7a223          	sw	a4,132(a5)
80006e90:	fec42783          	lw	a5,-20(s0)
80006e94:	00400713          	li	a4,4
80006e98:	0ae7a823          	sw	a4,176(a5)
80006e9c:	fec42783          	lw	a5,-20(s0)
80006ea0:	00078513          	mv	a0,a5
80006ea4:	01c12083          	lw	ra,28(sp)
80006ea8:	01812403          	lw	s0,24(sp)
80006eac:	02010113          	addi	sp,sp,32
80006eb0:	00008067          	ret

80006eb4 <delete_Motors>:
80006eb4:	fd010113          	addi	sp,sp,-48
80006eb8:	02112623          	sw	ra,44(sp)
80006ebc:	02812423          	sw	s0,40(sp)
80006ec0:	03010413          	addi	s0,sp,48
80006ec4:	fca42e23          	sw	a0,-36(s0)
80006ec8:	fdc42783          	lw	a5,-36(s0)
80006ecc:	0547a783          	lw	a5,84(a5)
80006ed0:	00078a63          	beqz	a5,80006ee4 <delete_Motors+0x30>
80006ed4:	fdc42783          	lw	a5,-36(s0)
80006ed8:	0547a783          	lw	a5,84(a5)
80006edc:	00078513          	mv	a0,a5
80006ee0:	308040ef          	jal	ra,8000b1e8 <free>
80006ee4:	fdc42783          	lw	a5,-36(s0)
80006ee8:	05c7a783          	lw	a5,92(a5)
80006eec:	00078a63          	beqz	a5,80006f00 <delete_Motors+0x4c>
80006ef0:	fdc42783          	lw	a5,-36(s0)
80006ef4:	05c7a783          	lw	a5,92(a5)
80006ef8:	00078513          	mv	a0,a5
80006efc:	2ec040ef          	jal	ra,8000b1e8 <free>
80006f00:	fdc42783          	lw	a5,-36(s0)
80006f04:	0587a783          	lw	a5,88(a5)
80006f08:	00078a63          	beqz	a5,80006f1c <delete_Motors+0x68>
80006f0c:	fdc42783          	lw	a5,-36(s0)
80006f10:	0587a783          	lw	a5,88(a5)
80006f14:	00078513          	mv	a0,a5
80006f18:	2d0040ef          	jal	ra,8000b1e8 <free>
80006f1c:	fe042623          	sw	zero,-20(s0)
80006f20:	0300006f          	j	80006f50 <delete_Motors+0x9c>
80006f24:	fdc42783          	lw	a5,-36(s0)
80006f28:	05c7a703          	lw	a4,92(a5)
80006f2c:	fec42783          	lw	a5,-20(s0)
80006f30:	00279793          	slli	a5,a5,0x2
80006f34:	00f707b3          	add	a5,a4,a5
80006f38:	0007a783          	lw	a5,0(a5)
80006f3c:	00078513          	mv	a0,a5
80006f40:	2a8040ef          	jal	ra,8000b1e8 <free>
80006f44:	fec42783          	lw	a5,-20(s0)
80006f48:	00178793          	addi	a5,a5,1
80006f4c:	fef42623          	sw	a5,-20(s0)
80006f50:	fdc42783          	lw	a5,-36(s0)
80006f54:	0507a783          	lw	a5,80(a5)
80006f58:	fec42703          	lw	a4,-20(s0)
80006f5c:	fcf744e3          	blt	a4,a5,80006f24 <delete_Motors+0x70>
80006f60:	fdc42503          	lw	a0,-36(s0)
80006f64:	284040ef          	jal	ra,8000b1e8 <free>
80006f68:	00000013          	nop
80006f6c:	02c12083          	lw	ra,44(sp)
80006f70:	02812403          	lw	s0,40(sp)
80006f74:	03010113          	addi	sp,sp,48
80006f78:	00008067          	ret

80006f7c <sensorsreaction_function_0>:
80006f7c:	fd010113          	addi	sp,sp,-48
80006f80:	02112623          	sw	ra,44(sp)
80006f84:	02812423          	sw	s0,40(sp)
80006f88:	03010413          	addi	s0,sp,48
80006f8c:	fca42e23          	sw	a0,-36(s0)
80006f90:	fdc42783          	lw	a5,-36(s0)
80006f94:	fef42623          	sw	a5,-20(s0)
80006f98:	fec42783          	lw	a5,-20(s0)
80006f9c:	00c78793          	addi	a5,a5,12
80006fa0:	fef42423          	sw	a5,-24(s0)
80006fa4:	8f0007b7          	lui	a5,0x8f000
80006fa8:	00001737          	lui	a4,0x1
80006fac:	49a70713          	addi	a4,a4,1178 # 149a <buflen.2800+0x1416>
80006fb0:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
80006fb4:	00000593          	li	a1,0
80006fb8:	00000613          	li	a2,0
80006fbc:	fe842503          	lw	a0,-24(s0)
80006fc0:	888fa0ef          	jal	ra,80001048 <schedule>
80006fc4:	8f0007b7          	lui	a5,0x8f000
80006fc8:	00002737          	lui	a4,0x2
80006fcc:	49a70713          	addi	a4,a4,1178 # 249a <buflen.2800+0x2416>
80006fd0:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
80006fd4:	00000013          	nop
80006fd8:	02c12083          	lw	ra,44(sp)
80006fdc:	02812403          	lw	s0,40(sp)
80006fe0:	03010113          	addi	sp,sp,48
80006fe4:	00008067          	ret

80006fe8 <sensorsreaction_function_1>:
80006fe8:	fd010113          	addi	sp,sp,-48
80006fec:	02112623          	sw	ra,44(sp)
80006ff0:	02812423          	sw	s0,40(sp)
80006ff4:	03010413          	addi	s0,sp,48
80006ff8:	fca42e23          	sw	a0,-36(s0)
80006ffc:	fdc42783          	lw	a5,-36(s0)
80007000:	fef42623          	sw	a5,-20(s0)
80007004:	fec42783          	lw	a5,-20(s0)
80007008:	00c78793          	addi	a5,a5,12
8000700c:	fef42423          	sw	a5,-24(s0)
80007010:	fec42783          	lw	a5,-20(s0)
80007014:	1ec7c703          	lbu	a4,492(a5)
80007018:	fe842783          	lw	a5,-24(s0)
8000701c:	00e782a3          	sb	a4,5(a5)
80007020:	fec42783          	lw	a5,-20(s0)
80007024:	1d87a783          	lw	a5,472(a5)
80007028:	00078e63          	beqz	a5,80007044 <sensorsreaction_function_1+0x5c>
8000702c:	fec42783          	lw	a5,-20(s0)
80007030:	1d87a783          	lw	a5,472(a5)
80007034:	0007a783          	lw	a5,0(a5)
80007038:	00078663          	beqz	a5,80007044 <sensorsreaction_function_1+0x5c>
8000703c:	00100793          	li	a5,1
80007040:	0080006f          	j	80007048 <sensorsreaction_function_1+0x60>
80007044:	00000793          	li	a5,0
80007048:	0017f793          	andi	a5,a5,1
8000704c:	0ff7f713          	andi	a4,a5,255
80007050:	fe842783          	lw	a5,-24(s0)
80007054:	00e78323          	sb	a4,6(a5)
80007058:	fec42783          	lw	a5,-20(s0)
8000705c:	1d87a703          	lw	a4,472(a5)
80007060:	fe842783          	lw	a5,-24(s0)
80007064:	00e7a423          	sw	a4,8(a5)
80007068:	fe842783          	lw	a5,-24(s0)
8000706c:	0067c783          	lbu	a5,6(a5)
80007070:	00078e63          	beqz	a5,8000708c <sensorsreaction_function_1+0xa4>
80007074:	fec42783          	lw	a5,-20(s0)
80007078:	1d87a783          	lw	a5,472(a5)
8000707c:	0007a783          	lw	a5,0(a5)
80007080:	0007c703          	lbu	a4,0(a5)
80007084:	fe842783          	lw	a5,-24(s0)
80007088:	00e78223          	sb	a4,4(a5)
8000708c:	fec42783          	lw	a5,-20(s0)
80007090:	01878793          	addi	a5,a5,24
80007094:	fef42223          	sw	a5,-28(s0)
80007098:	8f0007b7          	lui	a5,0x8f000
8000709c:	00001737          	lui	a4,0x1
800070a0:	49a70713          	addi	a4,a4,1178 # 149a <buflen.2800+0x1416>
800070a4:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
800070a8:	fec42783          	lw	a5,-20(s0)
800070ac:	0047c783          	lbu	a5,4(a5)
800070b0:	00f037b3          	snez	a5,a5
800070b4:	0ff7f793          	andi	a5,a5,255
800070b8:	0017c793          	xori	a5,a5,1
800070bc:	0ff7f793          	andi	a5,a5,255
800070c0:	0017f793          	andi	a5,a5,1
800070c4:	0ff7f713          	andi	a4,a5,255
800070c8:	fec42783          	lw	a5,-20(s0)
800070cc:	00e78223          	sb	a4,4(a5)
800070d0:	fec42783          	lw	a5,-20(s0)
800070d4:	0047c783          	lbu	a5,4(a5)
800070d8:	00078593          	mv	a1,a5
800070dc:	00006517          	auipc	a0,0x6
800070e0:	af050513          	addi	a0,a0,-1296 # 8000cbcc <__ascii_wctomb+0x264>
800070e4:	350020ef          	jal	ra,80009434 <printf>
800070e8:	fec42783          	lw	a5,-20(s0)
800070ec:	0047c703          	lbu	a4,4(a5)
800070f0:	fe442783          	lw	a5,-28(s0)
800070f4:	00e78023          	sb	a4,0(a5)
800070f8:	fe442783          	lw	a5,-28(s0)
800070fc:	00100713          	li	a4,1
80007100:	00e780a3          	sb	a4,1(a5)
80007104:	8f0007b7          	lui	a5,0x8f000
80007108:	00002737          	lui	a4,0x2
8000710c:	49a70713          	addi	a4,a4,1178 # 249a <buflen.2800+0x2416>
80007110:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
80007114:	00000013          	nop
80007118:	02c12083          	lw	ra,44(sp)
8000711c:	02812403          	lw	s0,40(sp)
80007120:	03010113          	addi	sp,sp,48
80007124:	00008067          	ret

80007128 <sensorsreaction_function_2>:
80007128:	fd010113          	addi	sp,sp,-48
8000712c:	02112623          	sw	ra,44(sp)
80007130:	02812423          	sw	s0,40(sp)
80007134:	03010413          	addi	s0,sp,48
80007138:	fca42e23          	sw	a0,-36(s0)
8000713c:	fdc42783          	lw	a5,-36(s0)
80007140:	fef42623          	sw	a5,-20(s0)
80007144:	fec42783          	lw	a5,-20(s0)
80007148:	02478793          	addi	a5,a5,36
8000714c:	fef42423          	sw	a5,-24(s0)
80007150:	8f0007b7          	lui	a5,0x8f000
80007154:	00001737          	lui	a4,0x1
80007158:	49a70713          	addi	a4,a4,1178 # 149a <buflen.2800+0x1416>
8000715c:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
80007160:	fec42783          	lw	a5,-20(s0)
80007164:	0087a783          	lw	a5,8(a5)
80007168:	02079c63          	bnez	a5,800071a0 <sensorsreaction_function_2+0x78>
8000716c:	fe842783          	lw	a5,-24(s0)
80007170:	00100713          	li	a4,1
80007174:	00e78023          	sb	a4,0(a5)
80007178:	fe842783          	lw	a5,-24(s0)
8000717c:	00100713          	li	a4,1
80007180:	00e780a3          	sb	a4,1(a5)
80007184:	00006517          	auipc	a0,0x6
80007188:	a5c50513          	addi	a0,a0,-1444 # 8000cbe0 <__ascii_wctomb+0x278>
8000718c:	2a8020ef          	jal	ra,80009434 <printf>
80007190:	fec42783          	lw	a5,-20(s0)
80007194:	01900713          	li	a4,25
80007198:	00e7a423          	sw	a4,8(a5)
8000719c:	02c0006f          	j	800071c8 <sensorsreaction_function_2+0xa0>
800071a0:	fe842783          	lw	a5,-24(s0)
800071a4:	00078023          	sb	zero,0(a5)
800071a8:	fe842783          	lw	a5,-24(s0)
800071ac:	00100713          	li	a4,1
800071b0:	00e780a3          	sb	a4,1(a5)
800071b4:	fec42783          	lw	a5,-20(s0)
800071b8:	0087a783          	lw	a5,8(a5)
800071bc:	fff78713          	addi	a4,a5,-1
800071c0:	fec42783          	lw	a5,-20(s0)
800071c4:	00e7a423          	sw	a4,8(a5)
800071c8:	8f0007b7          	lui	a5,0x8f000
800071cc:	00002737          	lui	a4,0x2
800071d0:	49a70713          	addi	a4,a4,1178 # 249a <buflen.2800+0x2416>
800071d4:	00e7a023          	sw	a4,0(a5) # 8f000000 <__global_pointer$+0xeff1dd0>
800071d8:	00000013          	nop
800071dc:	02c12083          	lw	ra,44(sp)
800071e0:	02812403          	lw	s0,40(sp)
800071e4:	03010113          	addi	sp,sp,48
800071e8:	00008067          	ret

800071ec <new_Sensors>:
800071ec:	fe010113          	addi	sp,sp,-32
800071f0:	00112e23          	sw	ra,28(sp)
800071f4:	00812c23          	sw	s0,24(sp)
800071f8:	02010413          	addi	s0,sp,32
800071fc:	1f800593          	li	a1,504
80007200:	00100513          	li	a0,1
80007204:	72d030ef          	jal	ra,8000b130 <calloc>
80007208:	00050793          	mv	a5,a0
8000720c:	fef42623          	sw	a5,-20(s0)
80007210:	fec42783          	lw	a5,-20(s0)
80007214:	1b878713          	addi	a4,a5,440
80007218:	fec42783          	lw	a5,-20(s0)
8000721c:	00e7a623          	sw	a4,12(a5)
80007220:	fec42783          	lw	a5,-20(s0)
80007224:	0207ac23          	sw	zero,56(a5)
80007228:	fec42783          	lw	a5,-20(s0)
8000722c:	00000717          	auipc	a4,0x0
80007230:	d5070713          	addi	a4,a4,-688 # 80006f7c <sensorsreaction_function_0>
80007234:	02e7a823          	sw	a4,48(a5)
80007238:	fec42783          	lw	a5,-20(s0)
8000723c:	fec42703          	lw	a4,-20(s0)
80007240:	02e7aa23          	sw	a4,52(a5)
80007244:	fec42783          	lw	a5,-20(s0)
80007248:	0607ae23          	sw	zero,124(a5)
8000724c:	fec42783          	lw	a5,-20(s0)
80007250:	0807a023          	sw	zero,128(a5)
80007254:	fec42783          	lw	a5,-20(s0)
80007258:	00100713          	li	a4,1
8000725c:	08e7a823          	sw	a4,144(a5)
80007260:	fec42783          	lw	a5,-20(s0)
80007264:	00000717          	auipc	a4,0x0
80007268:	d8470713          	addi	a4,a4,-636 # 80006fe8 <sensorsreaction_function_1>
8000726c:	08e7a423          	sw	a4,136(a5)
80007270:	fec42783          	lw	a5,-20(s0)
80007274:	fec42703          	lw	a4,-20(s0)
80007278:	08e7a623          	sw	a4,140(a5)
8000727c:	fec42783          	lw	a5,-20(s0)
80007280:	0c07aa23          	sw	zero,212(a5)
80007284:	fec42783          	lw	a5,-20(s0)
80007288:	0c07ac23          	sw	zero,216(a5)
8000728c:	fec42783          	lw	a5,-20(s0)
80007290:	00200713          	li	a4,2
80007294:	0ee7a423          	sw	a4,232(a5)
80007298:	fec42783          	lw	a5,-20(s0)
8000729c:	00000717          	auipc	a4,0x0
800072a0:	e8c70713          	addi	a4,a4,-372 # 80007128 <sensorsreaction_function_2>
800072a4:	0ee7a023          	sw	a4,224(a5)
800072a8:	fec42783          	lw	a5,-20(s0)
800072ac:	fec42703          	lw	a4,-20(s0)
800072b0:	0ee7a223          	sw	a4,228(a5)
800072b4:	fec42783          	lw	a5,-20(s0)
800072b8:	1207a623          	sw	zero,300(a5)
800072bc:	fec42783          	lw	a5,-20(s0)
800072c0:	1207a823          	sw	zero,304(a5)
800072c4:	fec42783          	lw	a5,-20(s0)
800072c8:	1607a023          	sw	zero,352(a5)
800072cc:	fec42783          	lw	a5,-20(s0)
800072d0:	0e078713          	addi	a4,a5,224
800072d4:	fec42783          	lw	a5,-20(s0)
800072d8:	16e7a823          	sw	a4,368(a5)
800072dc:	fec42783          	lw	a5,-20(s0)
800072e0:	17078713          	addi	a4,a5,368
800072e4:	fec42783          	lw	a5,-20(s0)
800072e8:	12e7ac23          	sw	a4,312(a5)
800072ec:	fec42783          	lw	a5,-20(s0)
800072f0:	00100713          	li	a4,1
800072f4:	12e7ae23          	sw	a4,316(a5)
800072f8:	fec42783          	lw	a5,-20(s0)
800072fc:	00100713          	li	a4,1
80007300:	14e78023          	sb	a4,320(a5)
80007304:	fec42783          	lw	a5,-20(s0)
80007308:	03078713          	addi	a4,a5,48
8000730c:	fec42783          	lw	a5,-20(s0)
80007310:	1ae7a823          	sw	a4,432(a5)
80007314:	fec42783          	lw	a5,-20(s0)
80007318:	1a07a023          	sw	zero,416(a5)
8000731c:	fec42783          	lw	a5,-20(s0)
80007320:	1b078713          	addi	a4,a5,432
80007324:	fec42783          	lw	a5,-20(s0)
80007328:	16e7ac23          	sw	a4,376(a5)
8000732c:	fec42783          	lw	a5,-20(s0)
80007330:	00100713          	li	a4,1
80007334:	16e7ae23          	sw	a4,380(a5)
80007338:	fec42783          	lw	a5,-20(s0)
8000733c:	18078023          	sb	zero,384(a5)
80007340:	fec42783          	lw	a5,-20(s0)
80007344:	1e07a023          	sw	zero,480(a5)
80007348:	fec42783          	lw	a5,-20(s0)
8000734c:	08878713          	addi	a4,a5,136
80007350:	fec42783          	lw	a5,-20(s0)
80007354:	1ee7a823          	sw	a4,496(a5)
80007358:	fec42783          	lw	a5,-20(s0)
8000735c:	1f078713          	addi	a4,a5,496
80007360:	fec42783          	lw	a5,-20(s0)
80007364:	1ae7ac23          	sw	a4,440(a5)
80007368:	fec42783          	lw	a5,-20(s0)
8000736c:	00100713          	li	a4,1
80007370:	1ae7ae23          	sw	a4,444(a5)
80007374:	fec42783          	lw	a5,-20(s0)
80007378:	1c078e23          	sb	zero,476(a5)
8000737c:	fec42783          	lw	a5,-20(s0)
80007380:	00100713          	li	a4,1
80007384:	1ee7a423          	sw	a4,488(a5)
80007388:	fec42783          	lw	a5,-20(s0)
8000738c:	00078513          	mv	a0,a5
80007390:	01c12083          	lw	ra,28(sp)
80007394:	01812403          	lw	s0,24(sp)
80007398:	02010113          	addi	sp,sp,32
8000739c:	00008067          	ret

800073a0 <delete_Sensors>:
800073a0:	fd010113          	addi	sp,sp,-48
800073a4:	02112623          	sw	ra,44(sp)
800073a8:	02812423          	sw	s0,40(sp)
800073ac:	03010413          	addi	s0,sp,48
800073b0:	fca42e23          	sw	a0,-36(s0)
800073b4:	fdc42783          	lw	a5,-36(s0)
800073b8:	05c7a783          	lw	a5,92(a5)
800073bc:	00078a63          	beqz	a5,800073d0 <delete_Sensors+0x30>
800073c0:	fdc42783          	lw	a5,-36(s0)
800073c4:	05c7a783          	lw	a5,92(a5)
800073c8:	00078513          	mv	a0,a5
800073cc:	61d030ef          	jal	ra,8000b1e8 <free>
800073d0:	fdc42783          	lw	a5,-36(s0)
800073d4:	0647a783          	lw	a5,100(a5)
800073d8:	00078a63          	beqz	a5,800073ec <delete_Sensors+0x4c>
800073dc:	fdc42783          	lw	a5,-36(s0)
800073e0:	0647a783          	lw	a5,100(a5)
800073e4:	00078513          	mv	a0,a5
800073e8:	601030ef          	jal	ra,8000b1e8 <free>
800073ec:	fdc42783          	lw	a5,-36(s0)
800073f0:	0607a783          	lw	a5,96(a5)
800073f4:	00078a63          	beqz	a5,80007408 <delete_Sensors+0x68>
800073f8:	fdc42783          	lw	a5,-36(s0)
800073fc:	0607a783          	lw	a5,96(a5)
80007400:	00078513          	mv	a0,a5
80007404:	5e5030ef          	jal	ra,8000b1e8 <free>
80007408:	fdc42783          	lw	a5,-36(s0)
8000740c:	0b47a783          	lw	a5,180(a5)
80007410:	00078a63          	beqz	a5,80007424 <delete_Sensors+0x84>
80007414:	fdc42783          	lw	a5,-36(s0)
80007418:	0b47a783          	lw	a5,180(a5)
8000741c:	00078513          	mv	a0,a5
80007420:	5c9030ef          	jal	ra,8000b1e8 <free>
80007424:	fdc42783          	lw	a5,-36(s0)
80007428:	0bc7a783          	lw	a5,188(a5)
8000742c:	00078a63          	beqz	a5,80007440 <delete_Sensors+0xa0>
80007430:	fdc42783          	lw	a5,-36(s0)
80007434:	0bc7a783          	lw	a5,188(a5)
80007438:	00078513          	mv	a0,a5
8000743c:	5ad030ef          	jal	ra,8000b1e8 <free>
80007440:	fdc42783          	lw	a5,-36(s0)
80007444:	0b87a783          	lw	a5,184(a5)
80007448:	00078a63          	beqz	a5,8000745c <delete_Sensors+0xbc>
8000744c:	fdc42783          	lw	a5,-36(s0)
80007450:	0b87a783          	lw	a5,184(a5)
80007454:	00078513          	mv	a0,a5
80007458:	591030ef          	jal	ra,8000b1e8 <free>
8000745c:	fdc42783          	lw	a5,-36(s0)
80007460:	10c7a783          	lw	a5,268(a5)
80007464:	00078a63          	beqz	a5,80007478 <delete_Sensors+0xd8>
80007468:	fdc42783          	lw	a5,-36(s0)
8000746c:	10c7a783          	lw	a5,268(a5)
80007470:	00078513          	mv	a0,a5
80007474:	575030ef          	jal	ra,8000b1e8 <free>
80007478:	fdc42783          	lw	a5,-36(s0)
8000747c:	1147a783          	lw	a5,276(a5)
80007480:	00078a63          	beqz	a5,80007494 <delete_Sensors+0xf4>
80007484:	fdc42783          	lw	a5,-36(s0)
80007488:	1147a783          	lw	a5,276(a5)
8000748c:	00078513          	mv	a0,a5
80007490:	559030ef          	jal	ra,8000b1e8 <free>
80007494:	fdc42783          	lw	a5,-36(s0)
80007498:	1107a783          	lw	a5,272(a5)
8000749c:	00078a63          	beqz	a5,800074b0 <delete_Sensors+0x110>
800074a0:	fdc42783          	lw	a5,-36(s0)
800074a4:	1107a783          	lw	a5,272(a5)
800074a8:	00078513          	mv	a0,a5
800074ac:	53d030ef          	jal	ra,8000b1e8 <free>
800074b0:	fe042623          	sw	zero,-20(s0)
800074b4:	0300006f          	j	800074e4 <delete_Sensors+0x144>
800074b8:	fdc42783          	lw	a5,-36(s0)
800074bc:	0647a703          	lw	a4,100(a5)
800074c0:	fec42783          	lw	a5,-20(s0)
800074c4:	00279793          	slli	a5,a5,0x2
800074c8:	00f707b3          	add	a5,a4,a5
800074cc:	0007a783          	lw	a5,0(a5)
800074d0:	00078513          	mv	a0,a5
800074d4:	515030ef          	jal	ra,8000b1e8 <free>
800074d8:	fec42783          	lw	a5,-20(s0)
800074dc:	00178793          	addi	a5,a5,1
800074e0:	fef42623          	sw	a5,-20(s0)
800074e4:	fdc42783          	lw	a5,-36(s0)
800074e8:	0587a783          	lw	a5,88(a5)
800074ec:	fec42703          	lw	a4,-20(s0)
800074f0:	fcf744e3          	blt	a4,a5,800074b8 <delete_Sensors+0x118>
800074f4:	fe042423          	sw	zero,-24(s0)
800074f8:	0300006f          	j	80007528 <delete_Sensors+0x188>
800074fc:	fdc42783          	lw	a5,-36(s0)
80007500:	0bc7a703          	lw	a4,188(a5)
80007504:	fe842783          	lw	a5,-24(s0)
80007508:	00279793          	slli	a5,a5,0x2
8000750c:	00f707b3          	add	a5,a4,a5
80007510:	0007a783          	lw	a5,0(a5)
80007514:	00078513          	mv	a0,a5
80007518:	4d1030ef          	jal	ra,8000b1e8 <free>
8000751c:	fe842783          	lw	a5,-24(s0)
80007520:	00178793          	addi	a5,a5,1
80007524:	fef42423          	sw	a5,-24(s0)
80007528:	fdc42783          	lw	a5,-36(s0)
8000752c:	0b07a783          	lw	a5,176(a5)
80007530:	fe842703          	lw	a4,-24(s0)
80007534:	fcf744e3          	blt	a4,a5,800074fc <delete_Sensors+0x15c>
80007538:	fe042223          	sw	zero,-28(s0)
8000753c:	0300006f          	j	8000756c <delete_Sensors+0x1cc>
80007540:	fdc42783          	lw	a5,-36(s0)
80007544:	1147a703          	lw	a4,276(a5)
80007548:	fe442783          	lw	a5,-28(s0)
8000754c:	00279793          	slli	a5,a5,0x2
80007550:	00f707b3          	add	a5,a4,a5
80007554:	0007a783          	lw	a5,0(a5)
80007558:	00078513          	mv	a0,a5
8000755c:	48d030ef          	jal	ra,8000b1e8 <free>
80007560:	fe442783          	lw	a5,-28(s0)
80007564:	00178793          	addi	a5,a5,1
80007568:	fef42223          	sw	a5,-28(s0)
8000756c:	fdc42783          	lw	a5,-36(s0)
80007570:	1087a783          	lw	a5,264(a5)
80007574:	fe442703          	lw	a4,-28(s0)
80007578:	fcf744e3          	blt	a4,a5,80007540 <delete_Sensors+0x1a0>
8000757c:	fdc42503          	lw	a0,-36(s0)
80007580:	469030ef          	jal	ra,8000b1e8 <free>
80007584:	00000013          	nop
80007588:	02c12083          	lw	ra,44(sp)
8000758c:	02812403          	lw	s0,40(sp)
80007590:	03010113          	addi	sp,sp,48
80007594:	00008067          	ret

80007598 <new_Robot>:
80007598:	fe010113          	addi	sp,sp,-32
8000759c:	00112e23          	sw	ra,28(sp)
800075a0:	00812c23          	sw	s0,24(sp)
800075a4:	02010413          	addi	s0,sp,32
800075a8:	00400593          	li	a1,4
800075ac:	00100513          	li	a0,1
800075b0:	381030ef          	jal	ra,8000b130 <calloc>
800075b4:	00050793          	mv	a5,a0
800075b8:	fef42623          	sw	a5,-20(s0)
800075bc:	fec42783          	lw	a5,-20(s0)
800075c0:	00078513          	mv	a0,a5
800075c4:	01c12083          	lw	ra,28(sp)
800075c8:	01812403          	lw	s0,24(sp)
800075cc:	02010113          	addi	sp,sp,32
800075d0:	00008067          	ret

800075d4 <delete_Robot>:
800075d4:	fe010113          	addi	sp,sp,-32
800075d8:	00112e23          	sw	ra,28(sp)
800075dc:	00812c23          	sw	s0,24(sp)
800075e0:	02010413          	addi	s0,sp,32
800075e4:	fea42623          	sw	a0,-20(s0)
800075e8:	fec42503          	lw	a0,-20(s0)
800075ec:	3fd030ef          	jal	ra,8000b1e8 <free>
800075f0:	00000013          	nop
800075f4:	01c12083          	lw	ra,28(sp)
800075f8:	01812403          	lw	s0,24(sp)
800075fc:	02010113          	addi	sp,sp,32
80007600:	00008067          	ret

80007604 <__set_default_command_line_options>:
80007604:	ff010113          	addi	sp,sp,-16
80007608:	00812623          	sw	s0,12(sp)
8000760c:	01010413          	addi	s0,sp,16
80007610:	00000013          	nop
80007614:	00c12403          	lw	s0,12(sp)
80007618:	01010113          	addi	sp,sp,16
8000761c:	00008067          	ret

80007620 <__action_for_port>:
80007620:	fe010113          	addi	sp,sp,-32
80007624:	00812e23          	sw	s0,28(sp)
80007628:	02010413          	addi	s0,sp,32
8000762c:	fea42623          	sw	a0,-20(s0)
80007630:	00000793          	li	a5,0
80007634:	00078513          	mv	a0,a5
80007638:	01c12403          	lw	s0,28(sp)
8000763c:	02010113          	addi	sp,sp,32
80007640:	00008067          	ret

80007644 <__initialize_trigger_objects>:
80007644:	fd010113          	addi	sp,sp,-48
80007648:	02112623          	sw	ra,44(sp)
8000764c:	02812423          	sw	s0,40(sp)
80007650:	03010413          	addi	s0,sp,48
80007654:	86c18793          	addi	a5,gp,-1940 # 8000da9c <__tokens_with_ref_count_size>
80007658:	00200713          	li	a4,2
8000765c:	00e7a023          	sw	a4,0(a5)
80007660:	01800513          	li	a0,24
80007664:	379030ef          	jal	ra,8000b1dc <malloc>
80007668:	00050793          	mv	a5,a0
8000766c:	00078713          	mv	a4,a5
80007670:	86418793          	addi	a5,gp,-1948 # 8000da94 <__tokens_with_ref_count>
80007674:	00e7a023          	sw	a4,0(a5)
80007678:	85818793          	addi	a5,gp,-1960 # 8000da88 <__is_present_fields_size>
8000767c:	00400713          	li	a4,4
80007680:	00e7a023          	sw	a4,0(a5)
80007684:	01000513          	li	a0,16
80007688:	355030ef          	jal	ra,8000b1dc <malloc>
8000768c:	00050793          	mv	a5,a0
80007690:	00078713          	mv	a4,a5
80007694:	85418793          	addi	a5,gp,-1964 # 8000da84 <__is_present_fields>
80007698:	00e7a023          	sw	a4,0(a5)
8000769c:	efdff0ef          	jal	ra,80007598 <new_Robot>
800076a0:	fea42623          	sw	a0,-20(s0)
800076a4:	b49ff0ef          	jal	ra,800071ec <new_Sensors>
800076a8:	fea42423          	sw	a0,-24(s0)
800076ac:	fe842783          	lw	a5,-24(s0)
800076b0:	ffe00713          	li	a4,-2
800076b4:	02e7a023          	sw	a4,32(a5)
800076b8:	fe842783          	lw	a5,-24(s0)
800076bc:	ffe00713          	li	a4,-2
800076c0:	02e7a623          	sw	a4,44(a5)
800076c4:	fe842783          	lw	a5,-24(s0)
800076c8:	03078713          	addi	a4,a5,48
800076cc:	89c18793          	addi	a5,gp,-1892 # 8000dacc <__startup_reactions>
800076d0:	00e7a023          	sw	a4,0(a5)
800076d4:	8d818793          	addi	a5,gp,-1832 # 8000db08 <robot_sensors_initial_button.4174>
800076d8:	0007c703          	lbu	a4,0(a5)
800076dc:	fe842783          	lw	a5,-24(s0)
800076e0:	00e78223          	sb	a4,4(a5)
800076e4:	82818793          	addi	a5,gp,-2008 # 8000da58 <robot_sensors_initial_time_to_next_bump.4175>
800076e8:	0007a703          	lw	a4,0(a5)
800076ec:	fe842783          	lw	a5,-24(s0)
800076f0:	00e7a423          	sw	a4,8(a5)
800076f4:	fe842783          	lw	a5,-24(s0)
800076f8:	00000613          	li	a2,0
800076fc:	00000693          	li	a3,0
80007700:	1cc7a423          	sw	a2,456(a5)
80007704:	1cd7a623          	sw	a3,460(a5)
80007708:	fe842703          	lw	a4,-24(s0)
8000770c:	fff00793          	li	a5,-1
80007710:	fff00813          	li	a6,-1
80007714:	1cf72823          	sw	a5,464(a4)
80007718:	1d072a23          	sw	a6,468(a4)
8000771c:	fe842783          	lw	a5,-24(s0)
80007720:	14c7a423          	sw	a2,328(a5)
80007724:	14d7a623          	sw	a3,332(a5)
80007728:	fe842703          	lw	a4,-24(s0)
8000772c:	05f5e7b7          	lui	a5,0x5f5e
80007730:	10078793          	addi	a5,a5,256 # 5f5e100 <buflen.2800+0x5f5e07c>
80007734:	00000813          	li	a6,0
80007738:	14f72823          	sw	a5,336(a4)
8000773c:	15072a23          	sw	a6,340(a4)
80007740:	fe842783          	lw	a5,-24(s0)
80007744:	13878713          	addi	a4,a5,312
80007748:	89818793          	addi	a5,gp,-1896 # 8000dac8 <__timer_triggers>
8000774c:	00e7a023          	sw	a4,0(a5)
80007750:	00100513          	li	a0,1
80007754:	a79fb0ef          	jal	ra,800031cc <__create_token>
80007758:	00050713          	mv	a4,a0
8000775c:	fe842783          	lw	a5,-24(s0)
80007760:	1ce7ac23          	sw	a4,472(a5)
80007764:	fe842783          	lw	a5,-24(s0)
80007768:	1e078623          	sb	zero,492(a5)
8000776c:	86418793          	addi	a5,gp,-1948 # 8000da94 <__tokens_with_ref_count>
80007770:	0007a783          	lw	a5,0(a5)
80007774:	fe842703          	lw	a4,-24(s0)
80007778:	1d870713          	addi	a4,a4,472
8000777c:	00e7a023          	sw	a4,0(a5)
80007780:	86418793          	addi	a5,gp,-1948 # 8000da94 <__tokens_with_ref_count>
80007784:	0007a783          	lw	a5,0(a5)
80007788:	fe842703          	lw	a4,-24(s0)
8000778c:	1ec70713          	addi	a4,a4,492
80007790:	00e7a223          	sw	a4,4(a5)
80007794:	86418793          	addi	a5,gp,-1948 # 8000da94 <__tokens_with_ref_count>
80007798:	0007a783          	lw	a5,0(a5)
8000779c:	00100713          	li	a4,1
800077a0:	00e78423          	sb	a4,8(a5)
800077a4:	e50ff0ef          	jal	ra,80006df4 <new_Motors>
800077a8:	fea42223          	sw	a0,-28(s0)
800077ac:	fe442783          	lw	a5,-28(s0)
800077b0:	ffe00713          	li	a4,-2
800077b4:	00e7a623          	sw	a4,12(a5)
800077b8:	8d918793          	addi	a5,gp,-1831 # 8000db09 <robot_motors_initial_stopped.4177>
800077bc:	0007c703          	lbu	a4,0(a5)
800077c0:	fe442783          	lw	a5,-28(s0)
800077c4:	00e78223          	sb	a4,4(a5)
800077c8:	9b8ff0ef          	jal	ra,80006980 <new_Controller>
800077cc:	fea42023          	sw	a0,-32(s0)
800077d0:	fe042783          	lw	a5,-32(s0)
800077d4:	ffe00713          	li	a4,-2
800077d8:	04e7a823          	sw	a4,80(a5)
800077dc:	fe042783          	lw	a5,-32(s0)
800077e0:	ffe00713          	li	a4,-2
800077e4:	02e7a023          	sw	a4,32(a5)
800077e8:	fe042783          	lw	a5,-32(s0)
800077ec:	ffe00713          	li	a4,-2
800077f0:	02e7a823          	sw	a4,48(a5)
800077f4:	8dc18793          	addi	a5,gp,-1828 # 8000db0c <robot_controller_initial__state.4179>
800077f8:	0007a703          	lw	a4,0(a5)
800077fc:	fe042783          	lw	a5,-32(s0)
80007800:	00e7a223          	sw	a4,4(a5)
80007804:	82c18793          	addi	a5,gp,-2004 # 8000da5c <robot_controller_initial_driving_speed.4180>
80007808:	0007a703          	lw	a4,0(a5)
8000780c:	fe042783          	lw	a5,-32(s0)
80007810:	00e7a423          	sw	a4,8(a5)
80007814:	8e018793          	addi	a5,gp,-1824 # 8000db10 <robot_controller_initial_stop_speed.4181>
80007818:	0007a703          	lw	a4,0(a5)
8000781c:	fe042783          	lw	a5,-32(s0)
80007820:	00e7a623          	sw	a4,12(a5)
80007824:	8e418793          	addi	a5,gp,-1820 # 8000db14 <robot_controller_initial_driving_distance.4182>
80007828:	0007a703          	lw	a4,0(a5)
8000782c:	fe042783          	lw	a5,-32(s0)
80007830:	00e7a823          	sw	a4,16(a5)
80007834:	8e818793          	addi	a5,gp,-1816 # 8000db18 <robot_controller_initial_backing_distance.4183>
80007838:	0007a703          	lw	a4,0(a5)
8000783c:	fe042783          	lw	a5,-32(s0)
80007840:	00e7aa23          	sw	a4,20(a5)
80007844:	8ec18793          	addi	a5,gp,-1812 # 8000db1c <robot_controller_initial_turning_distance.4184>
80007848:	0007a703          	lw	a4,0(a5)
8000784c:	fe042783          	lw	a5,-32(s0)
80007850:	00e7ac23          	sw	a4,24(a5)
80007854:	fec42783          	lw	a5,-20(s0)
80007858:	0007a023          	sw	zero,0(a5)
8000785c:	fe842783          	lw	a5,-24(s0)
80007860:	0007a023          	sw	zero,0(a5)
80007864:	fe842783          	lw	a5,-24(s0)
80007868:	0407ac23          	sw	zero,88(a5)
8000786c:	fe842783          	lw	a5,-24(s0)
80007870:	0587a783          	lw	a5,88(a5)
80007874:	06f05863          	blez	a5,800078e4 <__initialize_trigger_objects+0x2a0>
80007878:	fe842783          	lw	a5,-24(s0)
8000787c:	0587a783          	lw	a5,88(a5)
80007880:	00279793          	slli	a5,a5,0x2
80007884:	00078513          	mv	a0,a5
80007888:	155030ef          	jal	ra,8000b1dc <malloc>
8000788c:	00050793          	mv	a5,a0
80007890:	00078713          	mv	a4,a5
80007894:	fe842783          	lw	a5,-24(s0)
80007898:	04e7ae23          	sw	a4,92(a5)
8000789c:	fe842783          	lw	a5,-24(s0)
800078a0:	0587a783          	lw	a5,88(a5)
800078a4:	00279793          	slli	a5,a5,0x2
800078a8:	00078513          	mv	a0,a5
800078ac:	131030ef          	jal	ra,8000b1dc <malloc>
800078b0:	00050793          	mv	a5,a0
800078b4:	00078713          	mv	a4,a5
800078b8:	fe842783          	lw	a5,-24(s0)
800078bc:	06e7a223          	sw	a4,100(a5)
800078c0:	fe842783          	lw	a5,-24(s0)
800078c4:	0587a783          	lw	a5,88(a5)
800078c8:	00279793          	slli	a5,a5,0x2
800078cc:	00078513          	mv	a0,a5
800078d0:	10d030ef          	jal	ra,8000b1dc <malloc>
800078d4:	00050793          	mv	a5,a0
800078d8:	00078713          	mv	a4,a5
800078dc:	fe842783          	lw	a5,-24(s0)
800078e0:	06e7a023          	sw	a4,96(a5)
800078e4:	fe842783          	lw	a5,-24(s0)
800078e8:	00100713          	li	a4,1
800078ec:	0ae7a823          	sw	a4,176(a5)
800078f0:	fe842783          	lw	a5,-24(s0)
800078f4:	0b07a783          	lw	a5,176(a5)
800078f8:	06f05863          	blez	a5,80007968 <__initialize_trigger_objects+0x324>
800078fc:	fe842783          	lw	a5,-24(s0)
80007900:	0b07a783          	lw	a5,176(a5)
80007904:	00279793          	slli	a5,a5,0x2
80007908:	00078513          	mv	a0,a5
8000790c:	0d1030ef          	jal	ra,8000b1dc <malloc>
80007910:	00050793          	mv	a5,a0
80007914:	00078713          	mv	a4,a5
80007918:	fe842783          	lw	a5,-24(s0)
8000791c:	0ae7aa23          	sw	a4,180(a5)
80007920:	fe842783          	lw	a5,-24(s0)
80007924:	0b07a783          	lw	a5,176(a5)
80007928:	00279793          	slli	a5,a5,0x2
8000792c:	00078513          	mv	a0,a5
80007930:	0ad030ef          	jal	ra,8000b1dc <malloc>
80007934:	00050793          	mv	a5,a0
80007938:	00078713          	mv	a4,a5
8000793c:	fe842783          	lw	a5,-24(s0)
80007940:	0ae7ae23          	sw	a4,188(a5)
80007944:	fe842783          	lw	a5,-24(s0)
80007948:	0b07a783          	lw	a5,176(a5)
8000794c:	00279793          	slli	a5,a5,0x2
80007950:	00078513          	mv	a0,a5
80007954:	089030ef          	jal	ra,8000b1dc <malloc>
80007958:	00050793          	mv	a5,a0
8000795c:	00078713          	mv	a4,a5
80007960:	fe842783          	lw	a5,-24(s0)
80007964:	0ae7ac23          	sw	a4,184(a5)
80007968:	fe842783          	lw	a5,-24(s0)
8000796c:	0b47a783          	lw	a5,180(a5)
80007970:	fe842703          	lw	a4,-24(s0)
80007974:	01970713          	addi	a4,a4,25
80007978:	00e7a023          	sw	a4,0(a5)
8000797c:	fe842783          	lw	a5,-24(s0)
80007980:	00100713          	li	a4,1
80007984:	10e7a423          	sw	a4,264(a5)
80007988:	fe842783          	lw	a5,-24(s0)
8000798c:	1087a783          	lw	a5,264(a5)
80007990:	06f05863          	blez	a5,80007a00 <__initialize_trigger_objects+0x3bc>
80007994:	fe842783          	lw	a5,-24(s0)
80007998:	1087a783          	lw	a5,264(a5)
8000799c:	00279793          	slli	a5,a5,0x2
800079a0:	00078513          	mv	a0,a5
800079a4:	039030ef          	jal	ra,8000b1dc <malloc>
800079a8:	00050793          	mv	a5,a0
800079ac:	00078713          	mv	a4,a5
800079b0:	fe842783          	lw	a5,-24(s0)
800079b4:	10e7a623          	sw	a4,268(a5)
800079b8:	fe842783          	lw	a5,-24(s0)
800079bc:	1087a783          	lw	a5,264(a5)
800079c0:	00279793          	slli	a5,a5,0x2
800079c4:	00078513          	mv	a0,a5
800079c8:	015030ef          	jal	ra,8000b1dc <malloc>
800079cc:	00050793          	mv	a5,a0
800079d0:	00078713          	mv	a4,a5
800079d4:	fe842783          	lw	a5,-24(s0)
800079d8:	10e7aa23          	sw	a4,276(a5)
800079dc:	fe842783          	lw	a5,-24(s0)
800079e0:	1087a783          	lw	a5,264(a5)
800079e4:	00279793          	slli	a5,a5,0x2
800079e8:	00078513          	mv	a0,a5
800079ec:	7f0030ef          	jal	ra,8000b1dc <malloc>
800079f0:	00050793          	mv	a5,a0
800079f4:	00078713          	mv	a4,a5
800079f8:	fe842783          	lw	a5,-24(s0)
800079fc:	10e7a823          	sw	a4,272(a5)
80007a00:	fe842783          	lw	a5,-24(s0)
80007a04:	10c7a783          	lw	a5,268(a5)
80007a08:	fe842703          	lw	a4,-24(s0)
80007a0c:	02570713          	addi	a4,a4,37
80007a10:	00e7a023          	sw	a4,0(a5)
80007a14:	fe842783          	lw	a5,-24(s0)
80007a18:	0407aa23          	sw	zero,84(a5)
80007a1c:	fe842783          	lw	a5,-24(s0)
80007a20:	03078713          	addi	a4,a5,48
80007a24:	fe842783          	lw	a5,-24(s0)
80007a28:	0ae7a623          	sw	a4,172(a5)
80007a2c:	fe842783          	lw	a5,-24(s0)
80007a30:	0b87a783          	lw	a5,184(a5)
80007a34:	00100713          	li	a4,1
80007a38:	00e7a023          	sw	a4,0(a5)
80007a3c:	00400513          	li	a0,4
80007a40:	79c030ef          	jal	ra,8000b1dc <malloc>
80007a44:	00050793          	mv	a5,a0
80007a48:	fcf42e23          	sw	a5,-36(s0)
80007a4c:	fe842783          	lw	a5,-24(s0)
80007a50:	0bc7a783          	lw	a5,188(a5)
80007a54:	fdc42703          	lw	a4,-36(s0)
80007a58:	00e7a023          	sw	a4,0(a5)
80007a5c:	fe042783          	lw	a5,-32(s0)
80007a60:	1a078713          	addi	a4,a5,416
80007a64:	fdc42783          	lw	a5,-36(s0)
80007a68:	00e7a023          	sw	a4,0(a5)
80007a6c:	fe842783          	lw	a5,-24(s0)
80007a70:	08878713          	addi	a4,a5,136
80007a74:	fe842783          	lw	a5,-24(s0)
80007a78:	10e7a223          	sw	a4,260(a5)
80007a7c:	fe842783          	lw	a5,-24(s0)
80007a80:	1107a783          	lw	a5,272(a5)
80007a84:	00100713          	li	a4,1
80007a88:	00e7a023          	sw	a4,0(a5)
80007a8c:	00400513          	li	a0,4
80007a90:	74c030ef          	jal	ra,8000b1dc <malloc>
80007a94:	00050793          	mv	a5,a0
80007a98:	fcf42c23          	sw	a5,-40(s0)
80007a9c:	fe842783          	lw	a5,-24(s0)
80007aa0:	1147a783          	lw	a5,276(a5)
80007aa4:	fd842703          	lw	a4,-40(s0)
80007aa8:	00e7a023          	sw	a4,0(a5)
80007aac:	fe042783          	lw	a5,-32(s0)
80007ab0:	16078713          	addi	a4,a5,352
80007ab4:	fd842783          	lw	a5,-40(s0)
80007ab8:	00e7a023          	sw	a4,0(a5)
80007abc:	fe842783          	lw	a5,-24(s0)
80007ac0:	00100713          	li	a4,1
80007ac4:	00e7ae23          	sw	a4,28(a5)
80007ac8:	fe842783          	lw	a5,-24(s0)
80007acc:	00100713          	li	a4,1
80007ad0:	02e7a423          	sw	a4,40(a5)
80007ad4:	fe442783          	lw	a5,-28(s0)
80007ad8:	0007a023          	sw	zero,0(a5)
80007adc:	fe442783          	lw	a5,-28(s0)
80007ae0:	0407a823          	sw	zero,80(a5)
80007ae4:	fe442783          	lw	a5,-28(s0)
80007ae8:	0507a783          	lw	a5,80(a5)
80007aec:	06f05863          	blez	a5,80007b5c <__initialize_trigger_objects+0x518>
80007af0:	fe442783          	lw	a5,-28(s0)
80007af4:	0507a783          	lw	a5,80(a5)
80007af8:	00279793          	slli	a5,a5,0x2
80007afc:	00078513          	mv	a0,a5
80007b00:	6dc030ef          	jal	ra,8000b1dc <malloc>
80007b04:	00050793          	mv	a5,a0
80007b08:	00078713          	mv	a4,a5
80007b0c:	fe442783          	lw	a5,-28(s0)
80007b10:	04e7aa23          	sw	a4,84(a5)
80007b14:	fe442783          	lw	a5,-28(s0)
80007b18:	0507a783          	lw	a5,80(a5)
80007b1c:	00279793          	slli	a5,a5,0x2
80007b20:	00078513          	mv	a0,a5
80007b24:	6b8030ef          	jal	ra,8000b1dc <malloc>
80007b28:	00050793          	mv	a5,a0
80007b2c:	00078713          	mv	a4,a5
80007b30:	fe442783          	lw	a5,-28(s0)
80007b34:	04e7ae23          	sw	a4,92(a5)
80007b38:	fe442783          	lw	a5,-28(s0)
80007b3c:	0507a783          	lw	a5,80(a5)
80007b40:	00279793          	slli	a5,a5,0x2
80007b44:	00078513          	mv	a0,a5
80007b48:	694030ef          	jal	ra,8000b1dc <malloc>
80007b4c:	00050793          	mv	a5,a0
80007b50:	00078713          	mv	a4,a5
80007b54:	fe442783          	lw	a5,-28(s0)
80007b58:	04e7ac23          	sw	a4,88(a5)
80007b5c:	fe042783          	lw	a5,-32(s0)
80007b60:	0b078713          	addi	a4,a5,176
80007b64:	fe442783          	lw	a5,-28(s0)
80007b68:	04e7a623          	sw	a4,76(a5)
80007b6c:	fe042783          	lw	a5,-32(s0)
80007b70:	0007a023          	sw	zero,0(a5)
80007b74:	fe042783          	lw	a5,-32(s0)
80007b78:	0807a023          	sw	zero,128(a5)
80007b7c:	fe042783          	lw	a5,-32(s0)
80007b80:	0807a783          	lw	a5,128(a5)
80007b84:	06f05863          	blez	a5,80007bf4 <__initialize_trigger_objects+0x5b0>
80007b88:	fe042783          	lw	a5,-32(s0)
80007b8c:	0807a783          	lw	a5,128(a5)
80007b90:	00279793          	slli	a5,a5,0x2
80007b94:	00078513          	mv	a0,a5
80007b98:	644030ef          	jal	ra,8000b1dc <malloc>
80007b9c:	00050793          	mv	a5,a0
80007ba0:	00078713          	mv	a4,a5
80007ba4:	fe042783          	lw	a5,-32(s0)
80007ba8:	08e7a223          	sw	a4,132(a5)
80007bac:	fe042783          	lw	a5,-32(s0)
80007bb0:	0807a783          	lw	a5,128(a5)
80007bb4:	00279793          	slli	a5,a5,0x2
80007bb8:	00078513          	mv	a0,a5
80007bbc:	620030ef          	jal	ra,8000b1dc <malloc>
80007bc0:	00050793          	mv	a5,a0
80007bc4:	00078713          	mv	a4,a5
80007bc8:	fe042783          	lw	a5,-32(s0)
80007bcc:	08e7a623          	sw	a4,140(a5)
80007bd0:	fe042783          	lw	a5,-32(s0)
80007bd4:	0807a783          	lw	a5,128(a5)
80007bd8:	00279793          	slli	a5,a5,0x2
80007bdc:	00078513          	mv	a0,a5
80007be0:	5fc030ef          	jal	ra,8000b1dc <malloc>
80007be4:	00050793          	mv	a5,a0
80007be8:	00078713          	mv	a4,a5
80007bec:	fe042783          	lw	a5,-32(s0)
80007bf0:	08e7a423          	sw	a4,136(a5)
80007bf4:	fe042783          	lw	a5,-32(s0)
80007bf8:	00100713          	li	a4,1
80007bfc:	0ce7ac23          	sw	a4,216(a5)
80007c00:	fe042783          	lw	a5,-32(s0)
80007c04:	0d87a783          	lw	a5,216(a5)
80007c08:	06f05863          	blez	a5,80007c78 <__initialize_trigger_objects+0x634>
80007c0c:	fe042783          	lw	a5,-32(s0)
80007c10:	0d87a783          	lw	a5,216(a5)
80007c14:	00279793          	slli	a5,a5,0x2
80007c18:	00078513          	mv	a0,a5
80007c1c:	5c0030ef          	jal	ra,8000b1dc <malloc>
80007c20:	00050793          	mv	a5,a0
80007c24:	00078713          	mv	a4,a5
80007c28:	fe042783          	lw	a5,-32(s0)
80007c2c:	0ce7ae23          	sw	a4,220(a5)
80007c30:	fe042783          	lw	a5,-32(s0)
80007c34:	0d87a783          	lw	a5,216(a5)
80007c38:	00279793          	slli	a5,a5,0x2
80007c3c:	00078513          	mv	a0,a5
80007c40:	59c030ef          	jal	ra,8000b1dc <malloc>
80007c44:	00050793          	mv	a5,a0
80007c48:	00078713          	mv	a4,a5
80007c4c:	fe042783          	lw	a5,-32(s0)
80007c50:	0ee7a223          	sw	a4,228(a5)
80007c54:	fe042783          	lw	a5,-32(s0)
80007c58:	0d87a783          	lw	a5,216(a5)
80007c5c:	00279793          	slli	a5,a5,0x2
80007c60:	00078513          	mv	a0,a5
80007c64:	578030ef          	jal	ra,8000b1dc <malloc>
80007c68:	00050793          	mv	a5,a0
80007c6c:	00078713          	mv	a4,a5
80007c70:	fe042783          	lw	a5,-32(s0)
80007c74:	0ee7a023          	sw	a4,224(a5)
80007c78:	fe042783          	lw	a5,-32(s0)
80007c7c:	0dc7a783          	lw	a5,220(a5)
80007c80:	fe042703          	lw	a4,-32(s0)
80007c84:	04070713          	addi	a4,a4,64
80007c88:	00e7a023          	sw	a4,0(a5)
80007c8c:	fe042783          	lw	a5,-32(s0)
80007c90:	1207a823          	sw	zero,304(a5)
80007c94:	fe042783          	lw	a5,-32(s0)
80007c98:	1307a783          	lw	a5,304(a5)
80007c9c:	06f05863          	blez	a5,80007d0c <__initialize_trigger_objects+0x6c8>
80007ca0:	fe042783          	lw	a5,-32(s0)
80007ca4:	1307a783          	lw	a5,304(a5)
80007ca8:	00279793          	slli	a5,a5,0x2
80007cac:	00078513          	mv	a0,a5
80007cb0:	52c030ef          	jal	ra,8000b1dc <malloc>
80007cb4:	00050793          	mv	a5,a0
80007cb8:	00078713          	mv	a4,a5
80007cbc:	fe042783          	lw	a5,-32(s0)
80007cc0:	12e7aa23          	sw	a4,308(a5)
80007cc4:	fe042783          	lw	a5,-32(s0)
80007cc8:	1307a783          	lw	a5,304(a5)
80007ccc:	00279793          	slli	a5,a5,0x2
80007cd0:	00078513          	mv	a0,a5
80007cd4:	508030ef          	jal	ra,8000b1dc <malloc>
80007cd8:	00050793          	mv	a5,a0
80007cdc:	00078713          	mv	a4,a5
80007ce0:	fe042783          	lw	a5,-32(s0)
80007ce4:	12e7ae23          	sw	a4,316(a5)
80007ce8:	fe042783          	lw	a5,-32(s0)
80007cec:	1307a783          	lw	a5,304(a5)
80007cf0:	00279793          	slli	a5,a5,0x2
80007cf4:	00078513          	mv	a0,a5
80007cf8:	4e4030ef          	jal	ra,8000b1dc <malloc>
80007cfc:	00050793          	mv	a5,a0
80007d00:	00078713          	mv	a4,a5
80007d04:	fe042783          	lw	a5,-32(s0)
80007d08:	12e7ac23          	sw	a4,312(a5)
80007d0c:	fe842783          	lw	a5,-24(s0)
80007d10:	08878713          	addi	a4,a5,136
80007d14:	fe042783          	lw	a5,-32(s0)
80007d18:	06e7ae23          	sw	a4,124(a5)
80007d1c:	fe042783          	lw	a5,-32(s0)
80007d20:	0c07aa23          	sw	zero,212(a5)
80007d24:	fe042783          	lw	a5,-32(s0)
80007d28:	0e07a783          	lw	a5,224(a5)
80007d2c:	00100713          	li	a4,1
80007d30:	00e7a023          	sw	a4,0(a5)
80007d34:	00400513          	li	a0,4
80007d38:	4a4030ef          	jal	ra,8000b1dc <malloc>
80007d3c:	00050793          	mv	a5,a0
80007d40:	fcf42a23          	sw	a5,-44(s0)
80007d44:	fe042783          	lw	a5,-32(s0)
80007d48:	0e47a783          	lw	a5,228(a5)
80007d4c:	fd442703          	lw	a4,-44(s0)
80007d50:	00e7a023          	sw	a4,0(a5)
80007d54:	fe442783          	lw	a5,-28(s0)
80007d58:	08078713          	addi	a4,a5,128
80007d5c:	fd442783          	lw	a5,-44(s0)
80007d60:	00e7a023          	sw	a4,0(a5)
80007d64:	fe042783          	lw	a5,-32(s0)
80007d68:	0b078713          	addi	a4,a5,176
80007d6c:	fe042783          	lw	a5,-32(s0)
80007d70:	12e7a623          	sw	a4,300(a5)
80007d74:	fe042783          	lw	a5,-32(s0)
80007d78:	00100713          	li	a4,1
80007d7c:	04e7a223          	sw	a4,68(a5)
80007d80:	00400513          	li	a0,4
80007d84:	c48fb0ef          	jal	ra,800031cc <__create_token>
80007d88:	00050713          	mv	a4,a0
80007d8c:	fe042783          	lw	a5,-32(s0)
80007d90:	04e7a423          	sw	a4,72(a5)
80007d94:	fe842783          	lw	a5,-24(s0)
80007d98:	01878713          	addi	a4,a5,24
80007d9c:	fe042783          	lw	a5,-32(s0)
80007da0:	02e7a623          	sw	a4,44(a5)
80007da4:	fe842783          	lw	a5,-24(s0)
80007da8:	02478713          	addi	a4,a5,36
80007dac:	fe042783          	lw	a5,-32(s0)
80007db0:	00e7ae23          	sw	a4,28(a5)
80007db4:	fe042783          	lw	a5,-32(s0)
80007db8:	03c78713          	addi	a4,a5,60
80007dbc:	fe442783          	lw	a5,-28(s0)
80007dc0:	00e7a423          	sw	a4,8(a5)
80007dc4:	85418793          	addi	a5,gp,-1964 # 8000da84 <__is_present_fields>
80007dc8:	0007a783          	lw	a5,0(a5)
80007dcc:	fe842703          	lw	a4,-24(s0)
80007dd0:	01170713          	addi	a4,a4,17
80007dd4:	00e7a023          	sw	a4,0(a5)
80007dd8:	fe442783          	lw	a5,-28(s0)
80007ddc:	0087a703          	lw	a4,8(a5)
80007de0:	86418793          	addi	a5,gp,-1948 # 8000da94 <__tokens_with_ref_count>
80007de4:	0007a783          	lw	a5,0(a5)
80007de8:	00c78793          	addi	a5,a5,12
80007dec:	00c70713          	addi	a4,a4,12
80007df0:	00e7a023          	sw	a4,0(a5)
80007df4:	fe442783          	lw	a5,-28(s0)
80007df8:	0087a703          	lw	a4,8(a5)
80007dfc:	86418793          	addi	a5,gp,-1948 # 8000da94 <__tokens_with_ref_count>
80007e00:	0007a783          	lw	a5,0(a5)
80007e04:	00c78793          	addi	a5,a5,12
80007e08:	00470713          	addi	a4,a4,4
80007e0c:	00e7a223          	sw	a4,4(a5)
80007e10:	86418793          	addi	a5,gp,-1948 # 8000da94 <__tokens_with_ref_count>
80007e14:	0007a783          	lw	a5,0(a5)
80007e18:	00c78793          	addi	a5,a5,12
80007e1c:	00078423          	sb	zero,8(a5)
80007e20:	85418793          	addi	a5,gp,-1964 # 8000da84 <__is_present_fields>
80007e24:	0007a783          	lw	a5,0(a5)
80007e28:	00478793          	addi	a5,a5,4
80007e2c:	fe842703          	lw	a4,-24(s0)
80007e30:	01970713          	addi	a4,a4,25
80007e34:	00e7a023          	sw	a4,0(a5)
80007e38:	85418793          	addi	a5,gp,-1964 # 8000da84 <__is_present_fields>
80007e3c:	0007a783          	lw	a5,0(a5)
80007e40:	00878793          	addi	a5,a5,8
80007e44:	fe842703          	lw	a4,-24(s0)
80007e48:	02570713          	addi	a4,a4,37
80007e4c:	00e7a023          	sw	a4,0(a5)
80007e50:	85418793          	addi	a5,gp,-1964 # 8000da84 <__is_present_fields>
80007e54:	0007a783          	lw	a5,0(a5)
80007e58:	00c78793          	addi	a5,a5,12
80007e5c:	fe042703          	lw	a4,-32(s0)
80007e60:	04070713          	addi	a4,a4,64
80007e64:	00e7a023          	sw	a4,0(a5)
80007e68:	fe842703          	lw	a4,-24(s0)
80007e6c:	01f00793          	li	a5,31
80007e70:	00000813          	li	a6,0
80007e74:	04f72423          	sw	a5,72(a4)
80007e78:	05072623          	sw	a6,76(a4)
80007e7c:	fe842703          	lw	a4,-24(s0)
80007e80:	ffff07b7          	lui	a5,0xffff0
80007e84:	80000837          	lui	a6,0x80000
80007e88:	fff84813          	not	a6,a6
80007e8c:	04f72023          	sw	a5,64(a4)
80007e90:	05072223          	sw	a6,68(a4)
80007e94:	fe842703          	lw	a4,-24(s0)
80007e98:	01f00793          	li	a5,31
80007e9c:	00000813          	li	a6,0
80007ea0:	0af72023          	sw	a5,160(a4)
80007ea4:	0b072223          	sw	a6,164(a4)
80007ea8:	fe842703          	lw	a4,-24(s0)
80007eac:	ffff07b7          	lui	a5,0xffff0
80007eb0:	00178793          	addi	a5,a5,1 # ffff0001 <__global_pointer$+0x7ffe1dd1>
80007eb4:	80000837          	lui	a6,0x80000
80007eb8:	fff84813          	not	a6,a6
80007ebc:	08f72c23          	sw	a5,152(a4)
80007ec0:	09072e23          	sw	a6,156(a4)
80007ec4:	fe842703          	lw	a4,-24(s0)
80007ec8:	00d00793          	li	a5,13
80007ecc:	00000813          	li	a6,0
80007ed0:	0ef72c23          	sw	a5,248(a4)
80007ed4:	0f072e23          	sw	a6,252(a4)
80007ed8:	fe842703          	lw	a4,-24(s0)
80007edc:	ffff07b7          	lui	a5,0xffff0
80007ee0:	00278793          	addi	a5,a5,2 # ffff0002 <__global_pointer$+0x7ffe1dd2>
80007ee4:	80000837          	lui	a6,0x80000
80007ee8:	fff84813          	not	a6,a6
80007eec:	0ef72823          	sw	a5,240(a4)
80007ef0:	0f072a23          	sw	a6,244(a4)
80007ef4:	fe442703          	lw	a4,-28(s0)
80007ef8:	01800793          	li	a5,24
80007efc:	00000813          	li	a6,0
80007f00:	04f72023          	sw	a5,64(a4)
80007f04:	05072223          	sw	a6,68(a4)
80007f08:	fe442703          	lw	a4,-28(s0)
80007f0c:	ffff07b7          	lui	a5,0xffff0
80007f10:	00478793          	addi	a5,a5,4 # ffff0004 <__global_pointer$+0x7ffe1dd4>
80007f14:	80000837          	lui	a6,0x80000
80007f18:	fff84813          	not	a6,a6
80007f1c:	02f72c23          	sw	a5,56(a4)
80007f20:	03072e23          	sw	a6,60(a4)
80007f24:	fe042703          	lw	a4,-32(s0)
80007f28:	01200793          	li	a5,18
80007f2c:	00000813          	li	a6,0
80007f30:	06f72823          	sw	a5,112(a4)
80007f34:	07072a23          	sw	a6,116(a4)
80007f38:	fe042703          	lw	a4,-32(s0)
80007f3c:	ffff07b7          	lui	a5,0xffff0
80007f40:	00278793          	addi	a5,a5,2 # ffff0002 <__global_pointer$+0x7ffe1dd2>
80007f44:	80000837          	lui	a6,0x80000
80007f48:	fff84813          	not	a6,a6
80007f4c:	06f72423          	sw	a5,104(a4)
80007f50:	07072623          	sw	a6,108(a4)
80007f54:	fe042703          	lw	a4,-32(s0)
80007f58:	01b00793          	li	a5,27
80007f5c:	00000813          	li	a6,0
80007f60:	0cf72423          	sw	a5,200(a4)
80007f64:	0d072623          	sw	a6,204(a4)
80007f68:	fe042703          	lw	a4,-32(s0)
80007f6c:	ffff07b7          	lui	a5,0xffff0
80007f70:	00378793          	addi	a5,a5,3 # ffff0003 <__global_pointer$+0x7ffe1dd3>
80007f74:	80000837          	lui	a6,0x80000
80007f78:	fff84813          	not	a6,a6
80007f7c:	0cf72023          	sw	a5,192(a4)
80007f80:	0d072223          	sw	a6,196(a4)
80007f84:	fe042703          	lw	a4,-32(s0)
80007f88:	00700793          	li	a5,7
80007f8c:	00000813          	li	a6,0
80007f90:	12f72023          	sw	a5,288(a4)
80007f94:	13072223          	sw	a6,292(a4)
80007f98:	fe042703          	lw	a4,-32(s0)
80007f9c:	ffff07b7          	lui	a5,0xffff0
80007fa0:	00478793          	addi	a5,a5,4 # ffff0004 <__global_pointer$+0x7ffe1dd4>
80007fa4:	80000837          	lui	a6,0x80000
80007fa8:	fff84813          	not	a6,a6
80007fac:	10f72c23          	sw	a5,280(a4)
80007fb0:	11072e23          	sw	a6,284(a4)
80007fb4:	00000013          	nop
80007fb8:	02c12083          	lw	ra,44(sp)
80007fbc:	02812403          	lw	s0,40(sp)
80007fc0:	03010113          	addi	sp,sp,48
80007fc4:	00008067          	ret

80007fc8 <__trigger_startup_reactions>:
80007fc8:	fe010113          	addi	sp,sp,-32
80007fcc:	00112e23          	sw	ra,28(sp)
80007fd0:	00812c23          	sw	s0,24(sp)
80007fd4:	02010413          	addi	s0,sp,32
80007fd8:	fe042623          	sw	zero,-20(s0)
80007fdc:	0440006f          	j	80008020 <__trigger_startup_reactions+0x58>
80007fe0:	89c18713          	addi	a4,gp,-1892 # 8000dacc <__startup_reactions>
80007fe4:	fec42783          	lw	a5,-20(s0)
80007fe8:	00279793          	slli	a5,a5,0x2
80007fec:	00f707b3          	add	a5,a4,a5
80007ff0:	0007a783          	lw	a5,0(a5)
80007ff4:	02078063          	beqz	a5,80008014 <__trigger_startup_reactions+0x4c>
80007ff8:	89c18713          	addi	a4,gp,-1892 # 8000dacc <__startup_reactions>
80007ffc:	fec42783          	lw	a5,-20(s0)
80008000:	00279793          	slli	a5,a5,0x2
80008004:	00f707b3          	add	a5,a4,a5
80008008:	0007a783          	lw	a5,0(a5)
8000800c:	00078513          	mv	a0,a5
80008010:	ed1fd0ef          	jal	ra,80005ee0 <_lf_enqueue_reaction>
80008014:	fec42783          	lw	a5,-20(s0)
80008018:	00178793          	addi	a5,a5,1
8000801c:	fef42623          	sw	a5,-20(s0)
80008020:	82418793          	addi	a5,gp,-2012 # 8000da54 <__startup_reactions_size>
80008024:	0007a783          	lw	a5,0(a5)
80008028:	fec42703          	lw	a4,-20(s0)
8000802c:	faf74ae3          	blt	a4,a5,80007fe0 <__trigger_startup_reactions+0x18>
80008030:	00000013          	nop
80008034:	01c12083          	lw	ra,28(sp)
80008038:	01812403          	lw	s0,24(sp)
8000803c:	02010113          	addi	sp,sp,32
80008040:	00008067          	ret

80008044 <__initialize_timers>:
80008044:	fe010113          	addi	sp,sp,-32
80008048:	00112e23          	sw	ra,28(sp)
8000804c:	00812c23          	sw	s0,24(sp)
80008050:	02010413          	addi	s0,sp,32
80008054:	fe042623          	sw	zero,-20(s0)
80008058:	0440006f          	j	8000809c <__initialize_timers+0x58>
8000805c:	89818713          	addi	a4,gp,-1896 # 8000dac8 <__timer_triggers>
80008060:	fec42783          	lw	a5,-20(s0)
80008064:	00279793          	slli	a5,a5,0x2
80008068:	00f707b3          	add	a5,a4,a5
8000806c:	0007a783          	lw	a5,0(a5)
80008070:	02078063          	beqz	a5,80008090 <__initialize_timers+0x4c>
80008074:	89818713          	addi	a4,gp,-1896 # 8000dac8 <__timer_triggers>
80008078:	fec42783          	lw	a5,-20(s0)
8000807c:	00279793          	slli	a5,a5,0x2
80008080:	00f707b3          	add	a5,a4,a5
80008084:	0007a783          	lw	a5,0(a5)
80008088:	00078513          	mv	a0,a5
8000808c:	ec4fb0ef          	jal	ra,80003750 <_lf_initialize_timer>
80008090:	fec42783          	lw	a5,-20(s0)
80008094:	00178793          	addi	a5,a5,1
80008098:	fef42623          	sw	a5,-20(s0)
8000809c:	82018793          	addi	a5,gp,-2016 # 8000da50 <__timer_triggers_size>
800080a0:	0007a783          	lw	a5,0(a5)
800080a4:	fec42703          	lw	a4,-20(s0)
800080a8:	faf74ae3          	blt	a4,a5,8000805c <__initialize_timers+0x18>
800080ac:	00000013          	nop
800080b0:	01c12083          	lw	ra,28(sp)
800080b4:	01812403          	lw	s0,24(sp)
800080b8:	02010113          	addi	sp,sp,32
800080bc:	00008067          	ret

800080c0 <logical_time_complete>:
800080c0:	fe010113          	addi	sp,sp,-32
800080c4:	00812e23          	sw	s0,28(sp)
800080c8:	02010413          	addi	s0,sp,32
800080cc:	fea42423          	sw	a0,-24(s0)
800080d0:	feb42623          	sw	a1,-20(s0)
800080d4:	fec42223          	sw	a2,-28(s0)
800080d8:	00000013          	nop
800080dc:	01c12403          	lw	s0,28(sp)
800080e0:	02010113          	addi	sp,sp,32
800080e4:	00008067          	ret

800080e8 <next_event_tag>:
800080e8:	fe010113          	addi	sp,sp,-32
800080ec:	00812e23          	sw	s0,28(sp)
800080f0:	02010413          	addi	s0,sp,32
800080f4:	fea42623          	sw	a0,-20(s0)
800080f8:	feb42023          	sw	a1,-32(s0)
800080fc:	fec42223          	sw	a2,-28(s0)
80008100:	fed42423          	sw	a3,-24(s0)
80008104:	fec42703          	lw	a4,-20(s0)
80008108:	fe042783          	lw	a5,-32(s0)
8000810c:	fe442803          	lw	a6,-28(s0)
80008110:	00f72023          	sw	a5,0(a4)
80008114:	01072223          	sw	a6,4(a4)
80008118:	fec42783          	lw	a5,-20(s0)
8000811c:	fe842703          	lw	a4,-24(s0)
80008120:	00e7a423          	sw	a4,8(a5)
80008124:	fec42503          	lw	a0,-20(s0)
80008128:	01c12403          	lw	s0,28(sp)
8000812c:	02010113          	addi	sp,sp,32
80008130:	00008067          	ret

80008134 <__trigger_shutdown_reactions>:
80008134:	fe010113          	addi	sp,sp,-32
80008138:	00112e23          	sw	ra,28(sp)
8000813c:	00812c23          	sw	s0,24(sp)
80008140:	02010413          	addi	s0,sp,32
80008144:	fe042623          	sw	zero,-20(s0)
80008148:	04c0006f          	j	80008194 <__trigger_shutdown_reactions+0x60>
8000814c:	8a018793          	addi	a5,gp,-1888 # 8000dad0 <__shutdown_reactions>
80008150:	0007a703          	lw	a4,0(a5)
80008154:	fec42783          	lw	a5,-20(s0)
80008158:	00279793          	slli	a5,a5,0x2
8000815c:	00f707b3          	add	a5,a4,a5
80008160:	0007a783          	lw	a5,0(a5)
80008164:	02078263          	beqz	a5,80008188 <__trigger_shutdown_reactions+0x54>
80008168:	8a018793          	addi	a5,gp,-1888 # 8000dad0 <__shutdown_reactions>
8000816c:	0007a703          	lw	a4,0(a5)
80008170:	fec42783          	lw	a5,-20(s0)
80008174:	00279793          	slli	a5,a5,0x2
80008178:	00f707b3          	add	a5,a4,a5
8000817c:	0007a783          	lw	a5,0(a5)
80008180:	00078513          	mv	a0,a5
80008184:	d5dfd0ef          	jal	ra,80005ee0 <_lf_enqueue_reaction>
80008188:	fec42783          	lw	a5,-20(s0)
8000818c:	00178793          	addi	a5,a5,1
80008190:	fef42623          	sw	a5,-20(s0)
80008194:	8a418793          	addi	a5,gp,-1884 # 8000dad4 <__shutdown_reactions_size>
80008198:	0007a783          	lw	a5,0(a5)
8000819c:	fec42703          	lw	a4,-20(s0)
800081a0:	faf746e3          	blt	a4,a5,8000814c <__trigger_shutdown_reactions+0x18>
800081a4:	8a418793          	addi	a5,gp,-1884 # 8000dad4 <__shutdown_reactions_size>
800081a8:	0007a783          	lw	a5,0(a5)
800081ac:	00f027b3          	sgtz	a5,a5
800081b0:	0ff7f793          	andi	a5,a5,255
800081b4:	00078513          	mv	a0,a5
800081b8:	01c12083          	lw	ra,28(sp)
800081bc:	01812403          	lw	s0,24(sp)
800081c0:	02010113          	addi	sp,sp,32
800081c4:	00008067          	ret

800081c8 <__termination>:
800081c8:	ff010113          	addi	sp,sp,-16
800081cc:	00812623          	sw	s0,12(sp)
800081d0:	01010413          	addi	s0,sp,16
800081d4:	00000013          	nop
800081d8:	00c12403          	lw	s0,12(sp)
800081dc:	01010113          	addi	sp,sp,16
800081e0:	00008067          	ret

800081e4 <verify>:
{
800081e4:	fc010113          	addi	sp,sp,-64
800081e8:	02812e23          	sw	s0,60(sp)
800081ec:	04010413          	addi	s0,sp,64
800081f0:	fca42623          	sw	a0,-52(s0)
800081f4:	fcb42423          	sw	a1,-56(s0)
800081f8:	fcc42223          	sw	a2,-60(s0)
  for (i = 0; i < n/2*2; i+=2)
800081fc:	fe042623          	sw	zero,-20(s0)
80008200:	0a80006f          	j	800082a8 <verify+0xc4>
    int t0 = test[i], t1 = test[i+1];
80008204:	fec42783          	lw	a5,-20(s0)
80008208:	00279793          	slli	a5,a5,0x2
8000820c:	fc842703          	lw	a4,-56(s0)
80008210:	00f707b3          	add	a5,a4,a5
80008214:	0007a783          	lw	a5,0(a5)
80008218:	fef42423          	sw	a5,-24(s0)
8000821c:	fec42783          	lw	a5,-20(s0)
80008220:	00178793          	addi	a5,a5,1
80008224:	00279793          	slli	a5,a5,0x2
80008228:	fc842703          	lw	a4,-56(s0)
8000822c:	00f707b3          	add	a5,a4,a5
80008230:	0007a783          	lw	a5,0(a5)
80008234:	fef42223          	sw	a5,-28(s0)
    int v0 = verify[i], v1 = verify[i+1];
80008238:	fec42783          	lw	a5,-20(s0)
8000823c:	00279793          	slli	a5,a5,0x2
80008240:	fc442703          	lw	a4,-60(s0)
80008244:	00f707b3          	add	a5,a4,a5
80008248:	0007a783          	lw	a5,0(a5)
8000824c:	fef42023          	sw	a5,-32(s0)
80008250:	fec42783          	lw	a5,-20(s0)
80008254:	00178793          	addi	a5,a5,1
80008258:	00279793          	slli	a5,a5,0x2
8000825c:	fc442703          	lw	a4,-60(s0)
80008260:	00f707b3          	add	a5,a4,a5
80008264:	0007a783          	lw	a5,0(a5)
80008268:	fcf42e23          	sw	a5,-36(s0)
    if (t0 != v0) return i+1;
8000826c:	fe842703          	lw	a4,-24(s0)
80008270:	fe042783          	lw	a5,-32(s0)
80008274:	00f70863          	beq	a4,a5,80008284 <verify+0xa0>
80008278:	fec42783          	lw	a5,-20(s0)
8000827c:	00178793          	addi	a5,a5,1
80008280:	0a00006f          	j	80008320 <verify+0x13c>
    if (t1 != v1) return i+2;
80008284:	fe442703          	lw	a4,-28(s0)
80008288:	fdc42783          	lw	a5,-36(s0)
8000828c:	00f70863          	beq	a4,a5,8000829c <verify+0xb8>
80008290:	fec42783          	lw	a5,-20(s0)
80008294:	00278793          	addi	a5,a5,2
80008298:	0880006f          	j	80008320 <verify+0x13c>
  for (i = 0; i < n/2*2; i+=2)
8000829c:	fec42783          	lw	a5,-20(s0)
800082a0:	00278793          	addi	a5,a5,2
800082a4:	fef42623          	sw	a5,-20(s0)
800082a8:	fcc42783          	lw	a5,-52(s0)
800082ac:	01f7d713          	srli	a4,a5,0x1f
800082b0:	00f707b3          	add	a5,a4,a5
800082b4:	4017d793          	srai	a5,a5,0x1
800082b8:	00179793          	slli	a5,a5,0x1
800082bc:	fec42703          	lw	a4,-20(s0)
800082c0:	f4f742e3          	blt	a4,a5,80008204 <verify+0x20>
  if (n % 2 != 0 && test[n-1] != verify[n-1])
800082c4:	fcc42783          	lw	a5,-52(s0)
800082c8:	0017f793          	andi	a5,a5,1
800082cc:	04078863          	beqz	a5,8000831c <verify+0x138>
800082d0:	fcc42703          	lw	a4,-52(s0)
800082d4:	400007b7          	lui	a5,0x40000
800082d8:	fff78793          	addi	a5,a5,-1 # 3fffffff <buflen.2800+0x3fffff7b>
800082dc:	00f707b3          	add	a5,a4,a5
800082e0:	00279793          	slli	a5,a5,0x2
800082e4:	fc842703          	lw	a4,-56(s0)
800082e8:	00f707b3          	add	a5,a4,a5
800082ec:	0007a703          	lw	a4,0(a5)
800082f0:	fcc42683          	lw	a3,-52(s0)
800082f4:	400007b7          	lui	a5,0x40000
800082f8:	fff78793          	addi	a5,a5,-1 # 3fffffff <buflen.2800+0x3fffff7b>
800082fc:	00f687b3          	add	a5,a3,a5
80008300:	00279793          	slli	a5,a5,0x2
80008304:	fc442683          	lw	a3,-60(s0)
80008308:	00f687b3          	add	a5,a3,a5
8000830c:	0007a783          	lw	a5,0(a5)
80008310:	00f70663          	beq	a4,a5,8000831c <verify+0x138>
    return n;
80008314:	fcc42783          	lw	a5,-52(s0)
80008318:	0080006f          	j	80008320 <verify+0x13c>
  return 0;
8000831c:	00000793          	li	a5,0
}
80008320:	00078513          	mv	a0,a5
80008324:	03c12403          	lw	s0,60(sp)
80008328:	04010113          	addi	sp,sp,64
8000832c:	00008067          	ret

80008330 <verifyDouble>:
{
80008330:	fb010113          	addi	sp,sp,-80
80008334:	04112623          	sw	ra,76(sp)
80008338:	04812423          	sw	s0,72(sp)
8000833c:	04912223          	sw	s1,68(sp)
80008340:	05010413          	addi	s0,sp,80
80008344:	faa42e23          	sw	a0,-68(s0)
80008348:	fab42c23          	sw	a1,-72(s0)
8000834c:	fac42a23          	sw	a2,-76(s0)
  for (i = 0; i < n/2*2; i+=2)
80008350:	fe042623          	sw	zero,-20(s0)
80008354:	1140006f          	j	80008468 <verifyDouble+0x138>
    double t0 = test[i], t1 = test[i+1];
80008358:	fec42783          	lw	a5,-20(s0)
8000835c:	00379793          	slli	a5,a5,0x3
80008360:	fb842703          	lw	a4,-72(s0)
80008364:	00f707b3          	add	a5,a4,a5
80008368:	0047a803          	lw	a6,4(a5)
8000836c:	0007a783          	lw	a5,0(a5)
80008370:	fef42023          	sw	a5,-32(s0)
80008374:	ff042223          	sw	a6,-28(s0)
80008378:	fec42783          	lw	a5,-20(s0)
8000837c:	00178793          	addi	a5,a5,1
80008380:	00379793          	slli	a5,a5,0x3
80008384:	fb842703          	lw	a4,-72(s0)
80008388:	00f707b3          	add	a5,a4,a5
8000838c:	0047a803          	lw	a6,4(a5)
80008390:	0007a783          	lw	a5,0(a5)
80008394:	fcf42c23          	sw	a5,-40(s0)
80008398:	fd042e23          	sw	a6,-36(s0)
    double v0 = verify[i], v1 = verify[i+1];
8000839c:	fec42783          	lw	a5,-20(s0)
800083a0:	00379793          	slli	a5,a5,0x3
800083a4:	fb442703          	lw	a4,-76(s0)
800083a8:	00f707b3          	add	a5,a4,a5
800083ac:	0047a803          	lw	a6,4(a5)
800083b0:	0007a783          	lw	a5,0(a5)
800083b4:	fcf42823          	sw	a5,-48(s0)
800083b8:	fd042a23          	sw	a6,-44(s0)
800083bc:	fec42783          	lw	a5,-20(s0)
800083c0:	00178793          	addi	a5,a5,1
800083c4:	00379793          	slli	a5,a5,0x3
800083c8:	fb442703          	lw	a4,-76(s0)
800083cc:	00f707b3          	add	a5,a4,a5
800083d0:	0047a803          	lw	a6,4(a5)
800083d4:	0007a783          	lw	a5,0(a5)
800083d8:	fcf42423          	sw	a5,-56(s0)
800083dc:	fd042623          	sw	a6,-52(s0)
    int eq1 = t0 == v0, eq2 = t1 == v1;
800083e0:	00100493          	li	s1,1
800083e4:	fd042603          	lw	a2,-48(s0)
800083e8:	fd442683          	lw	a3,-44(s0)
800083ec:	fe042503          	lw	a0,-32(s0)
800083f0:	fe442583          	lw	a1,-28(s0)
800083f4:	7b8020ef          	jal	ra,8000abac <__eqdf2>
800083f8:	00050793          	mv	a5,a0
800083fc:	00078463          	beqz	a5,80008404 <verifyDouble+0xd4>
80008400:	00000493          	li	s1,0
80008404:	0ff4f793          	andi	a5,s1,255
80008408:	fcf42223          	sw	a5,-60(s0)
8000840c:	00100493          	li	s1,1
80008410:	fc842603          	lw	a2,-56(s0)
80008414:	fcc42683          	lw	a3,-52(s0)
80008418:	fd842503          	lw	a0,-40(s0)
8000841c:	fdc42583          	lw	a1,-36(s0)
80008420:	78c020ef          	jal	ra,8000abac <__eqdf2>
80008424:	00050793          	mv	a5,a0
80008428:	00078463          	beqz	a5,80008430 <verifyDouble+0x100>
8000842c:	00000493          	li	s1,0
80008430:	0ff4f793          	andi	a5,s1,255
80008434:	fcf42023          	sw	a5,-64(s0)
    if (!(eq1 & eq2)) return i+1+eq1;
80008438:	fc442703          	lw	a4,-60(s0)
8000843c:	fc042783          	lw	a5,-64(s0)
80008440:	00f777b3          	and	a5,a4,a5
80008444:	00079c63          	bnez	a5,8000845c <verifyDouble+0x12c>
80008448:	fec42783          	lw	a5,-20(s0)
8000844c:	00178713          	addi	a4,a5,1
80008450:	fc442783          	lw	a5,-60(s0)
80008454:	00f707b3          	add	a5,a4,a5
80008458:	0a80006f          	j	80008500 <verifyDouble+0x1d0>
  for (i = 0; i < n/2*2; i+=2)
8000845c:	fec42783          	lw	a5,-20(s0)
80008460:	00278793          	addi	a5,a5,2
80008464:	fef42623          	sw	a5,-20(s0)
80008468:	fbc42783          	lw	a5,-68(s0)
8000846c:	01f7d713          	srli	a4,a5,0x1f
80008470:	00f707b3          	add	a5,a4,a5
80008474:	4017d793          	srai	a5,a5,0x1
80008478:	00179793          	slli	a5,a5,0x1
8000847c:	fec42703          	lw	a4,-20(s0)
80008480:	ecf74ce3          	blt	a4,a5,80008358 <verifyDouble+0x28>
  if (n % 2 != 0 && test[n-1] != verify[n-1])
80008484:	fbc42783          	lw	a5,-68(s0)
80008488:	0017f793          	andi	a5,a5,1
8000848c:	06078863          	beqz	a5,800084fc <verifyDouble+0x1cc>
80008490:	fbc42703          	lw	a4,-68(s0)
80008494:	200007b7          	lui	a5,0x20000
80008498:	fff78793          	addi	a5,a5,-1 # 1fffffff <buflen.2800+0x1fffff7b>
8000849c:	00f707b3          	add	a5,a4,a5
800084a0:	00379793          	slli	a5,a5,0x3
800084a4:	fb842703          	lw	a4,-72(s0)
800084a8:	00f707b3          	add	a5,a4,a5
800084ac:	0047a803          	lw	a6,4(a5)
800084b0:	0007a783          	lw	a5,0(a5)
800084b4:	fbc42683          	lw	a3,-68(s0)
800084b8:	20000737          	lui	a4,0x20000
800084bc:	fff70713          	addi	a4,a4,-1 # 1fffffff <buflen.2800+0x1fffff7b>
800084c0:	00e68733          	add	a4,a3,a4
800084c4:	00371713          	slli	a4,a4,0x3
800084c8:	fb442683          	lw	a3,-76(s0)
800084cc:	00e68733          	add	a4,a3,a4
800084d0:	00072683          	lw	a3,0(a4)
800084d4:	00472703          	lw	a4,4(a4)
800084d8:	00068613          	mv	a2,a3
800084dc:	00070693          	mv	a3,a4
800084e0:	00078513          	mv	a0,a5
800084e4:	00080593          	mv	a1,a6
800084e8:	6c4020ef          	jal	ra,8000abac <__eqdf2>
800084ec:	00050793          	mv	a5,a0
800084f0:	00078663          	beqz	a5,800084fc <verifyDouble+0x1cc>
    return n;
800084f4:	fbc42783          	lw	a5,-68(s0)
800084f8:	0080006f          	j	80008500 <verifyDouble+0x1d0>
  return 0;
800084fc:	00000793          	li	a5,0
}
80008500:	00078513          	mv	a0,a5
80008504:	04c12083          	lw	ra,76(sp)
80008508:	04812403          	lw	s0,72(sp)
8000850c:	04412483          	lw	s1,68(sp)
80008510:	05010113          	addi	sp,sp,80
80008514:	00008067          	ret

80008518 <barrier>:
{
80008518:	fe010113          	addi	sp,sp,-32
8000851c:	00812e23          	sw	s0,28(sp)
80008520:	02010413          	addi	s0,sp,32
80008524:	fea42623          	sw	a0,-20(s0)
  __sync_synchronize();
80008528:	0ff0000f          	fence
  threadsense = !threadsense;
8000852c:	04022783          	lw	a5,64(tp) # 40 <threadsense.2705>
80008530:	0017b793          	seqz	a5,a5
80008534:	0ff7f793          	andi	a5,a5,255
80008538:	00078713          	mv	a4,a5
8000853c:	04e22023          	sw	a4,64(tp) # 40 <threadsense.2705>
  if (__sync_fetch_and_add(&count, 1) == ncores-1)
80008540:	90018793          	addi	a5,gp,-1792 # 8000db30 <count.2704>
80008544:	00100713          	li	a4,1
80008548:	0f50000f          	fence	iorw,ow
8000854c:	04e7a6af          	amoadd.w.aq	a3,a4,(a5)
80008550:	00068713          	mv	a4,a3
80008554:	fec42783          	lw	a5,-20(s0)
80008558:	fff78793          	addi	a5,a5,-1
8000855c:	00f71e63          	bne	a4,a5,80008578 <barrier+0x60>
    count = 0;
80008560:	90018793          	addi	a5,gp,-1792 # 8000db30 <count.2704>
80008564:	0007a023          	sw	zero,0(a5)
    sense = threadsense;
80008568:	04022703          	lw	a4,64(tp) # 40 <threadsense.2705>
8000856c:	90418793          	addi	a5,gp,-1788 # 8000db34 <sense.2703>
80008570:	00e7a023          	sw	a4,0(a5)
80008574:	0180006f          	j	8000858c <barrier+0x74>
  else while(sense != threadsense)
80008578:	00000013          	nop
8000857c:	90418793          	addi	a5,gp,-1788 # 8000db34 <sense.2703>
80008580:	0007a703          	lw	a4,0(a5)
80008584:	04022783          	lw	a5,64(tp) # 40 <threadsense.2705>
80008588:	fef71ae3          	bne	a4,a5,8000857c <barrier+0x64>
  __sync_synchronize();
8000858c:	0ff0000f          	fence
}
80008590:	00000013          	nop
80008594:	01c12403          	lw	s0,28(sp)
80008598:	02010113          	addi	sp,sp,32
8000859c:	00008067          	ret

800085a0 <lfsr>:
{
800085a0:	fd010113          	addi	sp,sp,-48
800085a4:	02812623          	sw	s0,44(sp)
800085a8:	03010413          	addi	s0,sp,48
800085ac:	fca42c23          	sw	a0,-40(s0)
800085b0:	fcb42e23          	sw	a1,-36(s0)
  uint64_t bit = (x ^ (x >> 1)) & 1;
800085b4:	fdc42603          	lw	a2,-36(s0)
800085b8:	01f61613          	slli	a2,a2,0x1f
800085bc:	fd842583          	lw	a1,-40(s0)
800085c0:	0015d693          	srli	a3,a1,0x1
800085c4:	00d666b3          	or	a3,a2,a3
800085c8:	fdc42603          	lw	a2,-36(s0)
800085cc:	00165713          	srli	a4,a2,0x1
800085d0:	fd842603          	lw	a2,-40(s0)
800085d4:	00d64333          	xor	t1,a2,a3
800085d8:	fdc42603          	lw	a2,-36(s0)
800085dc:	00e643b3          	xor	t2,a2,a4
800085e0:	00137713          	andi	a4,t1,1
800085e4:	fee42423          	sw	a4,-24(s0)
800085e8:	0003f713          	andi	a4,t2,0
800085ec:	fee42623          	sw	a4,-20(s0)
  return (x >> 1) | (bit << 62);
800085f0:	fdc42703          	lw	a4,-36(s0)
800085f4:	01f71713          	slli	a4,a4,0x1f
800085f8:	fd842683          	lw	a3,-40(s0)
800085fc:	0016d793          	srli	a5,a3,0x1
80008600:	00f767b3          	or	a5,a4,a5
80008604:	fdc42703          	lw	a4,-36(s0)
80008608:	00175813          	srli	a6,a4,0x1
8000860c:	fe842703          	lw	a4,-24(s0)
80008610:	01e71e93          	slli	t4,a4,0x1e
80008614:	00000e13          	li	t3,0
80008618:	01c7ef33          	or	t5,a5,t3
8000861c:	01d86fb3          	or	t6,a6,t4
80008620:	000f0793          	mv	a5,t5
80008624:	000f8813          	mv	a6,t6
}
80008628:	00078513          	mv	a0,a5
8000862c:	00080593          	mv	a1,a6
80008630:	02c12403          	lw	s0,44(sp)
80008634:	03010113          	addi	sp,sp,48
80008638:	00008067          	ret

8000863c <insn_len>:
{
8000863c:	fe010113          	addi	sp,sp,-32
80008640:	00812e23          	sw	s0,28(sp)
80008644:	02010413          	addi	s0,sp,32
80008648:	fea42623          	sw	a0,-20(s0)
  return (*(unsigned short*)pc & 3) ? 4 : 2;
8000864c:	fec42783          	lw	a5,-20(s0)
80008650:	0007d783          	lhu	a5,0(a5)
80008654:	0037f793          	andi	a5,a5,3
80008658:	00078663          	beqz	a5,80008664 <insn_len+0x28>
8000865c:	00400793          	li	a5,4
80008660:	0080006f          	j	80008668 <insn_len+0x2c>
80008664:	00200793          	li	a5,2
}
80008668:	00078513          	mv	a0,a5
8000866c:	01c12403          	lw	s0,28(sp)
80008670:	02010113          	addi	sp,sp,32
80008674:	00008067          	ret

80008678 <syscall>:

extern volatile uint64_t tohost;
extern volatile uint64_t fromhost;

static uintptr_t syscall(uintptr_t which, uint64_t arg0, uint64_t arg1, uint64_t arg2)
{
80008678:	f5010113          	addi	sp,sp,-176
8000867c:	0a812623          	sw	s0,172(sp)
80008680:	0b010413          	addi	s0,sp,176
80008684:	f6a42623          	sw	a0,-148(s0)
80008688:	f6b42023          	sw	a1,-160(s0)
8000868c:	f6c42223          	sw	a2,-156(s0)
80008690:	f4d42c23          	sw	a3,-168(s0)
80008694:	f4e42e23          	sw	a4,-164(s0)
80008698:	f4f42823          	sw	a5,-176(s0)
8000869c:	f5042a23          	sw	a6,-172(s0)
800086a0:	ff040793          	addi	a5,s0,-16
800086a4:	f8078793          	addi	a5,a5,-128
800086a8:	03f78793          	addi	a5,a5,63
800086ac:	0067d793          	srli	a5,a5,0x6
800086b0:	00679793          	slli	a5,a5,0x6
  volatile uint64_t magic_mem[8] __attribute__((aligned(64)));
  magic_mem[0] = which;
800086b4:	f6c42703          	lw	a4,-148(s0)
800086b8:	00070e13          	mv	t3,a4
800086bc:	00000e93          	li	t4,0
800086c0:	01c7a023          	sw	t3,0(a5)
800086c4:	01d7a223          	sw	t4,4(a5)
  magic_mem[1] = arg0;
800086c8:	f6042683          	lw	a3,-160(s0)
800086cc:	f6442703          	lw	a4,-156(s0)
800086d0:	00d7a423          	sw	a3,8(a5)
800086d4:	00e7a623          	sw	a4,12(a5)
  magic_mem[2] = arg1;
800086d8:	f5842683          	lw	a3,-168(s0)
800086dc:	f5c42703          	lw	a4,-164(s0)
800086e0:	00d7a823          	sw	a3,16(a5)
800086e4:	00e7aa23          	sw	a4,20(a5)
  magic_mem[3] = arg2;
800086e8:	f5042683          	lw	a3,-176(s0)
800086ec:	f5442703          	lw	a4,-172(s0)
800086f0:	00d7ac23          	sw	a3,24(a5)
800086f4:	00e7ae23          	sw	a4,28(a5)
  __sync_synchronize();
800086f8:	0ff0000f          	fence

  tohost = (uintptr_t)magic_mem;
800086fc:	00078713          	mv	a4,a5
80008700:	00070313          	mv	t1,a4
80008704:	00000393          	li	t2,0
80008708:	ffff9717          	auipc	a4,0xffff9
8000870c:	8f870713          	addi	a4,a4,-1800 # 80001000 <tohost>
80008710:	00672023          	sw	t1,0(a4)
80008714:	00772223          	sw	t2,4(a4)
  while (fromhost == 0)
80008718:	00000013          	nop
8000871c:	ffff9717          	auipc	a4,0xffff9
80008720:	92470713          	addi	a4,a4,-1756 # 80001040 <fromhost>
80008724:	00072603          	lw	a2,0(a4)
80008728:	00472683          	lw	a3,4(a4)
8000872c:	00060713          	mv	a4,a2
80008730:	00d76733          	or	a4,a4,a3
80008734:	fe0704e3          	beqz	a4,8000871c <syscall+0xa4>
    ;
  fromhost = 0;
80008738:	ffff9717          	auipc	a4,0xffff9
8000873c:	90870713          	addi	a4,a4,-1784 # 80001040 <fromhost>
80008740:	00000613          	li	a2,0
80008744:	00000693          	li	a3,0
80008748:	00c72023          	sw	a2,0(a4)
8000874c:	00d72223          	sw	a3,4(a4)

  __sync_synchronize();
80008750:	0ff0000f          	fence
  return magic_mem[0];
80008754:	0047a803          	lw	a6,4(a5)
80008758:	0007a783          	lw	a5,0(a5)
}
8000875c:	00078513          	mv	a0,a5
80008760:	0ac12403          	lw	s0,172(sp)
80008764:	0b010113          	addi	sp,sp,176
80008768:	00008067          	ret

8000876c <setStats>:
#define NUM_COUNTERS 2
static uintptr_t counters[NUM_COUNTERS];
static char* counter_names[NUM_COUNTERS];

void setStats(int enable)
{
8000876c:	fc010113          	addi	sp,sp,-64
80008770:	02812e23          	sw	s0,60(sp)
80008774:	04010413          	addi	s0,sp,64
80008778:	fca42623          	sw	a0,-52(s0)
  int i = 0;
8000877c:	fe042223          	sw	zero,-28(s0)
    uintptr_t csr = read_csr(name); \
    if (!enable) { csr -= counters[i]; counter_names[i] = #name; } \
    counters[i++] = csr; \
  } while (0)

  READ_CTR(mcycle);
80008780:	fe442703          	lw	a4,-28(s0)
80008784:	00100793          	li	a5,1
80008788:	fee7cce3          	blt	a5,a4,80008780 <setStats+0x14>
8000878c:	b00027f3          	csrr	a5,mcycle
80008790:	fef42023          	sw	a5,-32(s0)
80008794:	fe042783          	lw	a5,-32(s0)
80008798:	fef42623          	sw	a5,-20(s0)
8000879c:	fcc42783          	lw	a5,-52(s0)
800087a0:	04079063          	bnez	a5,800087e0 <setStats+0x74>
800087a4:	8f018713          	addi	a4,gp,-1808 # 8000db20 <counters>
800087a8:	fe442783          	lw	a5,-28(s0)
800087ac:	00279793          	slli	a5,a5,0x2
800087b0:	00f707b3          	add	a5,a4,a5
800087b4:	0007a783          	lw	a5,0(a5)
800087b8:	fec42703          	lw	a4,-20(s0)
800087bc:	40f707b3          	sub	a5,a4,a5
800087c0:	fef42623          	sw	a5,-20(s0)
800087c4:	8f818713          	addi	a4,gp,-1800 # 8000db28 <counter_names>
800087c8:	fe442783          	lw	a5,-28(s0)
800087cc:	00279793          	slli	a5,a5,0x2
800087d0:	00f707b3          	add	a5,a4,a5
800087d4:	00004717          	auipc	a4,0x4
800087d8:	43070713          	addi	a4,a4,1072 # 8000cc04 <__ascii_wctomb+0x29c>
800087dc:	00e7a023          	sw	a4,0(a5)
800087e0:	fe442783          	lw	a5,-28(s0)
800087e4:	00178713          	addi	a4,a5,1
800087e8:	fee42223          	sw	a4,-28(s0)
800087ec:	8f018713          	addi	a4,gp,-1808 # 8000db20 <counters>
800087f0:	00279793          	slli	a5,a5,0x2
800087f4:	00f707b3          	add	a5,a4,a5
800087f8:	fec42703          	lw	a4,-20(s0)
800087fc:	00e7a023          	sw	a4,0(a5)
  READ_CTR(minstret);
80008800:	fe442703          	lw	a4,-28(s0)
80008804:	00100793          	li	a5,1
80008808:	fee7cce3          	blt	a5,a4,80008800 <setStats+0x94>
8000880c:	b02027f3          	csrr	a5,minstret
80008810:	fcf42e23          	sw	a5,-36(s0)
80008814:	fdc42783          	lw	a5,-36(s0)
80008818:	fef42423          	sw	a5,-24(s0)
8000881c:	fcc42783          	lw	a5,-52(s0)
80008820:	04079063          	bnez	a5,80008860 <setStats+0xf4>
80008824:	8f018713          	addi	a4,gp,-1808 # 8000db20 <counters>
80008828:	fe442783          	lw	a5,-28(s0)
8000882c:	00279793          	slli	a5,a5,0x2
80008830:	00f707b3          	add	a5,a4,a5
80008834:	0007a783          	lw	a5,0(a5)
80008838:	fe842703          	lw	a4,-24(s0)
8000883c:	40f707b3          	sub	a5,a4,a5
80008840:	fef42423          	sw	a5,-24(s0)
80008844:	8f818713          	addi	a4,gp,-1800 # 8000db28 <counter_names>
80008848:	fe442783          	lw	a5,-28(s0)
8000884c:	00279793          	slli	a5,a5,0x2
80008850:	00f707b3          	add	a5,a4,a5
80008854:	00004717          	auipc	a4,0x4
80008858:	3b870713          	addi	a4,a4,952 # 8000cc0c <__ascii_wctomb+0x2a4>
8000885c:	00e7a023          	sw	a4,0(a5)
80008860:	fe442783          	lw	a5,-28(s0)
80008864:	00178713          	addi	a4,a5,1
80008868:	fee42223          	sw	a4,-28(s0)
8000886c:	8f018713          	addi	a4,gp,-1808 # 8000db20 <counters>
80008870:	00279793          	slli	a5,a5,0x2
80008874:	00f707b3          	add	a5,a4,a5
80008878:	fe842703          	lw	a4,-24(s0)
8000887c:	00e7a023          	sw	a4,0(a5)

#undef READ_CTR
}
80008880:	00000013          	nop
80008884:	03c12403          	lw	s0,60(sp)
80008888:	04010113          	addi	sp,sp,64
8000888c:	00008067          	ret

80008890 <tohost_exit>:

void __attribute__((noreturn)) tohost_exit(uintptr_t code)
{
80008890:	fe010113          	addi	sp,sp,-32
80008894:	00812e23          	sw	s0,28(sp)
80008898:	02010413          	addi	s0,sp,32
8000889c:	fea42623          	sw	a0,-20(s0)
  tohost = (code << 1) | 1;
800088a0:	fec42703          	lw	a4,-20(s0)
800088a4:	00171713          	slli	a4,a4,0x1
800088a8:	00176713          	ori	a4,a4,1
800088ac:	00070793          	mv	a5,a4
800088b0:	00000813          	li	a6,0
800088b4:	ffff8717          	auipc	a4,0xffff8
800088b8:	74c70713          	addi	a4,a4,1868 # 80001000 <tohost>
800088bc:	00f72023          	sw	a5,0(a4)
800088c0:	01072223          	sw	a6,4(a4)
  while (1);
800088c4:	0000006f          	j	800088c4 <tohost_exit+0x34>

800088c8 <handle_trap>:
}

uintptr_t __attribute__((weak)) handle_trap(uintptr_t cause, uintptr_t epc, uintptr_t regs[32])
{
800088c8:	fe010113          	addi	sp,sp,-32
800088cc:	00112e23          	sw	ra,28(sp)
800088d0:	00812c23          	sw	s0,24(sp)
800088d4:	02010413          	addi	s0,sp,32
800088d8:	fea42623          	sw	a0,-20(s0)
800088dc:	feb42423          	sw	a1,-24(s0)
800088e0:	fec42223          	sw	a2,-28(s0)
  tohost_exit(1337);
800088e4:	53900513          	li	a0,1337
800088e8:	fa9ff0ef          	jal	ra,80008890 <tohost_exit>

800088ec <exit>:
}

void exit(int code)
{
800088ec:	fe010113          	addi	sp,sp,-32
800088f0:	00112e23          	sw	ra,28(sp)
800088f4:	00812c23          	sw	s0,24(sp)
800088f8:	02010413          	addi	s0,sp,32
800088fc:	fea42623          	sw	a0,-20(s0)
  tohost_exit(code);
80008900:	fec42783          	lw	a5,-20(s0)
80008904:	00078513          	mv	a0,a5
80008908:	f89ff0ef          	jal	ra,80008890 <tohost_exit>

8000890c <abort>:
}

void abort()
{
8000890c:	ff010113          	addi	sp,sp,-16
80008910:	00112623          	sw	ra,12(sp)
80008914:	00812423          	sw	s0,8(sp)
80008918:	01010413          	addi	s0,sp,16
  exit(128 + SIGABRT);
8000891c:	08600513          	li	a0,134
80008920:	fcdff0ef          	jal	ra,800088ec <exit>

80008924 <printstr>:
}

void printstr(const char* s)
{
80008924:	fd010113          	addi	sp,sp,-48
80008928:	02112623          	sw	ra,44(sp)
8000892c:	02812423          	sw	s0,40(sp)
80008930:	03212223          	sw	s2,36(sp)
80008934:	03312023          	sw	s3,32(sp)
80008938:	01412e23          	sw	s4,28(sp)
8000893c:	01512c23          	sw	s5,24(sp)
80008940:	03010413          	addi	s0,sp,48
80008944:	fca42e23          	sw	a0,-36(s0)
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
80008948:	fdc42783          	lw	a5,-36(s0)
8000894c:	00078913          	mv	s2,a5
80008950:	00000993          	li	s3,0
80008954:	fdc42503          	lw	a0,-36(s0)
80008958:	671000ef          	jal	ra,800097c8 <strlen>
8000895c:	00050793          	mv	a5,a0
80008960:	00078a13          	mv	s4,a5
80008964:	00000a93          	li	s5,0
80008968:	000a0793          	mv	a5,s4
8000896c:	000a8813          	mv	a6,s5
80008970:	00090693          	mv	a3,s2
80008974:	00098713          	mv	a4,s3
80008978:	00100593          	li	a1,1
8000897c:	00000613          	li	a2,0
80008980:	04000513          	li	a0,64
80008984:	cf5ff0ef          	jal	ra,80008678 <syscall>
}
80008988:	00000013          	nop
8000898c:	02c12083          	lw	ra,44(sp)
80008990:	02812403          	lw	s0,40(sp)
80008994:	02412903          	lw	s2,36(sp)
80008998:	02012983          	lw	s3,32(sp)
8000899c:	01c12a03          	lw	s4,28(sp)
800089a0:	01812a83          	lw	s5,24(sp)
800089a4:	03010113          	addi	sp,sp,48
800089a8:	00008067          	ret

800089ac <thread_entry>:

void __attribute__((weak)) thread_entry(int cid, int nc)
{
800089ac:	fe010113          	addi	sp,sp,-32
800089b0:	00812e23          	sw	s0,28(sp)
800089b4:	02010413          	addi	s0,sp,32
800089b8:	fea42623          	sw	a0,-20(s0)
800089bc:	feb42423          	sw	a1,-24(s0)
  // multi-threaded programs override this function.
  // for the case of single-threaded programs, only let core 0 proceed.
  while (cid != 0);
800089c0:	fec42783          	lw	a5,-20(s0)
800089c4:	fe079ee3          	bnez	a5,800089c0 <thread_entry+0x14>
}
800089c8:	00000013          	nop
800089cc:	01c12403          	lw	s0,28(sp)
800089d0:	02010113          	addi	sp,sp,32
800089d4:	00008067          	ret

int __attribute__((weak)) main(int argc, char** argv)
{
800089d8:	fe010113          	addi	sp,sp,-32
800089dc:	00112e23          	sw	ra,28(sp)
800089e0:	00812c23          	sw	s0,24(sp)
800089e4:	02010413          	addi	s0,sp,32
800089e8:	fea42623          	sw	a0,-20(s0)
800089ec:	feb42423          	sw	a1,-24(s0)
  // single-threaded programs override this function.
  printstr("main() is not found.\n");
800089f0:	00004517          	auipc	a0,0x4
800089f4:	22850513          	addi	a0,a0,552 # 8000cc18 <__ascii_wctomb+0x2b0>
800089f8:	f2dff0ef          	jal	ra,80008924 <printstr>
  return -1;
800089fc:	fff00793          	li	a5,-1
}
80008a00:	00078513          	mv	a0,a5
80008a04:	01c12083          	lw	ra,28(sp)
80008a08:	01812403          	lw	s0,24(sp)
80008a0c:	02010113          	addi	sp,sp,32
80008a10:	00008067          	ret

80008a14 <init_tls>:

static void init_tls()
{
80008a14:	fe010113          	addi	sp,sp,-32
80008a18:	00112e23          	sw	ra,28(sp)
80008a1c:	00812c23          	sw	s0,24(sp)
80008a20:	02010413          	addi	s0,sp,32
  register void* thread_pointer asm("tp");
  extern char _tdata_begin, _tdata_end, _tbss_end;
  size_t tdata_size = &_tdata_end - &_tdata_begin;
80008a24:	93818713          	addi	a4,gp,-1736 # 8000db68 <_tdata_begin>
80008a28:	93818793          	addi	a5,gp,-1736 # 8000db68 <_tdata_begin>
80008a2c:	40f707b3          	sub	a5,a4,a5
80008a30:	fef42623          	sw	a5,-20(s0)
  memcpy(thread_pointer, &_tdata_begin, tdata_size);
80008a34:	00020793          	mv	a5,tp
80008a38:	fec42603          	lw	a2,-20(s0)
80008a3c:	93818593          	addi	a1,gp,-1736 # 8000db68 <_tdata_begin>
80008a40:	00078513          	mv	a0,a5
80008a44:	3c5000ef          	jal	ra,80009608 <memcpy>
  size_t tbss_size = &_tbss_end - &_tdata_end;
80008a48:	9d818713          	addi	a4,gp,-1576 # 8000dc08 <_tbss_end>
80008a4c:	93818793          	addi	a5,gp,-1736 # 8000db68 <_tdata_begin>
80008a50:	40f707b3          	sub	a5,a4,a5
80008a54:	fef42423          	sw	a5,-24(s0)
  memset(thread_pointer + tdata_size, 0, tbss_size);
80008a58:	00020713          	mv	a4,tp
80008a5c:	fec42783          	lw	a5,-20(s0)
80008a60:	00f707b3          	add	a5,a4,a5
80008a64:	fe842603          	lw	a2,-24(s0)
80008a68:	00000593          	li	a1,0
80008a6c:	00078513          	mv	a0,a5
80008a70:	475000ef          	jal	ra,800096e4 <memset>
}
80008a74:	00000013          	nop
80008a78:	01c12083          	lw	ra,28(sp)
80008a7c:	01812403          	lw	s0,24(sp)
80008a80:	02010113          	addi	sp,sp,32
80008a84:	00008067          	ret

80008a88 <_init>:

void _init(int cid, int nc)
{
80008a88:	f5010113          	addi	sp,sp,-176
80008a8c:	0a112623          	sw	ra,172(sp)
80008a90:	0a812423          	sw	s0,168(sp)
80008a94:	0a912223          	sw	s1,164(sp)
80008a98:	0b010413          	addi	s0,sp,176
80008a9c:	f4a42e23          	sw	a0,-164(s0)
80008aa0:	f4b42c23          	sw	a1,-168(s0)
80008aa4:	ff040793          	addi	a5,s0,-16
80008aa8:	f7078793          	addi	a5,a5,-144
80008aac:	03f78793          	addi	a5,a5,63
80008ab0:	0067d793          	srli	a5,a5,0x6
80008ab4:	00679493          	slli	s1,a5,0x6
  init_tls();
80008ab8:	f5dff0ef          	jal	ra,80008a14 <init_tls>
  thread_entry(cid, nc);
80008abc:	f5842583          	lw	a1,-168(s0)
80008ac0:	f5c42503          	lw	a0,-164(s0)
80008ac4:	ee9ff0ef          	jal	ra,800089ac <thread_entry>

  // only single-threaded programs should ever get here.
  int ret = main(0, 0);
80008ac8:	00000593          	li	a1,0
80008acc:	00000513          	li	a0,0
80008ad0:	989fd0ef          	jal	ra,80006458 <main>
80008ad4:	fea42223          	sw	a0,-28(s0)

  char buf[NUM_COUNTERS * 32] __attribute__((aligned(64)));
  char* pbuf = buf;
80008ad8:	fe942623          	sw	s1,-20(s0)
  for (int i = 0; i < NUM_COUNTERS; i++)
80008adc:	fe042423          	sw	zero,-24(s0)
80008ae0:	0780006f          	j	80008b58 <_init+0xd0>
    if (counters[i])
80008ae4:	8f018713          	addi	a4,gp,-1808 # 8000db20 <counters>
80008ae8:	fe842783          	lw	a5,-24(s0)
80008aec:	00279793          	slli	a5,a5,0x2
80008af0:	00f707b3          	add	a5,a4,a5
80008af4:	0007a783          	lw	a5,0(a5)
80008af8:	04078a63          	beqz	a5,80008b4c <_init+0xc4>
      pbuf += sprintf(pbuf, "%s = %d\n", counter_names[i], counters[i]);
80008afc:	8f818713          	addi	a4,gp,-1800 # 8000db28 <counter_names>
80008b00:	fe842783          	lw	a5,-24(s0)
80008b04:	00279793          	slli	a5,a5,0x2
80008b08:	00f707b3          	add	a5,a4,a5
80008b0c:	0007a603          	lw	a2,0(a5)
80008b10:	8f018713          	addi	a4,gp,-1808 # 8000db20 <counters>
80008b14:	fe842783          	lw	a5,-24(s0)
80008b18:	00279793          	slli	a5,a5,0x2
80008b1c:	00f707b3          	add	a5,a4,a5
80008b20:	0007a783          	lw	a5,0(a5)
80008b24:	00078693          	mv	a3,a5
80008b28:	00004597          	auipc	a1,0x4
80008b2c:	10858593          	addi	a1,a1,264 # 8000cc30 <__ascii_wctomb+0x2c8>
80008b30:	fec42503          	lw	a0,-20(s0)
80008b34:	1c9000ef          	jal	ra,800094fc <sprintf>
80008b38:	00050793          	mv	a5,a0
80008b3c:	00078713          	mv	a4,a5
80008b40:	fec42783          	lw	a5,-20(s0)
80008b44:	00e787b3          	add	a5,a5,a4
80008b48:	fef42623          	sw	a5,-20(s0)
  for (int i = 0; i < NUM_COUNTERS; i++)
80008b4c:	fe842783          	lw	a5,-24(s0)
80008b50:	00178793          	addi	a5,a5,1
80008b54:	fef42423          	sw	a5,-24(s0)
80008b58:	fe842703          	lw	a4,-24(s0)
80008b5c:	00100793          	li	a5,1
80008b60:	f8e7d2e3          	ble	a4,a5,80008ae4 <_init+0x5c>
  if (pbuf != buf)
80008b64:	fec42783          	lw	a5,-20(s0)
80008b68:	00f48663          	beq	s1,a5,80008b74 <_init+0xec>
    printstr(buf);
80008b6c:	00048513          	mv	a0,s1
80008b70:	db5ff0ef          	jal	ra,80008924 <printstr>

  exit(ret);
80008b74:	fe442503          	lw	a0,-28(s0)
80008b78:	d75ff0ef          	jal	ra,800088ec <exit>

80008b7c <putchar>:
}

#undef putchar
int putchar(int ch)
{
80008b7c:	fe010113          	addi	sp,sp,-32
80008b80:	00112e23          	sw	ra,28(sp)
80008b84:	00812c23          	sw	s0,24(sp)
80008b88:	02010413          	addi	s0,sp,32
80008b8c:	fea42623          	sw	a0,-20(s0)
  static __thread char buf[sizeof(int)] __attribute__((aligned(64)));
  static __thread int buflen = 0;

  buf[buflen++] = ch;
80008b90:	08422783          	lw	a5,132(tp) # 84 <buflen.2800>
80008b94:	00178693          	addi	a3,a5,1
80008b98:	08d22223          	sw	a3,132(tp) # 84 <buflen.2800>
80008b9c:	fec42703          	lw	a4,-20(s0)
80008ba0:	0ff77713          	andi	a4,a4,255
80008ba4:	08020693          	addi	a3,tp,128 # 80 <buf.2799>
80008ba8:	00d787b3          	add	a5,a5,a3
80008bac:	00e78023          	sb	a4,0(a5)

  if (ch == '\n' || buflen == sizeof(buf))
80008bb0:	fec42703          	lw	a4,-20(s0)
80008bb4:	00a00793          	li	a5,10
80008bb8:	00f70863          	beq	a4,a5,80008bc8 <putchar+0x4c>
80008bbc:	08422703          	lw	a4,132(tp) # 84 <buflen.2800>
80008bc0:	00400793          	li	a5,4
80008bc4:	04f71263          	bne	a4,a5,80008c08 <putchar+0x8c>
  {
    syscall(SYS_write, 1, (uintptr_t)buf, buflen);
80008bc8:	08020793          	addi	a5,tp,128 # 80 <buf.2799>
80008bcc:	00078593          	mv	a1,a5
80008bd0:	00000613          	li	a2,0
80008bd4:	08422783          	lw	a5,132(tp) # 84 <buflen.2800>
80008bd8:	00078813          	mv	a6,a5
80008bdc:	41f7d793          	srai	a5,a5,0x1f
80008be0:	00078893          	mv	a7,a5
80008be4:	00080793          	mv	a5,a6
80008be8:	00088813          	mv	a6,a7
80008bec:	00058693          	mv	a3,a1
80008bf0:	00060713          	mv	a4,a2
80008bf4:	00100593          	li	a1,1
80008bf8:	00000613          	li	a2,0
80008bfc:	04000513          	li	a0,64
80008c00:	a79ff0ef          	jal	ra,80008678 <syscall>
    buflen = 0;
80008c04:	08022223          	sw	zero,132(tp) # 84 <buflen.2800>
  }

  return 0;
80008c08:	00000793          	li	a5,0
}
80008c0c:	00078513          	mv	a0,a5
80008c10:	01c12083          	lw	ra,28(sp)
80008c14:	01812403          	lw	s0,24(sp)
80008c18:	02010113          	addi	sp,sp,32
80008c1c:	00008067          	ret

80008c20 <printhex>:

void printhex(uint64_t x)
{
80008c20:	fc010113          	addi	sp,sp,-64
80008c24:	02112e23          	sw	ra,60(sp)
80008c28:	02812c23          	sw	s0,56(sp)
80008c2c:	04010413          	addi	s0,sp,64
80008c30:	fca42423          	sw	a0,-56(s0)
80008c34:	fcb42623          	sw	a1,-52(s0)
  char str[17];
  int i;
  for (i = 0; i < 16; i++)
80008c38:	fe042623          	sw	zero,-20(s0)
80008c3c:	0980006f          	j	80008cd4 <printhex+0xb4>
  {
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
80008c40:	fc844703          	lbu	a4,-56(s0)
80008c44:	00f77713          	andi	a4,a4,15
80008c48:	0ff77693          	andi	a3,a4,255
80008c4c:	fc842703          	lw	a4,-56(s0)
80008c50:	00f77793          	andi	a5,a4,15
80008c54:	fcc42703          	lw	a4,-52(s0)
80008c58:	00077813          	andi	a6,a4,0
80008c5c:	00080713          	mv	a4,a6
80008c60:	02071063          	bnez	a4,80008c80 <printhex+0x60>
80008c64:	00080713          	mv	a4,a6
80008c68:	00071863          	bnez	a4,80008c78 <printhex+0x58>
80008c6c:	00078613          	mv	a2,a5
80008c70:	00900713          	li	a4,9
80008c74:	00c76663          	bltu	a4,a2,80008c80 <printhex+0x60>
80008c78:	03000713          	li	a4,48
80008c7c:	0080006f          	j	80008c84 <printhex+0x64>
80008c80:	05700713          	li	a4,87
80008c84:	00f00593          	li	a1,15
80008c88:	fec42603          	lw	a2,-20(s0)
80008c8c:	40c58633          	sub	a2,a1,a2
80008c90:	00d70733          	add	a4,a4,a3
80008c94:	0ff77693          	andi	a3,a4,255
80008c98:	ff040713          	addi	a4,s0,-16
80008c9c:	00c70733          	add	a4,a4,a2
80008ca0:	fed70423          	sb	a3,-24(a4)
    x >>= 4;
80008ca4:	fcc42703          	lw	a4,-52(s0)
80008ca8:	01c71713          	slli	a4,a4,0x1c
80008cac:	fc842683          	lw	a3,-56(s0)
80008cb0:	0046d693          	srli	a3,a3,0x4
80008cb4:	00e6e733          	or	a4,a3,a4
80008cb8:	fce42423          	sw	a4,-56(s0)
80008cbc:	fcc42703          	lw	a4,-52(s0)
80008cc0:	00475713          	srli	a4,a4,0x4
80008cc4:	fce42623          	sw	a4,-52(s0)
  for (i = 0; i < 16; i++)
80008cc8:	fec42703          	lw	a4,-20(s0)
80008ccc:	00170713          	addi	a4,a4,1
80008cd0:	fee42623          	sw	a4,-20(s0)
80008cd4:	fec42683          	lw	a3,-20(s0)
80008cd8:	00f00713          	li	a4,15
80008cdc:	f6d752e3          	ble	a3,a4,80008c40 <printhex+0x20>
  }
  str[16] = 0;
80008ce0:	fe040423          	sb	zero,-24(s0)

  printstr(str);
80008ce4:	fd840793          	addi	a5,s0,-40
80008ce8:	00078513          	mv	a0,a5
80008cec:	c39ff0ef          	jal	ra,80008924 <printstr>
}
80008cf0:	00000013          	nop
80008cf4:	03c12083          	lw	ra,60(sp)
80008cf8:	03812403          	lw	s0,56(sp)
80008cfc:	04010113          	addi	sp,sp,64
80008d00:	00008067          	ret

80008d04 <printnum>:

static inline void printnum(void (*putch)(int, void**), void **putdat,
                    unsigned long long num, unsigned base, int width, int padc)
{
80008d04:	eb010113          	addi	sp,sp,-336
80008d08:	14112623          	sw	ra,332(sp)
80008d0c:	14812423          	sw	s0,328(sp)
80008d10:	15212223          	sw	s2,324(sp)
80008d14:	15312023          	sw	s3,320(sp)
80008d18:	13412e23          	sw	s4,316(sp)
80008d1c:	13512c23          	sw	s5,312(sp)
80008d20:	13612a23          	sw	s6,308(sp)
80008d24:	13712823          	sw	s7,304(sp)
80008d28:	15010413          	addi	s0,sp,336
80008d2c:	eca42623          	sw	a0,-308(s0)
80008d30:	ecb42423          	sw	a1,-312(s0)
80008d34:	ecc42023          	sw	a2,-320(s0)
80008d38:	ecd42223          	sw	a3,-316(s0)
80008d3c:	eae42e23          	sw	a4,-324(s0)
80008d40:	eaf42c23          	sw	a5,-328(s0)
80008d44:	eb042a23          	sw	a6,-332(s0)
  unsigned digs[sizeof(num)*CHAR_BIT];
  int pos = 0;
80008d48:	fc042e23          	sw	zero,-36(s0)

  while (1)
  {
    digs[pos++] = num % base;
80008d4c:	ebc42783          	lw	a5,-324(s0)
80008d50:	00078b13          	mv	s6,a5
80008d54:	00000b93          	li	s7,0
80008d58:	ec042783          	lw	a5,-320(s0)
80008d5c:	ec442803          	lw	a6,-316(s0)
80008d60:	000b0613          	mv	a2,s6
80008d64:	000b8693          	mv	a3,s7
80008d68:	00078513          	mv	a0,a5
80008d6c:	00080593          	mv	a1,a6
80008d70:	22d010ef          	jal	ra,8000a79c <__umoddi3>
80008d74:	00050793          	mv	a5,a0
80008d78:	00058813          	mv	a6,a1
80008d7c:	00078613          	mv	a2,a5
80008d80:	00080693          	mv	a3,a6
80008d84:	fdc42783          	lw	a5,-36(s0)
80008d88:	00178713          	addi	a4,a5,1
80008d8c:	fce42e23          	sw	a4,-36(s0)
80008d90:	00060713          	mv	a4,a2
80008d94:	00279793          	slli	a5,a5,0x2
80008d98:	fe040693          	addi	a3,s0,-32
80008d9c:	00f687b3          	add	a5,a3,a5
80008da0:	eee7ae23          	sw	a4,-260(a5)
    if (num < base)
80008da4:	ebc42783          	lw	a5,-324(s0)
80008da8:	00078913          	mv	s2,a5
80008dac:	00000993          	li	s3,0
80008db0:	ec442783          	lw	a5,-316(s0)
80008db4:	00098713          	mv	a4,s3
80008db8:	04e7e863          	bltu	a5,a4,80008e08 <printnum+0x104>
80008dbc:	ec442783          	lw	a5,-316(s0)
80008dc0:	00098713          	mv	a4,s3
80008dc4:	00e79863          	bne	a5,a4,80008dd4 <printnum+0xd0>
80008dc8:	ec042783          	lw	a5,-320(s0)
80008dcc:	00090713          	mv	a4,s2
80008dd0:	02e7ec63          	bltu	a5,a4,80008e08 <printnum+0x104>
      break;
    num /= base;
80008dd4:	ebc42783          	lw	a5,-324(s0)
80008dd8:	00078a13          	mv	s4,a5
80008ddc:	00000a93          	li	s5,0
80008de0:	000a0613          	mv	a2,s4
80008de4:	000a8693          	mv	a3,s5
80008de8:	ec042503          	lw	a0,-320(s0)
80008dec:	ec442583          	lw	a1,-316(s0)
80008df0:	578010ef          	jal	ra,8000a368 <__udivdi3>
80008df4:	00050793          	mv	a5,a0
80008df8:	00058813          	mv	a6,a1
80008dfc:	ecf42023          	sw	a5,-320(s0)
80008e00:	ed042223          	sw	a6,-316(s0)
    digs[pos++] = num % base;
80008e04:	f49ff06f          	j	80008d4c <printnum+0x48>
      break;
80008e08:	00000013          	nop
  }

  while (width-- > pos)
80008e0c:	0140006f          	j	80008e20 <printnum+0x11c>
    putch(padc, putdat);
80008e10:	ecc42783          	lw	a5,-308(s0)
80008e14:	ec842583          	lw	a1,-312(s0)
80008e18:	eb442503          	lw	a0,-332(s0)
80008e1c:	000780e7          	jalr	a5
  while (width-- > pos)
80008e20:	eb842783          	lw	a5,-328(s0)
80008e24:	fff78713          	addi	a4,a5,-1
80008e28:	eae42c23          	sw	a4,-328(s0)
80008e2c:	fdc42703          	lw	a4,-36(s0)
80008e30:	fef740e3          	blt	a4,a5,80008e10 <printnum+0x10c>

  while (pos-- > 0)
80008e34:	0540006f          	j	80008e88 <printnum+0x184>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
80008e38:	fdc42783          	lw	a5,-36(s0)
80008e3c:	00279793          	slli	a5,a5,0x2
80008e40:	fe040713          	addi	a4,s0,-32
80008e44:	00f707b3          	add	a5,a4,a5
80008e48:	efc7a703          	lw	a4,-260(a5)
80008e4c:	fdc42783          	lw	a5,-36(s0)
80008e50:	00279793          	slli	a5,a5,0x2
80008e54:	fe040693          	addi	a3,s0,-32
80008e58:	00f687b3          	add	a5,a3,a5
80008e5c:	efc7a683          	lw	a3,-260(a5)
80008e60:	00900793          	li	a5,9
80008e64:	00d7f663          	bleu	a3,a5,80008e70 <printnum+0x16c>
80008e68:	05700793          	li	a5,87
80008e6c:	0080006f          	j	80008e74 <printnum+0x170>
80008e70:	03000793          	li	a5,48
80008e74:	00e787b3          	add	a5,a5,a4
80008e78:	ecc42703          	lw	a4,-308(s0)
80008e7c:	ec842583          	lw	a1,-312(s0)
80008e80:	00078513          	mv	a0,a5
80008e84:	000700e7          	jalr	a4
  while (pos-- > 0)
80008e88:	fdc42783          	lw	a5,-36(s0)
80008e8c:	fff78713          	addi	a4,a5,-1
80008e90:	fce42e23          	sw	a4,-36(s0)
80008e94:	faf042e3          	bgtz	a5,80008e38 <printnum+0x134>
}
80008e98:	00000013          	nop
80008e9c:	14c12083          	lw	ra,332(sp)
80008ea0:	14812403          	lw	s0,328(sp)
80008ea4:	14412903          	lw	s2,324(sp)
80008ea8:	14012983          	lw	s3,320(sp)
80008eac:	13c12a03          	lw	s4,316(sp)
80008eb0:	13812a83          	lw	s5,312(sp)
80008eb4:	13412b03          	lw	s6,308(sp)
80008eb8:	13012b83          	lw	s7,304(sp)
80008ebc:	15010113          	addi	sp,sp,336
80008ec0:	00008067          	ret

80008ec4 <getuint>:

static unsigned long long getuint(va_list *ap, int lflag)
{
80008ec4:	fe010113          	addi	sp,sp,-32
80008ec8:	00812e23          	sw	s0,28(sp)
80008ecc:	02010413          	addi	s0,sp,32
80008ed0:	fea42623          	sw	a0,-20(s0)
80008ed4:	feb42423          	sw	a1,-24(s0)
  if (lflag >= 2)
80008ed8:	fe842683          	lw	a3,-24(s0)
80008edc:	00100713          	li	a4,1
80008ee0:	02d75663          	ble	a3,a4,80008f0c <getuint+0x48>
    return va_arg(*ap, unsigned long long);
80008ee4:	fec42783          	lw	a5,-20(s0)
80008ee8:	0007a783          	lw	a5,0(a5)
80008eec:	00778793          	addi	a5,a5,7
80008ef0:	ff87f793          	andi	a5,a5,-8
80008ef4:	00878693          	addi	a3,a5,8
80008ef8:	fec42703          	lw	a4,-20(s0)
80008efc:	00d72023          	sw	a3,0(a4)
80008f00:	0047a803          	lw	a6,4(a5)
80008f04:	0007a783          	lw	a5,0(a5)
80008f08:	0500006f          	j	80008f58 <getuint+0x94>
  else if (lflag)
80008f0c:	fe842703          	lw	a4,-24(s0)
80008f10:	02070463          	beqz	a4,80008f38 <getuint+0x74>
    return va_arg(*ap, unsigned long);
80008f14:	fec42703          	lw	a4,-20(s0)
80008f18:	00072703          	lw	a4,0(a4)
80008f1c:	00470613          	addi	a2,a4,4
80008f20:	fec42683          	lw	a3,-20(s0)
80008f24:	00c6a023          	sw	a2,0(a3)
80008f28:	00072703          	lw	a4,0(a4)
80008f2c:	00070793          	mv	a5,a4
80008f30:	00000813          	li	a6,0
80008f34:	0240006f          	j	80008f58 <getuint+0x94>
  else
    return va_arg(*ap, unsigned int);
80008f38:	fec42703          	lw	a4,-20(s0)
80008f3c:	00072703          	lw	a4,0(a4)
80008f40:	00470613          	addi	a2,a4,4
80008f44:	fec42683          	lw	a3,-20(s0)
80008f48:	00c6a023          	sw	a2,0(a3)
80008f4c:	00072703          	lw	a4,0(a4)
80008f50:	00070793          	mv	a5,a4
80008f54:	00000813          	li	a6,0
}
80008f58:	00078513          	mv	a0,a5
80008f5c:	00080593          	mv	a1,a6
80008f60:	01c12403          	lw	s0,28(sp)
80008f64:	02010113          	addi	sp,sp,32
80008f68:	00008067          	ret

80008f6c <getint>:

static long long getint(va_list *ap, int lflag)
{
80008f6c:	fe010113          	addi	sp,sp,-32
80008f70:	00812e23          	sw	s0,28(sp)
80008f74:	02010413          	addi	s0,sp,32
80008f78:	fea42623          	sw	a0,-20(s0)
80008f7c:	feb42423          	sw	a1,-24(s0)
  if (lflag >= 2)
80008f80:	fe842683          	lw	a3,-24(s0)
80008f84:	00100713          	li	a4,1
80008f88:	02d75663          	ble	a3,a4,80008fb4 <getint+0x48>
    return va_arg(*ap, long long);
80008f8c:	fec42783          	lw	a5,-20(s0)
80008f90:	0007a783          	lw	a5,0(a5)
80008f94:	00778793          	addi	a5,a5,7
80008f98:	ff87f793          	andi	a5,a5,-8
80008f9c:	00878693          	addi	a3,a5,8
80008fa0:	fec42703          	lw	a4,-20(s0)
80008fa4:	00d72023          	sw	a3,0(a4)
80008fa8:	0047a803          	lw	a6,4(a5)
80008fac:	0007a783          	lw	a5,0(a5)
80008fb0:	0580006f          	j	80009008 <getint+0x9c>
  else if (lflag)
80008fb4:	fe842703          	lw	a4,-24(s0)
80008fb8:	02070663          	beqz	a4,80008fe4 <getint+0x78>
    return va_arg(*ap, long);
80008fbc:	fec42703          	lw	a4,-20(s0)
80008fc0:	00072703          	lw	a4,0(a4)
80008fc4:	00470613          	addi	a2,a4,4
80008fc8:	fec42683          	lw	a3,-20(s0)
80008fcc:	00c6a023          	sw	a2,0(a3)
80008fd0:	00072703          	lw	a4,0(a4)
80008fd4:	00070793          	mv	a5,a4
80008fd8:	41f75713          	srai	a4,a4,0x1f
80008fdc:	00070813          	mv	a6,a4
80008fe0:	0280006f          	j	80009008 <getint+0x9c>
  else
    return va_arg(*ap, int);
80008fe4:	fec42703          	lw	a4,-20(s0)
80008fe8:	00072703          	lw	a4,0(a4)
80008fec:	00470613          	addi	a2,a4,4
80008ff0:	fec42683          	lw	a3,-20(s0)
80008ff4:	00c6a023          	sw	a2,0(a3)
80008ff8:	00072703          	lw	a4,0(a4)
80008ffc:	00070793          	mv	a5,a4
80009000:	41f75713          	srai	a4,a4,0x1f
80009004:	00070813          	mv	a6,a4
}
80009008:	00078513          	mv	a0,a5
8000900c:	00080593          	mv	a1,a6
80009010:	01c12403          	lw	s0,28(sp)
80009014:	02010113          	addi	sp,sp,32
80009018:	00008067          	ret

8000901c <vprintfmt>:

static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
{
8000901c:	fb010113          	addi	sp,sp,-80
80009020:	04112623          	sw	ra,76(sp)
80009024:	04812423          	sw	s0,72(sp)
80009028:	04912223          	sw	s1,68(sp)
8000902c:	05212023          	sw	s2,64(sp)
80009030:	05010413          	addi	s0,sp,80
80009034:	faa42e23          	sw	a0,-68(s0)
80009038:	fab42c23          	sw	a1,-72(s0)
8000903c:	fac42a23          	sw	a2,-76(s0)
80009040:	fad42823          	sw	a3,-80(s0)
  unsigned long long num;
  int base, lflag, width, precision, altflag;
  char padc;

  while (1) {
    while ((ch = *(unsigned char *) fmt) != '%') {
80009044:	0240006f          	j	80009068 <vprintfmt+0x4c>
      if (ch == '\0')
80009048:	3c048863          	beqz	s1,80009418 <vprintfmt+0x3fc>
        return;
      fmt++;
8000904c:	fb442783          	lw	a5,-76(s0)
80009050:	00178793          	addi	a5,a5,1
80009054:	faf42a23          	sw	a5,-76(s0)
      putch(ch, putdat);
80009058:	fbc42783          	lw	a5,-68(s0)
8000905c:	fb842583          	lw	a1,-72(s0)
80009060:	00048513          	mv	a0,s1
80009064:	000780e7          	jalr	a5
    while ((ch = *(unsigned char *) fmt) != '%') {
80009068:	fb442783          	lw	a5,-76(s0)
8000906c:	0007c783          	lbu	a5,0(a5)
80009070:	00078493          	mv	s1,a5
80009074:	02500793          	li	a5,37
80009078:	fcf498e3          	bne	s1,a5,80009048 <vprintfmt+0x2c>
    }
    fmt++;
8000907c:	fb442783          	lw	a5,-76(s0)
80009080:	00178793          	addi	a5,a5,1
80009084:	faf42a23          	sw	a5,-76(s0)

    // Process a %-escape sequence
    last_fmt = fmt;
80009088:	fb442783          	lw	a5,-76(s0)
8000908c:	fcf42823          	sw	a5,-48(s0)
    padc = ' ';
80009090:	02000793          	li	a5,32
80009094:	fcf40ba3          	sb	a5,-41(s0)
    width = -1;
80009098:	fff00793          	li	a5,-1
8000909c:	fcf42e23          	sw	a5,-36(s0)
    precision = -1;
800090a0:	fff00793          	li	a5,-1
800090a4:	fcf42c23          	sw	a5,-40(s0)
    lflag = 0;
800090a8:	fe042023          	sw	zero,-32(s0)
    altflag = 0;
800090ac:	fc042623          	sw	zero,-52(s0)
  reswitch:
    switch (ch = *(unsigned char *) fmt++) {
800090b0:	fb442783          	lw	a5,-76(s0)
800090b4:	00178713          	addi	a4,a5,1
800090b8:	fae42a23          	sw	a4,-76(s0)
800090bc:	0007c783          	lbu	a5,0(a5)
800090c0:	00078493          	mv	s1,a5
800090c4:	fdd48793          	addi	a5,s1,-35
800090c8:	05500713          	li	a4,85
800090cc:	32f76663          	bltu	a4,a5,800093f8 <vprintfmt+0x3dc>
800090d0:	00279713          	slli	a4,a5,0x2
800090d4:	00004797          	auipc	a5,0x4
800090d8:	b7078793          	addi	a5,a5,-1168 # 8000cc44 <__ascii_wctomb+0x2dc>
800090dc:	00f707b3          	add	a5,a4,a5
800090e0:	0007a703          	lw	a4,0(a5)
800090e4:	00004797          	auipc	a5,0x4
800090e8:	b6078793          	addi	a5,a5,-1184 # 8000cc44 <__ascii_wctomb+0x2dc>
800090ec:	00f707b3          	add	a5,a4,a5
800090f0:	00078067          	jr	a5

    // flag to pad on the right
    case '-':
      padc = '-';
800090f4:	02d00793          	li	a5,45
800090f8:	fcf40ba3          	sb	a5,-41(s0)
      goto reswitch;
800090fc:	fb5ff06f          	j	800090b0 <vprintfmt+0x94>
      
    // flag to pad with 0's instead of spaces
    case '0':
      padc = '0';
80009100:	03000793          	li	a5,48
80009104:	fcf40ba3          	sb	a5,-41(s0)
      goto reswitch;
80009108:	fa9ff06f          	j	800090b0 <vprintfmt+0x94>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      for (precision = 0; ; ++fmt) {
8000910c:	fc042c23          	sw	zero,-40(s0)
        precision = precision * 10 + ch - '0';
80009110:	fd842703          	lw	a4,-40(s0)
80009114:	00070793          	mv	a5,a4
80009118:	00279793          	slli	a5,a5,0x2
8000911c:	00e787b3          	add	a5,a5,a4
80009120:	00179793          	slli	a5,a5,0x1
80009124:	00f487b3          	add	a5,s1,a5
80009128:	fd078793          	addi	a5,a5,-48
8000912c:	fcf42c23          	sw	a5,-40(s0)
        ch = *fmt;
80009130:	fb442783          	lw	a5,-76(s0)
80009134:	0007c783          	lbu	a5,0(a5)
80009138:	00078493          	mv	s1,a5
        if (ch < '0' || ch > '9')
8000913c:	02f00793          	li	a5,47
80009140:	0497d863          	ble	s1,a5,80009190 <vprintfmt+0x174>
80009144:	03900793          	li	a5,57
80009148:	0497c463          	blt	a5,s1,80009190 <vprintfmt+0x174>
      for (precision = 0; ; ++fmt) {
8000914c:	fb442783          	lw	a5,-76(s0)
80009150:	00178793          	addi	a5,a5,1
80009154:	faf42a23          	sw	a5,-76(s0)
        precision = precision * 10 + ch - '0';
80009158:	fb9ff06f          	j	80009110 <vprintfmt+0xf4>
          break;
      }
      goto process_precision;

    case '*':
      precision = va_arg(ap, int);
8000915c:	fb042783          	lw	a5,-80(s0)
80009160:	00478713          	addi	a4,a5,4
80009164:	fae42823          	sw	a4,-80(s0)
80009168:	0007a783          	lw	a5,0(a5)
8000916c:	fcf42c23          	sw	a5,-40(s0)
      goto process_precision;
80009170:	0240006f          	j	80009194 <vprintfmt+0x178>

    case '.':
      if (width < 0)
80009174:	fdc42783          	lw	a5,-36(s0)
80009178:	f207dce3          	bgez	a5,800090b0 <vprintfmt+0x94>
        width = 0;
8000917c:	fc042e23          	sw	zero,-36(s0)
      goto reswitch;
80009180:	f31ff06f          	j	800090b0 <vprintfmt+0x94>

    case '#':
      altflag = 1;
80009184:	00100793          	li	a5,1
80009188:	fcf42623          	sw	a5,-52(s0)
      goto reswitch;
8000918c:	f25ff06f          	j	800090b0 <vprintfmt+0x94>
      goto process_precision;
80009190:	00000013          	nop

    process_precision:
      if (width < 0)
80009194:	fdc42783          	lw	a5,-36(s0)
80009198:	f007dce3          	bgez	a5,800090b0 <vprintfmt+0x94>
        width = precision, precision = -1;
8000919c:	fd842783          	lw	a5,-40(s0)
800091a0:	fcf42e23          	sw	a5,-36(s0)
800091a4:	fff00793          	li	a5,-1
800091a8:	fcf42c23          	sw	a5,-40(s0)
      goto reswitch;
800091ac:	f05ff06f          	j	800090b0 <vprintfmt+0x94>

    // long flag (doubled for long long)
    case 'l':
      lflag++;
800091b0:	fe042783          	lw	a5,-32(s0)
800091b4:	00178793          	addi	a5,a5,1
800091b8:	fef42023          	sw	a5,-32(s0)
      goto reswitch;
800091bc:	ef5ff06f          	j	800090b0 <vprintfmt+0x94>

    // character
    case 'c':
      putch(va_arg(ap, int), putdat);
800091c0:	fb042783          	lw	a5,-80(s0)
800091c4:	00478713          	addi	a4,a5,4
800091c8:	fae42823          	sw	a4,-80(s0)
800091cc:	0007a783          	lw	a5,0(a5)
800091d0:	fbc42703          	lw	a4,-68(s0)
800091d4:	fb842583          	lw	a1,-72(s0)
800091d8:	00078513          	mv	a0,a5
800091dc:	000700e7          	jalr	a4
      break;
800091e0:	2340006f          	j	80009414 <vprintfmt+0x3f8>

    // string
    case 's':
      if ((p = va_arg(ap, char *)) == NULL)
800091e4:	fb042783          	lw	a5,-80(s0)
800091e8:	00478713          	addi	a4,a5,4
800091ec:	fae42823          	sw	a4,-80(s0)
800091f0:	0007a903          	lw	s2,0(a5)
800091f4:	00091663          	bnez	s2,80009200 <vprintfmt+0x1e4>
        p = "(null)";
800091f8:	00004917          	auipc	s2,0x4
800091fc:	a4490913          	addi	s2,s2,-1468 # 8000cc3c <__ascii_wctomb+0x2d4>
      if (width > 0 && padc != '-')
80009200:	fdc42783          	lw	a5,-36(s0)
80009204:	08f05063          	blez	a5,80009284 <vprintfmt+0x268>
80009208:	fd744703          	lbu	a4,-41(s0)
8000920c:	02d00793          	li	a5,45
80009210:	06f70a63          	beq	a4,a5,80009284 <vprintfmt+0x268>
        for (width -= strnlen(p, precision); width > 0; width--)
80009214:	fd842783          	lw	a5,-40(s0)
80009218:	00078593          	mv	a1,a5
8000921c:	00090513          	mv	a0,s2
80009220:	5f8000ef          	jal	ra,80009818 <strnlen>
80009224:	00050713          	mv	a4,a0
80009228:	fdc42783          	lw	a5,-36(s0)
8000922c:	40e787b3          	sub	a5,a5,a4
80009230:	fcf42e23          	sw	a5,-36(s0)
80009234:	0240006f          	j	80009258 <vprintfmt+0x23c>
          putch(padc, putdat);
80009238:	fd744783          	lbu	a5,-41(s0)
8000923c:	fbc42703          	lw	a4,-68(s0)
80009240:	fb842583          	lw	a1,-72(s0)
80009244:	00078513          	mv	a0,a5
80009248:	000700e7          	jalr	a4
        for (width -= strnlen(p, precision); width > 0; width--)
8000924c:	fdc42783          	lw	a5,-36(s0)
80009250:	fff78793          	addi	a5,a5,-1
80009254:	fcf42e23          	sw	a5,-36(s0)
80009258:	fdc42783          	lw	a5,-36(s0)
8000925c:	fcf04ee3          	bgtz	a5,80009238 <vprintfmt+0x21c>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
80009260:	0240006f          	j	80009284 <vprintfmt+0x268>
        putch(ch, putdat);
80009264:	fbc42783          	lw	a5,-68(s0)
80009268:	fb842583          	lw	a1,-72(s0)
8000926c:	00048513          	mv	a0,s1
80009270:	000780e7          	jalr	a5
        p++;
80009274:	00190913          	addi	s2,s2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
80009278:	fdc42783          	lw	a5,-36(s0)
8000927c:	fff78793          	addi	a5,a5,-1
80009280:	fcf42e23          	sw	a5,-36(s0)
80009284:	00094783          	lbu	a5,0(s2)
80009288:	00078493          	mv	s1,a5
8000928c:	04048063          	beqz	s1,800092cc <vprintfmt+0x2b0>
80009290:	fd842783          	lw	a5,-40(s0)
80009294:	fc07c8e3          	bltz	a5,80009264 <vprintfmt+0x248>
80009298:	fd842783          	lw	a5,-40(s0)
8000929c:	fff78793          	addi	a5,a5,-1
800092a0:	fcf42c23          	sw	a5,-40(s0)
800092a4:	fd842783          	lw	a5,-40(s0)
800092a8:	fa07dee3          	bgez	a5,80009264 <vprintfmt+0x248>
      }
      for (; width > 0; width--)
800092ac:	0200006f          	j	800092cc <vprintfmt+0x2b0>
        putch(' ', putdat);
800092b0:	fbc42783          	lw	a5,-68(s0)
800092b4:	fb842583          	lw	a1,-72(s0)
800092b8:	02000513          	li	a0,32
800092bc:	000780e7          	jalr	a5
      for (; width > 0; width--)
800092c0:	fdc42783          	lw	a5,-36(s0)
800092c4:	fff78793          	addi	a5,a5,-1
800092c8:	fcf42e23          	sw	a5,-36(s0)
800092cc:	fdc42783          	lw	a5,-36(s0)
800092d0:	fef040e3          	bgtz	a5,800092b0 <vprintfmt+0x294>
      break;
800092d4:	1400006f          	j	80009414 <vprintfmt+0x3f8>

    // (signed) decimal
    case 'd':
      num = getint(&ap, lflag);
800092d8:	fb040793          	addi	a5,s0,-80
800092dc:	fe042583          	lw	a1,-32(s0)
800092e0:	00078513          	mv	a0,a5
800092e4:	c89ff0ef          	jal	ra,80008f6c <getint>
800092e8:	00050793          	mv	a5,a0
800092ec:	00058813          	mv	a6,a1
800092f0:	fef42423          	sw	a5,-24(s0)
800092f4:	ff042623          	sw	a6,-20(s0)
      if ((long long) num < 0) {
800092f8:	fe842783          	lw	a5,-24(s0)
800092fc:	fec42803          	lw	a6,-20(s0)
80009300:	00080793          	mv	a5,a6
80009304:	0407d663          	bgez	a5,80009350 <vprintfmt+0x334>
        putch('-', putdat);
80009308:	fbc42783          	lw	a5,-68(s0)
8000930c:	fb842583          	lw	a1,-72(s0)
80009310:	02d00513          	li	a0,45
80009314:	000780e7          	jalr	a5
        num = -(long long) num;
80009318:	fe842583          	lw	a1,-24(s0)
8000931c:	fec42603          	lw	a2,-20(s0)
80009320:	00000793          	li	a5,0
80009324:	00000813          	li	a6,0
80009328:	40b786b3          	sub	a3,a5,a1
8000932c:	00068513          	mv	a0,a3
80009330:	00a7b533          	sltu	a0,a5,a0
80009334:	40c80733          	sub	a4,a6,a2
80009338:	40a707b3          	sub	a5,a4,a0
8000933c:	00078713          	mv	a4,a5
80009340:	00068793          	mv	a5,a3
80009344:	00070813          	mv	a6,a4
80009348:	fef42423          	sw	a5,-24(s0)
8000934c:	ff042623          	sw	a6,-20(s0)
      }
      base = 10;
80009350:	00a00793          	li	a5,10
80009354:	fef42223          	sw	a5,-28(s0)
      goto signed_number;
80009358:	0640006f          	j	800093bc <vprintfmt+0x3a0>

    // unsigned decimal
    case 'u':
      base = 10;
8000935c:	00a00793          	li	a5,10
80009360:	fef42223          	sw	a5,-28(s0)
      goto unsigned_number;
80009364:	0400006f          	j	800093a4 <vprintfmt+0x388>

    // (unsigned) octal
    case 'o':
      // should do something with padding so it's always 3 octits
      base = 8;
80009368:	00800793          	li	a5,8
8000936c:	fef42223          	sw	a5,-28(s0)
      goto unsigned_number;
80009370:	0340006f          	j	800093a4 <vprintfmt+0x388>

    // pointer
    case 'p':
      static_assert(sizeof(long) == sizeof(void*));
      lflag = 1;
80009374:	00100793          	li	a5,1
80009378:	fef42023          	sw	a5,-32(s0)
      putch('0', putdat);
8000937c:	fbc42783          	lw	a5,-68(s0)
80009380:	fb842583          	lw	a1,-72(s0)
80009384:	03000513          	li	a0,48
80009388:	000780e7          	jalr	a5
      putch('x', putdat);
8000938c:	fbc42783          	lw	a5,-68(s0)
80009390:	fb842583          	lw	a1,-72(s0)
80009394:	07800513          	li	a0,120
80009398:	000780e7          	jalr	a5
      /* fall through to 'x' */

    // (unsigned) hexadecimal
    case 'x':
      base = 16;
8000939c:	01000793          	li	a5,16
800093a0:	fef42223          	sw	a5,-28(s0)
    unsigned_number:
      num = getuint(&ap, lflag);
800093a4:	fb040793          	addi	a5,s0,-80
800093a8:	fe042583          	lw	a1,-32(s0)
800093ac:	00078513          	mv	a0,a5
800093b0:	b15ff0ef          	jal	ra,80008ec4 <getuint>
800093b4:	fea42423          	sw	a0,-24(s0)
800093b8:	feb42623          	sw	a1,-20(s0)
    signed_number:
      printnum(putch, putdat, num, base, width, padc);
800093bc:	fe442703          	lw	a4,-28(s0)
800093c0:	fd744783          	lbu	a5,-41(s0)
800093c4:	00078813          	mv	a6,a5
800093c8:	fdc42783          	lw	a5,-36(s0)
800093cc:	fe842603          	lw	a2,-24(s0)
800093d0:	fec42683          	lw	a3,-20(s0)
800093d4:	fb842583          	lw	a1,-72(s0)
800093d8:	fbc42503          	lw	a0,-68(s0)
800093dc:	929ff0ef          	jal	ra,80008d04 <printnum>
      break;
800093e0:	0340006f          	j	80009414 <vprintfmt+0x3f8>

    // escaped '%' character
    case '%':
      putch(ch, putdat);
800093e4:	fbc42783          	lw	a5,-68(s0)
800093e8:	fb842583          	lw	a1,-72(s0)
800093ec:	00048513          	mv	a0,s1
800093f0:	000780e7          	jalr	a5
      break;
800093f4:	0200006f          	j	80009414 <vprintfmt+0x3f8>
      
    // unrecognized escape sequence - just print it literally
    default:
      putch('%', putdat);
800093f8:	fbc42783          	lw	a5,-68(s0)
800093fc:	fb842583          	lw	a1,-72(s0)
80009400:	02500513          	li	a0,37
80009404:	000780e7          	jalr	a5
      fmt = last_fmt;
80009408:	fd042783          	lw	a5,-48(s0)
8000940c:	faf42a23          	sw	a5,-76(s0)
      break;
80009410:	00000013          	nop
    while ((ch = *(unsigned char *) fmt) != '%') {
80009414:	c55ff06f          	j	80009068 <vprintfmt+0x4c>
        return;
80009418:	00000013          	nop
    }
  }
}
8000941c:	04c12083          	lw	ra,76(sp)
80009420:	04812403          	lw	s0,72(sp)
80009424:	04412483          	lw	s1,68(sp)
80009428:	04012903          	lw	s2,64(sp)
8000942c:	05010113          	addi	sp,sp,80
80009430:	00008067          	ret

80009434 <printf>:

int printf(const char* fmt, ...)
{
80009434:	fb010113          	addi	sp,sp,-80
80009438:	02112623          	sw	ra,44(sp)
8000943c:	02812423          	sw	s0,40(sp)
80009440:	03010413          	addi	s0,sp,48
80009444:	fca42e23          	sw	a0,-36(s0)
80009448:	00b42223          	sw	a1,4(s0)
8000944c:	00c42423          	sw	a2,8(s0)
80009450:	00d42623          	sw	a3,12(s0)
80009454:	00e42823          	sw	a4,16(s0)
80009458:	00f42a23          	sw	a5,20(s0)
8000945c:	01042c23          	sw	a6,24(s0)
80009460:	01142e23          	sw	a7,28(s0)
  va_list ap;
  va_start(ap, fmt);
80009464:	02040793          	addi	a5,s0,32
80009468:	fe478793          	addi	a5,a5,-28
8000946c:	fef42623          	sw	a5,-20(s0)

  vprintfmt((void*)putchar, 0, fmt, ap);
80009470:	fec42783          	lw	a5,-20(s0)
80009474:	00078693          	mv	a3,a5
80009478:	fdc42603          	lw	a2,-36(s0)
8000947c:	00000593          	li	a1,0
80009480:	fffff517          	auipc	a0,0xfffff
80009484:	6fc50513          	addi	a0,a0,1788 # 80008b7c <putchar>
80009488:	b95ff0ef          	jal	ra,8000901c <vprintfmt>

  va_end(ap);
  return 0; // incorrect return value, but who cares, anyway?
8000948c:	00000793          	li	a5,0
}
80009490:	00078513          	mv	a0,a5
80009494:	02c12083          	lw	ra,44(sp)
80009498:	02812403          	lw	s0,40(sp)
8000949c:	05010113          	addi	sp,sp,80
800094a0:	00008067          	ret

800094a4 <sprintf_putch.2914>:
  va_list ap;
  char* str0 = str;
  va_start(ap, fmt);

  void sprintf_putch(int ch, void** data)
  {
800094a4:	fd010113          	addi	sp,sp,-48
800094a8:	02812623          	sw	s0,44(sp)
800094ac:	03010413          	addi	s0,sp,48
800094b0:	fca42e23          	sw	a0,-36(s0)
800094b4:	fcb42c23          	sw	a1,-40(s0)
800094b8:	fc742a23          	sw	t2,-44(s0)
    char** pstr = (char**)data;
800094bc:	fd842783          	lw	a5,-40(s0)
800094c0:	fef42623          	sw	a5,-20(s0)
    **pstr = ch;
800094c4:	fec42783          	lw	a5,-20(s0)
800094c8:	0007a783          	lw	a5,0(a5)
800094cc:	fdc42703          	lw	a4,-36(s0)
800094d0:	0ff77713          	andi	a4,a4,255
800094d4:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
800094d8:	fec42783          	lw	a5,-20(s0)
800094dc:	0007a783          	lw	a5,0(a5)
800094e0:	00178713          	addi	a4,a5,1
800094e4:	fec42783          	lw	a5,-20(s0)
800094e8:	00e7a023          	sw	a4,0(a5)
  }
800094ec:	00000013          	nop
800094f0:	02c12403          	lw	s0,44(sp)
800094f4:	03010113          	addi	sp,sp,48
800094f8:	00008067          	ret

800094fc <sprintf>:
{
800094fc:	fa010113          	addi	sp,sp,-96
80009500:	02112e23          	sw	ra,60(sp)
80009504:	02812c23          	sw	s0,56(sp)
80009508:	04010413          	addi	s0,sp,64
8000950c:	fca42623          	sw	a0,-52(s0)
80009510:	fcb42423          	sw	a1,-56(s0)
80009514:	00c42423          	sw	a2,8(s0)
80009518:	00d42623          	sw	a3,12(s0)
8000951c:	00e42823          	sw	a4,16(s0)
80009520:	00f42a23          	sw	a5,20(s0)
80009524:	01042c23          	sw	a6,24(s0)
80009528:	01142e23          	sw	a7,28(s0)
int	_EXFUN(feof, (FILE *));
int	_EXFUN(ferror, (FILE *));
void    _EXFUN(perror, (const char *));
#ifndef _REENT_ONLY
FILE *	_EXFUN(fopen, (const char *__restrict _name, const char *__restrict _type));
int	_EXFUN(sprintf, (char *__restrict, const char *__restrict, ...)
8000952c:	02040793          	addi	a5,s0,32
80009530:	fef42223          	sw	a5,-28(s0)
80009534:	fd440793          	addi	a5,s0,-44
80009538:	fd440593          	addi	a1,s0,-44
8000953c:	00000617          	auipc	a2,0x0
80009540:	f6860613          	addi	a2,a2,-152 # 800094a4 <sprintf_putch.2914>
80009544:	fffff737          	lui	a4,0xfffff
80009548:	fff74693          	not	a3,a4
8000954c:	00001537          	lui	a0,0x1
80009550:	80050513          	addi	a0,a0,-2048 # 800 <buflen.2800+0x77c>
80009554:	00a58833          	add	a6,a1,a0
80009558:	00e87833          	and	a6,a6,a4
8000955c:	3b786813          	ori	a6,a6,951
80009560:	0107a023          	sw	a6,0(a5)
80009564:	00a60533          	add	a0,a2,a0
80009568:	00e57733          	and	a4,a0,a4
8000956c:	33776713          	ori	a4,a4,823
80009570:	00e7a223          	sw	a4,4(a5)
80009574:	00d5f733          	and	a4,a1,a3
80009578:	01471593          	slli	a1,a4,0x14
8000957c:	00038737          	lui	a4,0x38
80009580:	39370713          	addi	a4,a4,915 # 38393 <buflen.2800+0x3830f>
80009584:	00e5e733          	or	a4,a1,a4
80009588:	00e7a423          	sw	a4,8(a5)
8000958c:	00d67733          	and	a4,a2,a3
80009590:	01471693          	slli	a3,a4,0x14
80009594:	00030737          	lui	a4,0x30
80009598:	06770713          	addi	a4,a4,103 # 30067 <buflen.2800+0x2ffe3>
8000959c:	00e6e733          	or	a4,a3,a4
800095a0:	00e7a623          	sw	a4,12(a5)
800095a4:	0000100f          	fence.i
  char* str0 = str;
800095a8:	fcc42783          	lw	a5,-52(s0)
800095ac:	fef42623          	sw	a5,-20(s0)
  va_start(ap, fmt);
800095b0:	02040793          	addi	a5,s0,32
800095b4:	fe878793          	addi	a5,a5,-24
800095b8:	fef42423          	sw	a5,-24(s0)

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
800095bc:	fe842703          	lw	a4,-24(s0)
800095c0:	fd440793          	addi	a5,s0,-44
800095c4:	00078513          	mv	a0,a5
800095c8:	fcc40793          	addi	a5,s0,-52
800095cc:	00070693          	mv	a3,a4
800095d0:	fc842603          	lw	a2,-56(s0)
800095d4:	00078593          	mv	a1,a5
800095d8:	a45ff0ef          	jal	ra,8000901c <vprintfmt>
  *str = 0;
800095dc:	fcc42783          	lw	a5,-52(s0)
800095e0:	00078023          	sb	zero,0(a5)

  va_end(ap);
  return str - str0;
800095e4:	fcc42783          	lw	a5,-52(s0)
800095e8:	00078713          	mv	a4,a5
800095ec:	fec42783          	lw	a5,-20(s0)
800095f0:	40f707b3          	sub	a5,a4,a5
}
800095f4:	00078513          	mv	a0,a5
800095f8:	03c12083          	lw	ra,60(sp)
800095fc:	03812403          	lw	s0,56(sp)
80009600:	06010113          	addi	sp,sp,96
80009604:	00008067          	ret

80009608 <memcpy>:

void* memcpy(void* dest, const void* src, size_t len)
{
80009608:	fd010113          	addi	sp,sp,-48
8000960c:	02812623          	sw	s0,44(sp)
80009610:	03010413          	addi	s0,sp,48
80009614:	fca42e23          	sw	a0,-36(s0)
80009618:	fcb42c23          	sw	a1,-40(s0)
8000961c:	fcc42a23          	sw	a2,-44(s0)
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
80009620:	fdc42703          	lw	a4,-36(s0)
80009624:	fd842783          	lw	a5,-40(s0)
80009628:	00f76733          	or	a4,a4,a5
8000962c:	fd442783          	lw	a5,-44(s0)
80009630:	00f767b3          	or	a5,a4,a5
80009634:	0037f793          	andi	a5,a5,3
80009638:	04079863          	bnez	a5,80009688 <memcpy+0x80>
    const uintptr_t* s = src;
8000963c:	fd842783          	lw	a5,-40(s0)
80009640:	fef42623          	sw	a5,-20(s0)
    uintptr_t *d = dest;
80009644:	fdc42783          	lw	a5,-36(s0)
80009648:	fef42423          	sw	a5,-24(s0)
    while (d < (uintptr_t*)(dest + len))
8000964c:	0240006f          	j	80009670 <memcpy+0x68>
      *d++ = *s++;
80009650:	fec42703          	lw	a4,-20(s0)
80009654:	00470793          	addi	a5,a4,4
80009658:	fef42623          	sw	a5,-20(s0)
8000965c:	fe842783          	lw	a5,-24(s0)
80009660:	00478693          	addi	a3,a5,4
80009664:	fed42423          	sw	a3,-24(s0)
80009668:	00072703          	lw	a4,0(a4)
8000966c:	00e7a023          	sw	a4,0(a5)
    while (d < (uintptr_t*)(dest + len))
80009670:	fdc42703          	lw	a4,-36(s0)
80009674:	fd442783          	lw	a5,-44(s0)
80009678:	00f707b3          	add	a5,a4,a5
8000967c:	fe842703          	lw	a4,-24(s0)
80009680:	fcf768e3          	bltu	a4,a5,80009650 <memcpy+0x48>
80009684:	04c0006f          	j	800096d0 <memcpy+0xc8>
  } else {
    const char* s = src;
80009688:	fd842783          	lw	a5,-40(s0)
8000968c:	fef42223          	sw	a5,-28(s0)
    char *d = dest;
80009690:	fdc42783          	lw	a5,-36(s0)
80009694:	fef42023          	sw	a5,-32(s0)
    while (d < (char*)(dest + len))
80009698:	0240006f          	j	800096bc <memcpy+0xb4>
      *d++ = *s++;
8000969c:	fe442703          	lw	a4,-28(s0)
800096a0:	00170793          	addi	a5,a4,1
800096a4:	fef42223          	sw	a5,-28(s0)
800096a8:	fe042783          	lw	a5,-32(s0)
800096ac:	00178693          	addi	a3,a5,1
800096b0:	fed42023          	sw	a3,-32(s0)
800096b4:	00074703          	lbu	a4,0(a4)
800096b8:	00e78023          	sb	a4,0(a5)
    while (d < (char*)(dest + len))
800096bc:	fdc42703          	lw	a4,-36(s0)
800096c0:	fd442783          	lw	a5,-44(s0)
800096c4:	00f707b3          	add	a5,a4,a5
800096c8:	fe042703          	lw	a4,-32(s0)
800096cc:	fcf768e3          	bltu	a4,a5,8000969c <memcpy+0x94>
  }
  return dest;
800096d0:	fdc42783          	lw	a5,-36(s0)
}
800096d4:	00078513          	mv	a0,a5
800096d8:	02c12403          	lw	s0,44(sp)
800096dc:	03010113          	addi	sp,sp,48
800096e0:	00008067          	ret

800096e4 <memset>:

void* memset(void* dest, int byte, size_t len)
{
800096e4:	fd010113          	addi	sp,sp,-48
800096e8:	02812623          	sw	s0,44(sp)
800096ec:	03010413          	addi	s0,sp,48
800096f0:	fca42e23          	sw	a0,-36(s0)
800096f4:	fcb42c23          	sw	a1,-40(s0)
800096f8:	fcc42a23          	sw	a2,-44(s0)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
800096fc:	fdc42703          	lw	a4,-36(s0)
80009700:	fd442783          	lw	a5,-44(s0)
80009704:	00f767b3          	or	a5,a4,a5
80009708:	0037f793          	andi	a5,a5,3
8000970c:	06079863          	bnez	a5,8000977c <memset+0x98>
    uintptr_t word = byte & 0xFF;
80009710:	fd842783          	lw	a5,-40(s0)
80009714:	0ff7f793          	andi	a5,a5,255
80009718:	fef42223          	sw	a5,-28(s0)
    word |= word << 8;
8000971c:	fe442783          	lw	a5,-28(s0)
80009720:	00879793          	slli	a5,a5,0x8
80009724:	fe442703          	lw	a4,-28(s0)
80009728:	00f767b3          	or	a5,a4,a5
8000972c:	fef42223          	sw	a5,-28(s0)
    word |= word << 16;
80009730:	fe442783          	lw	a5,-28(s0)
80009734:	01079793          	slli	a5,a5,0x10
80009738:	fe442703          	lw	a4,-28(s0)
8000973c:	00f767b3          	or	a5,a4,a5
80009740:	fef42223          	sw	a5,-28(s0)
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80009744:	fdc42783          	lw	a5,-36(s0)
80009748:	fef42623          	sw	a5,-20(s0)
    while (d < (uintptr_t*)(dest + len))
8000974c:	0180006f          	j	80009764 <memset+0x80>
      *d++ = word;
80009750:	fec42783          	lw	a5,-20(s0)
80009754:	00478713          	addi	a4,a5,4
80009758:	fee42623          	sw	a4,-20(s0)
8000975c:	fe442703          	lw	a4,-28(s0)
80009760:	00e7a023          	sw	a4,0(a5)
    while (d < (uintptr_t*)(dest + len))
80009764:	fdc42703          	lw	a4,-36(s0)
80009768:	fd442783          	lw	a5,-44(s0)
8000976c:	00f707b3          	add	a5,a4,a5
80009770:	fec42703          	lw	a4,-20(s0)
80009774:	fcf76ee3          	bltu	a4,a5,80009750 <memset+0x6c>
80009778:	03c0006f          	j	800097b4 <memset+0xd0>
  } else {
    char *d = dest;
8000977c:	fdc42783          	lw	a5,-36(s0)
80009780:	fef42423          	sw	a5,-24(s0)
    while (d < (char*)(dest + len))
80009784:	01c0006f          	j	800097a0 <memset+0xbc>
      *d++ = byte;
80009788:	fe842783          	lw	a5,-24(s0)
8000978c:	00178713          	addi	a4,a5,1
80009790:	fee42423          	sw	a4,-24(s0)
80009794:	fd842703          	lw	a4,-40(s0)
80009798:	0ff77713          	andi	a4,a4,255
8000979c:	00e78023          	sb	a4,0(a5)
    while (d < (char*)(dest + len))
800097a0:	fdc42703          	lw	a4,-36(s0)
800097a4:	fd442783          	lw	a5,-44(s0)
800097a8:	00f707b3          	add	a5,a4,a5
800097ac:	fe842703          	lw	a4,-24(s0)
800097b0:	fcf76ce3          	bltu	a4,a5,80009788 <memset+0xa4>
  }
  return dest;
800097b4:	fdc42783          	lw	a5,-36(s0)
}
800097b8:	00078513          	mv	a0,a5
800097bc:	02c12403          	lw	s0,44(sp)
800097c0:	03010113          	addi	sp,sp,48
800097c4:	00008067          	ret

800097c8 <strlen>:

size_t strlen(const char *s)
{
800097c8:	fd010113          	addi	sp,sp,-48
800097cc:	02812623          	sw	s0,44(sp)
800097d0:	03010413          	addi	s0,sp,48
800097d4:	fca42e23          	sw	a0,-36(s0)
  const char *p = s;
800097d8:	fdc42783          	lw	a5,-36(s0)
800097dc:	fef42623          	sw	a5,-20(s0)
  while (*p)
800097e0:	0100006f          	j	800097f0 <strlen+0x28>
    p++;
800097e4:	fec42783          	lw	a5,-20(s0)
800097e8:	00178793          	addi	a5,a5,1
800097ec:	fef42623          	sw	a5,-20(s0)
  while (*p)
800097f0:	fec42783          	lw	a5,-20(s0)
800097f4:	0007c783          	lbu	a5,0(a5)
800097f8:	fe0796e3          	bnez	a5,800097e4 <strlen+0x1c>
  return p - s;
800097fc:	fec42703          	lw	a4,-20(s0)
80009800:	fdc42783          	lw	a5,-36(s0)
80009804:	40f707b3          	sub	a5,a4,a5
}
80009808:	00078513          	mv	a0,a5
8000980c:	02c12403          	lw	s0,44(sp)
80009810:	03010113          	addi	sp,sp,48
80009814:	00008067          	ret

80009818 <strnlen>:

size_t strnlen(const char *s, size_t n)
{
80009818:	fd010113          	addi	sp,sp,-48
8000981c:	02812623          	sw	s0,44(sp)
80009820:	03010413          	addi	s0,sp,48
80009824:	fca42e23          	sw	a0,-36(s0)
80009828:	fcb42c23          	sw	a1,-40(s0)
  const char *p = s;
8000982c:	fdc42783          	lw	a5,-36(s0)
80009830:	fef42623          	sw	a5,-20(s0)
  while (n-- && *p)
80009834:	0100006f          	j	80009844 <strnlen+0x2c>
    p++;
80009838:	fec42783          	lw	a5,-20(s0)
8000983c:	00178793          	addi	a5,a5,1
80009840:	fef42623          	sw	a5,-20(s0)
  while (n-- && *p)
80009844:	fd842783          	lw	a5,-40(s0)
80009848:	fff78713          	addi	a4,a5,-1
8000984c:	fce42c23          	sw	a4,-40(s0)
80009850:	00078863          	beqz	a5,80009860 <strnlen+0x48>
80009854:	fec42783          	lw	a5,-20(s0)
80009858:	0007c783          	lbu	a5,0(a5)
8000985c:	fc079ee3          	bnez	a5,80009838 <strnlen+0x20>
  return p - s;
80009860:	fec42703          	lw	a4,-20(s0)
80009864:	fdc42783          	lw	a5,-36(s0)
80009868:	40f707b3          	sub	a5,a4,a5
}
8000986c:	00078513          	mv	a0,a5
80009870:	02c12403          	lw	s0,44(sp)
80009874:	03010113          	addi	sp,sp,48
80009878:	00008067          	ret

8000987c <strcmp>:

int strcmp(const char* s1, const char* s2)
{
8000987c:	fd010113          	addi	sp,sp,-48
80009880:	02812623          	sw	s0,44(sp)
80009884:	03010413          	addi	s0,sp,48
80009888:	fca42e23          	sw	a0,-36(s0)
8000988c:	fcb42c23          	sw	a1,-40(s0)
  unsigned char c1, c2;

  do {
    c1 = *s1++;
80009890:	fdc42783          	lw	a5,-36(s0)
80009894:	00178713          	addi	a4,a5,1
80009898:	fce42e23          	sw	a4,-36(s0)
8000989c:	0007c783          	lbu	a5,0(a5)
800098a0:	fef407a3          	sb	a5,-17(s0)
    c2 = *s2++;
800098a4:	fd842783          	lw	a5,-40(s0)
800098a8:	00178713          	addi	a4,a5,1
800098ac:	fce42c23          	sw	a4,-40(s0)
800098b0:	0007c783          	lbu	a5,0(a5)
800098b4:	fef40723          	sb	a5,-18(s0)
  } while (c1 != 0 && c1 == c2);
800098b8:	fef44783          	lbu	a5,-17(s0)
800098bc:	00078863          	beqz	a5,800098cc <strcmp+0x50>
800098c0:	fef44703          	lbu	a4,-17(s0)
800098c4:	fee44783          	lbu	a5,-18(s0)
800098c8:	fcf704e3          	beq	a4,a5,80009890 <strcmp+0x14>

  return c1 - c2;
800098cc:	fef44703          	lbu	a4,-17(s0)
800098d0:	fee44783          	lbu	a5,-18(s0)
800098d4:	40f707b3          	sub	a5,a4,a5
}
800098d8:	00078513          	mv	a0,a5
800098dc:	02c12403          	lw	s0,44(sp)
800098e0:	03010113          	addi	sp,sp,48
800098e4:	00008067          	ret

800098e8 <strcpy>:

char* strcpy(char* dest, const char* src)
{
800098e8:	fd010113          	addi	sp,sp,-48
800098ec:	02812623          	sw	s0,44(sp)
800098f0:	03010413          	addi	s0,sp,48
800098f4:	fca42e23          	sw	a0,-36(s0)
800098f8:	fcb42c23          	sw	a1,-40(s0)
  char* d = dest;
800098fc:	fdc42783          	lw	a5,-36(s0)
80009900:	fef42623          	sw	a5,-20(s0)
  while ((*d++ = *src++))
80009904:	00000013          	nop
80009908:	fd842703          	lw	a4,-40(s0)
8000990c:	00170793          	addi	a5,a4,1
80009910:	fcf42c23          	sw	a5,-40(s0)
80009914:	fec42783          	lw	a5,-20(s0)
80009918:	00178693          	addi	a3,a5,1
8000991c:	fed42623          	sw	a3,-20(s0)
80009920:	00074703          	lbu	a4,0(a4)
80009924:	00e78023          	sb	a4,0(a5)
80009928:	0007c783          	lbu	a5,0(a5)
8000992c:	fc079ee3          	bnez	a5,80009908 <strcpy+0x20>
    ;
  return dest;
80009930:	fdc42783          	lw	a5,-36(s0)
}
80009934:	00078513          	mv	a0,a5
80009938:	02c12403          	lw	s0,44(sp)
8000993c:	03010113          	addi	sp,sp,48
80009940:	00008067          	ret

80009944 <atol>:

long atol(const char* str)
{
80009944:	fd010113          	addi	sp,sp,-48
80009948:	02812623          	sw	s0,44(sp)
8000994c:	03010413          	addi	s0,sp,48
80009950:	fca42e23          	sw	a0,-36(s0)
  long res = 0;
80009954:	fe042623          	sw	zero,-20(s0)
  int sign = 0;
80009958:	fe042423          	sw	zero,-24(s0)

  while (*str == ' ')
8000995c:	0100006f          	j	8000996c <atol+0x28>
    str++;
80009960:	fdc42783          	lw	a5,-36(s0)
80009964:	00178793          	addi	a5,a5,1
80009968:	fcf42e23          	sw	a5,-36(s0)
  while (*str == ' ')
8000996c:	fdc42783          	lw	a5,-36(s0)
80009970:	0007c703          	lbu	a4,0(a5)
80009974:	02000793          	li	a5,32
80009978:	fef704e3          	beq	a4,a5,80009960 <atol+0x1c>

  if (*str == '-' || *str == '+') {
8000997c:	fdc42783          	lw	a5,-36(s0)
80009980:	0007c703          	lbu	a4,0(a5)
80009984:	02d00793          	li	a5,45
80009988:	00f70a63          	beq	a4,a5,8000999c <atol+0x58>
8000998c:	fdc42783          	lw	a5,-36(s0)
80009990:	0007c703          	lbu	a4,0(a5)
80009994:	02b00793          	li	a5,43
80009998:	06f71263          	bne	a4,a5,800099fc <atol+0xb8>
    sign = *str == '-';
8000999c:	fdc42783          	lw	a5,-36(s0)
800099a0:	0007c783          	lbu	a5,0(a5)
800099a4:	fd378793          	addi	a5,a5,-45
800099a8:	0017b793          	seqz	a5,a5
800099ac:	0ff7f793          	andi	a5,a5,255
800099b0:	fef42423          	sw	a5,-24(s0)
    str++;
800099b4:	fdc42783          	lw	a5,-36(s0)
800099b8:	00178793          	addi	a5,a5,1
800099bc:	fcf42e23          	sw	a5,-36(s0)
  }

  while (*str) {
800099c0:	03c0006f          	j	800099fc <atol+0xb8>
    res *= 10;
800099c4:	fec42703          	lw	a4,-20(s0)
800099c8:	00070793          	mv	a5,a4
800099cc:	00279793          	slli	a5,a5,0x2
800099d0:	00e787b3          	add	a5,a5,a4
800099d4:	00179793          	slli	a5,a5,0x1
800099d8:	fef42623          	sw	a5,-20(s0)
    res += *str++ - '0';
800099dc:	fdc42783          	lw	a5,-36(s0)
800099e0:	00178713          	addi	a4,a5,1
800099e4:	fce42e23          	sw	a4,-36(s0)
800099e8:	0007c783          	lbu	a5,0(a5)
800099ec:	fd078793          	addi	a5,a5,-48
800099f0:	fec42703          	lw	a4,-20(s0)
800099f4:	00f707b3          	add	a5,a4,a5
800099f8:	fef42623          	sw	a5,-20(s0)
  while (*str) {
800099fc:	fdc42783          	lw	a5,-36(s0)
80009a00:	0007c783          	lbu	a5,0(a5)
80009a04:	fc0790e3          	bnez	a5,800099c4 <atol+0x80>
  }

  return sign ? -res : res;
80009a08:	fe842783          	lw	a5,-24(s0)
80009a0c:	00078863          	beqz	a5,80009a1c <atol+0xd8>
80009a10:	fec42783          	lw	a5,-20(s0)
80009a14:	40f007b3          	neg	a5,a5
80009a18:	0080006f          	j	80009a20 <atol+0xdc>
80009a1c:	fec42783          	lw	a5,-20(s0)
}
80009a20:	00078513          	mv	a0,a5
80009a24:	02c12403          	lw	s0,44(sp)
80009a28:	03010113          	addi	sp,sp,48
80009a2c:	00008067          	ret

80009a30 <_sbrk>:

// Default nosys implementation of _sbrk
void *
_sbrk (incr)
     int incr;
{
80009a30:	fd010113          	addi	sp,sp,-48
80009a34:	02812623          	sw	s0,44(sp)
80009a38:	03010413          	addi	s0,sp,48
80009a3c:	fca42e23          	sw	a0,-36(s0)
   extern char   end; /* Set by linker.  */
   static char * heap_end;
   char *        prev_heap_end;

   if (heap_end == 0)
80009a40:	90818793          	addi	a5,gp,-1784 # 8000db38 <heap_end.2992>
80009a44:	0007a783          	lw	a5,0(a5)
80009a48:	00079863          	bnez	a5,80009a58 <_sbrk+0x28>
     heap_end = & end;
80009a4c:	90818793          	addi	a5,gp,-1784 # 8000db38 <heap_end.2992>
80009a50:	95018713          	addi	a4,gp,-1712 # 8000db80 <_end>
80009a54:	00e7a023          	sw	a4,0(a5)

   prev_heap_end = heap_end;
80009a58:	90818793          	addi	a5,gp,-1784 # 8000db38 <heap_end.2992>
80009a5c:	0007a783          	lw	a5,0(a5)
80009a60:	fef42623          	sw	a5,-20(s0)
   heap_end += incr;
80009a64:	90818793          	addi	a5,gp,-1784 # 8000db38 <heap_end.2992>
80009a68:	0007a703          	lw	a4,0(a5)
80009a6c:	fdc42783          	lw	a5,-36(s0)
80009a70:	00f70733          	add	a4,a4,a5
80009a74:	90818793          	addi	a5,gp,-1784 # 8000db38 <heap_end.2992>
80009a78:	00e7a023          	sw	a4,0(a5)

   return (void *) prev_heap_end;
80009a7c:	fec42783          	lw	a5,-20(s0)
}
80009a80:	00078513          	mv	a0,a5
80009a84:	02c12403          	lw	s0,44(sp)
80009a88:	03010113          	addi	sp,sp,48
80009a8c:	00008067          	ret

80009a90 <__divdi3>:
80009a90:	00000313          	li	t1,0
80009a94:	0005dc63          	bgez	a1,80009aac <__divdi3+0x1c>
80009a98:	40a00533          	neg	a0,a0
80009a9c:	00a03833          	snez	a6,a0
80009aa0:	40b00733          	neg	a4,a1
80009aa4:	410705b3          	sub	a1,a4,a6
80009aa8:	fff00313          	li	t1,-1
80009aac:	0006dc63          	bgez	a3,80009ac4 <__divdi3+0x34>
80009ab0:	40c00633          	neg	a2,a2
80009ab4:	00c037b3          	snez	a5,a2
80009ab8:	40d006b3          	neg	a3,a3
80009abc:	fff34313          	not	t1,t1
80009ac0:	40f686b3          	sub	a3,a3,a5
80009ac4:	00060813          	mv	a6,a2
80009ac8:	00068713          	mv	a4,a3
80009acc:	00050893          	mv	a7,a0
80009ad0:	00058e13          	mv	t3,a1
80009ad4:	2a069263          	bnez	a3,80009d78 <__divdi3+0x2e8>
80009ad8:	8000d6b7          	lui	a3,0x8000d
80009adc:	dd868693          	addi	a3,a3,-552 # 8000cdd8 <__global_pointer$+0xffffeba8>
80009ae0:	0ec5f663          	bleu	a2,a1,80009bcc <__divdi3+0x13c>
80009ae4:	000107b7          	lui	a5,0x10
80009ae8:	0cf67863          	bleu	a5,a2,80009bb8 <__divdi3+0x128>
80009aec:	0ff00e93          	li	t4,255
80009af0:	00cebeb3          	sltu	t4,t4,a2
80009af4:	003e9e93          	slli	t4,t4,0x3
80009af8:	01d657b3          	srl	a5,a2,t4
80009afc:	00f686b3          	add	a3,a3,a5
80009b00:	0006c703          	lbu	a4,0(a3)
80009b04:	02000793          	li	a5,32
80009b08:	01d70eb3          	add	t4,a4,t4
80009b0c:	41d787b3          	sub	a5,a5,t4
80009b10:	00078c63          	beqz	a5,80009b28 <__divdi3+0x98>
80009b14:	00f59733          	sll	a4,a1,a5
80009b18:	01d55eb3          	srl	t4,a0,t4
80009b1c:	00f61833          	sll	a6,a2,a5
80009b20:	00eeee33          	or	t3,t4,a4
80009b24:	00f518b3          	sll	a7,a0,a5
80009b28:	01085613          	srli	a2,a6,0x10
80009b2c:	02ce5733          	divu	a4,t3,a2
80009b30:	01081593          	slli	a1,a6,0x10
80009b34:	0105d593          	srli	a1,a1,0x10
80009b38:	0108d693          	srli	a3,a7,0x10
80009b3c:	02ce77b3          	remu	a5,t3,a2
80009b40:	02e58533          	mul	a0,a1,a4
80009b44:	01079793          	slli	a5,a5,0x10
80009b48:	00d7e6b3          	or	a3,a5,a3
80009b4c:	00070793          	mv	a5,a4
80009b50:	00a6fe63          	bleu	a0,a3,80009b6c <__divdi3+0xdc>
80009b54:	010686b3          	add	a3,a3,a6
80009b58:	fff70793          	addi	a5,a4,-1
80009b5c:	0106e863          	bltu	a3,a6,80009b6c <__divdi3+0xdc>
80009b60:	00a6f663          	bleu	a0,a3,80009b6c <__divdi3+0xdc>
80009b64:	ffe70793          	addi	a5,a4,-2
80009b68:	010686b3          	add	a3,a3,a6
80009b6c:	40a686b3          	sub	a3,a3,a0
80009b70:	02c6f733          	remu	a4,a3,a2
80009b74:	01089893          	slli	a7,a7,0x10
80009b78:	0108d893          	srli	a7,a7,0x10
80009b7c:	02c6d6b3          	divu	a3,a3,a2
80009b80:	01071713          	slli	a4,a4,0x10
80009b84:	011768b3          	or	a7,a4,a7
80009b88:	02d585b3          	mul	a1,a1,a3
80009b8c:	00068513          	mv	a0,a3
80009b90:	00b8fc63          	bleu	a1,a7,80009ba8 <__divdi3+0x118>
80009b94:	011808b3          	add	a7,a6,a7
80009b98:	fff68513          	addi	a0,a3,-1
80009b9c:	0108e663          	bltu	a7,a6,80009ba8 <__divdi3+0x118>
80009ba0:	00b8f463          	bleu	a1,a7,80009ba8 <__divdi3+0x118>
80009ba4:	ffe68513          	addi	a0,a3,-2
80009ba8:	01079793          	slli	a5,a5,0x10
80009bac:	00a7e7b3          	or	a5,a5,a0
80009bb0:	00000e13          	li	t3,0
80009bb4:	0e40006f          	j	80009c98 <__divdi3+0x208>
80009bb8:	010007b7          	lui	a5,0x1000
80009bbc:	01000e93          	li	t4,16
80009bc0:	f2f66ce3          	bltu	a2,a5,80009af8 <__divdi3+0x68>
80009bc4:	01800e93          	li	t4,24
80009bc8:	f31ff06f          	j	80009af8 <__divdi3+0x68>
80009bcc:	00061663          	bnez	a2,80009bd8 <__divdi3+0x148>
80009bd0:	00100813          	li	a6,1
80009bd4:	02e85833          	divu	a6,a6,a4
80009bd8:	000107b7          	lui	a5,0x10
80009bdc:	0cf87e63          	bleu	a5,a6,80009cb8 <__divdi3+0x228>
80009be0:	0ff00793          	li	a5,255
80009be4:	0107f463          	bleu	a6,a5,80009bec <__divdi3+0x15c>
80009be8:	00800713          	li	a4,8
80009bec:	00e857b3          	srl	a5,a6,a4
80009bf0:	00f686b3          	add	a3,a3,a5
80009bf4:	0006c783          	lbu	a5,0(a3)
80009bf8:	02000693          	li	a3,32
80009bfc:	00e787b3          	add	a5,a5,a4
80009c00:	40f686b3          	sub	a3,a3,a5
80009c04:	0c069463          	bnez	a3,80009ccc <__divdi3+0x23c>
80009c08:	41058733          	sub	a4,a1,a6
80009c0c:	00100e13          	li	t3,1
80009c10:	01085613          	srli	a2,a6,0x10
80009c14:	01081593          	slli	a1,a6,0x10
80009c18:	0105d593          	srli	a1,a1,0x10
80009c1c:	0108d693          	srli	a3,a7,0x10
80009c20:	02c777b3          	remu	a5,a4,a2
80009c24:	02c75733          	divu	a4,a4,a2
80009c28:	01079793          	slli	a5,a5,0x10
80009c2c:	00d7e6b3          	or	a3,a5,a3
80009c30:	02e58533          	mul	a0,a1,a4
80009c34:	00070793          	mv	a5,a4
80009c38:	00a6fe63          	bleu	a0,a3,80009c54 <__divdi3+0x1c4>
80009c3c:	010686b3          	add	a3,a3,a6
80009c40:	fff70793          	addi	a5,a4,-1
80009c44:	0106e863          	bltu	a3,a6,80009c54 <__divdi3+0x1c4>
80009c48:	00a6f663          	bleu	a0,a3,80009c54 <__divdi3+0x1c4>
80009c4c:	ffe70793          	addi	a5,a4,-2
80009c50:	010686b3          	add	a3,a3,a6
80009c54:	40a686b3          	sub	a3,a3,a0
80009c58:	02c6f733          	remu	a4,a3,a2
80009c5c:	01089893          	slli	a7,a7,0x10
80009c60:	0108d893          	srli	a7,a7,0x10
80009c64:	02c6d6b3          	divu	a3,a3,a2
80009c68:	01071713          	slli	a4,a4,0x10
80009c6c:	011768b3          	or	a7,a4,a7
80009c70:	02d585b3          	mul	a1,a1,a3
80009c74:	00068513          	mv	a0,a3
80009c78:	00b8fc63          	bleu	a1,a7,80009c90 <__divdi3+0x200>
80009c7c:	011808b3          	add	a7,a6,a7
80009c80:	fff68513          	addi	a0,a3,-1
80009c84:	0108e663          	bltu	a7,a6,80009c90 <__divdi3+0x200>
80009c88:	00b8f463          	bleu	a1,a7,80009c90 <__divdi3+0x200>
80009c8c:	ffe68513          	addi	a0,a3,-2
80009c90:	01079793          	slli	a5,a5,0x10
80009c94:	00a7e7b3          	or	a5,a5,a0
80009c98:	00078513          	mv	a0,a5
80009c9c:	000e0593          	mv	a1,t3
80009ca0:	00030a63          	beqz	t1,80009cb4 <__divdi3+0x224>
80009ca4:	40f00533          	neg	a0,a5
80009ca8:	00a037b3          	snez	a5,a0
80009cac:	41c005b3          	neg	a1,t3
80009cb0:	40f585b3          	sub	a1,a1,a5
80009cb4:	00008067          	ret
80009cb8:	010007b7          	lui	a5,0x1000
80009cbc:	01000713          	li	a4,16
80009cc0:	f2f866e3          	bltu	a6,a5,80009bec <__divdi3+0x15c>
80009cc4:	01800713          	li	a4,24
80009cc8:	f25ff06f          	j	80009bec <__divdi3+0x15c>
80009ccc:	00d81833          	sll	a6,a6,a3
80009cd0:	00f5deb3          	srl	t4,a1,a5
80009cd4:	00d518b3          	sll	a7,a0,a3
80009cd8:	00f557b3          	srl	a5,a0,a5
80009cdc:	01085513          	srli	a0,a6,0x10
80009ce0:	00d59733          	sll	a4,a1,a3
80009ce4:	02aed5b3          	divu	a1,t4,a0
80009ce8:	00e7e633          	or	a2,a5,a4
80009cec:	01081713          	slli	a4,a6,0x10
80009cf0:	01075713          	srli	a4,a4,0x10
80009cf4:	01065793          	srli	a5,a2,0x10
80009cf8:	02aef6b3          	remu	a3,t4,a0
80009cfc:	00058e13          	mv	t3,a1
80009d00:	02b70eb3          	mul	t4,a4,a1
80009d04:	01069693          	slli	a3,a3,0x10
80009d08:	00f6e7b3          	or	a5,a3,a5
80009d0c:	01d7fe63          	bleu	t4,a5,80009d28 <__divdi3+0x298>
80009d10:	010787b3          	add	a5,a5,a6
80009d14:	fff58e13          	addi	t3,a1,-1
80009d18:	0107e863          	bltu	a5,a6,80009d28 <__divdi3+0x298>
80009d1c:	01d7f663          	bleu	t4,a5,80009d28 <__divdi3+0x298>
80009d20:	ffe58e13          	addi	t3,a1,-2
80009d24:	010787b3          	add	a5,a5,a6
80009d28:	41d787b3          	sub	a5,a5,t4
80009d2c:	02a7f5b3          	remu	a1,a5,a0
80009d30:	01061613          	slli	a2,a2,0x10
80009d34:	01065613          	srli	a2,a2,0x10
80009d38:	02a7d7b3          	divu	a5,a5,a0
80009d3c:	01059593          	slli	a1,a1,0x10
80009d40:	00c5e5b3          	or	a1,a1,a2
80009d44:	02f70733          	mul	a4,a4,a5
80009d48:	00078693          	mv	a3,a5
80009d4c:	00e5fe63          	bleu	a4,a1,80009d68 <__divdi3+0x2d8>
80009d50:	010585b3          	add	a1,a1,a6
80009d54:	fff78693          	addi	a3,a5,-1 # ffffff <buflen.2800+0xffff7b>
80009d58:	0105e863          	bltu	a1,a6,80009d68 <__divdi3+0x2d8>
80009d5c:	00e5f663          	bleu	a4,a1,80009d68 <__divdi3+0x2d8>
80009d60:	ffe78693          	addi	a3,a5,-2
80009d64:	010585b3          	add	a1,a1,a6
80009d68:	010e1e13          	slli	t3,t3,0x10
80009d6c:	40e58733          	sub	a4,a1,a4
80009d70:	00de6e33          	or	t3,t3,a3
80009d74:	e9dff06f          	j	80009c10 <__divdi3+0x180>
80009d78:	18d5e663          	bltu	a1,a3,80009f04 <__divdi3+0x474>
80009d7c:	000107b7          	lui	a5,0x10
80009d80:	04f6f463          	bleu	a5,a3,80009dc8 <__divdi3+0x338>
80009d84:	0ff00813          	li	a6,255
80009d88:	00d838b3          	sltu	a7,a6,a3
80009d8c:	00389893          	slli	a7,a7,0x3
80009d90:	8000d737          	lui	a4,0x8000d
80009d94:	0116d7b3          	srl	a5,a3,a7
80009d98:	dd870713          	addi	a4,a4,-552 # 8000cdd8 <__global_pointer$+0xffffeba8>
80009d9c:	00e787b3          	add	a5,a5,a4
80009da0:	0007c803          	lbu	a6,0(a5) # 10000 <buflen.2800+0xff7c>
80009da4:	02000e13          	li	t3,32
80009da8:	01180833          	add	a6,a6,a7
80009dac:	410e0e33          	sub	t3,t3,a6
80009db0:	020e1663          	bnez	t3,80009ddc <__divdi3+0x34c>
80009db4:	00100793          	li	a5,1
80009db8:	eeb6e0e3          	bltu	a3,a1,80009c98 <__divdi3+0x208>
80009dbc:	00c53633          	sltu	a2,a0,a2
80009dc0:	00164793          	xori	a5,a2,1
80009dc4:	ed5ff06f          	j	80009c98 <__divdi3+0x208>
80009dc8:	010007b7          	lui	a5,0x1000
80009dcc:	01000893          	li	a7,16
80009dd0:	fcf6e0e3          	bltu	a3,a5,80009d90 <__divdi3+0x300>
80009dd4:	01800893          	li	a7,24
80009dd8:	fb9ff06f          	j	80009d90 <__divdi3+0x300>
80009ddc:	010657b3          	srl	a5,a2,a6
80009de0:	01c696b3          	sll	a3,a3,t3
80009de4:	00d7e6b3          	or	a3,a5,a3
80009de8:	0106df13          	srli	t5,a3,0x10
80009dec:	0105d7b3          	srl	a5,a1,a6
80009df0:	03e7f8b3          	remu	a7,a5,t5
80009df4:	01069e93          	slli	t4,a3,0x10
80009df8:	010ede93          	srli	t4,t4,0x10
80009dfc:	01c59733          	sll	a4,a1,t3
80009e00:	01055833          	srl	a6,a0,a6
80009e04:	00e86733          	or	a4,a6,a4
80009e08:	01075813          	srli	a6,a4,0x10
80009e0c:	01c61633          	sll	a2,a2,t3
80009e10:	03e7d7b3          	divu	a5,a5,t5
80009e14:	01089893          	slli	a7,a7,0x10
80009e18:	0108e833          	or	a6,a7,a6
80009e1c:	02fe8fb3          	mul	t6,t4,a5
80009e20:	00078593          	mv	a1,a5
80009e24:	01f87e63          	bleu	t6,a6,80009e40 <__divdi3+0x3b0>
80009e28:	00d80833          	add	a6,a6,a3
80009e2c:	fff78593          	addi	a1,a5,-1 # ffffff <buflen.2800+0xffff7b>
80009e30:	00d86863          	bltu	a6,a3,80009e40 <__divdi3+0x3b0>
80009e34:	01f87663          	bleu	t6,a6,80009e40 <__divdi3+0x3b0>
80009e38:	ffe78593          	addi	a1,a5,-2
80009e3c:	00d80833          	add	a6,a6,a3
80009e40:	41f80833          	sub	a6,a6,t6
80009e44:	03e878b3          	remu	a7,a6,t5
80009e48:	01071713          	slli	a4,a4,0x10
80009e4c:	01075713          	srli	a4,a4,0x10
80009e50:	03e85833          	divu	a6,a6,t5
80009e54:	01089893          	slli	a7,a7,0x10
80009e58:	00e8e733          	or	a4,a7,a4
80009e5c:	030e8eb3          	mul	t4,t4,a6
80009e60:	00080793          	mv	a5,a6
80009e64:	01d77e63          	bleu	t4,a4,80009e80 <__divdi3+0x3f0>
80009e68:	00d70733          	add	a4,a4,a3
80009e6c:	fff80793          	addi	a5,a6,-1 # 7fffffff <__global_pointer$+0xffff1dcf>
80009e70:	00d76863          	bltu	a4,a3,80009e80 <__divdi3+0x3f0>
80009e74:	01d77663          	bleu	t4,a4,80009e80 <__divdi3+0x3f0>
80009e78:	ffe80793          	addi	a5,a6,-2
80009e7c:	00d70733          	add	a4,a4,a3
80009e80:	01059593          	slli	a1,a1,0x10
80009e84:	00010f37          	lui	t5,0x10
80009e88:	00f5e7b3          	or	a5,a1,a5
80009e8c:	ffff0593          	addi	a1,t5,-1 # ffff <buflen.2800+0xff7b>
80009e90:	00b7f8b3          	and	a7,a5,a1
80009e94:	0107d813          	srli	a6,a5,0x10
80009e98:	00b675b3          	and	a1,a2,a1
80009e9c:	01065613          	srli	a2,a2,0x10
80009ea0:	41d70733          	sub	a4,a4,t4
80009ea4:	02b88eb3          	mul	t4,a7,a1
80009ea8:	02b805b3          	mul	a1,a6,a1
80009eac:	010ed693          	srli	a3,t4,0x10
80009eb0:	02c888b3          	mul	a7,a7,a2
80009eb4:	00b888b3          	add	a7,a7,a1
80009eb8:	011686b3          	add	a3,a3,a7
80009ebc:	02c80833          	mul	a6,a6,a2
80009ec0:	00b6f463          	bleu	a1,a3,80009ec8 <__divdi3+0x438>
80009ec4:	01e80833          	add	a6,a6,t5
80009ec8:	0106d613          	srli	a2,a3,0x10
80009ecc:	01060833          	add	a6,a2,a6
80009ed0:	03076663          	bltu	a4,a6,80009efc <__divdi3+0x46c>
80009ed4:	cd071ee3          	bne	a4,a6,80009bb0 <__divdi3+0x120>
80009ed8:	00010737          	lui	a4,0x10
80009edc:	fff70713          	addi	a4,a4,-1 # ffff <buflen.2800+0xff7b>
80009ee0:	00e6f6b3          	and	a3,a3,a4
80009ee4:	01069693          	slli	a3,a3,0x10
80009ee8:	00eefeb3          	and	t4,t4,a4
80009eec:	01c51533          	sll	a0,a0,t3
80009ef0:	01d686b3          	add	a3,a3,t4
80009ef4:	00000e13          	li	t3,0
80009ef8:	dad570e3          	bleu	a3,a0,80009c98 <__divdi3+0x208>
80009efc:	fff78793          	addi	a5,a5,-1
80009f00:	cb1ff06f          	j	80009bb0 <__divdi3+0x120>
80009f04:	00000e13          	li	t3,0
80009f08:	00000793          	li	a5,0
80009f0c:	d8dff06f          	j	80009c98 <__divdi3+0x208>

80009f10 <__moddi3>:
80009f10:	00000893          	li	a7,0
80009f14:	0005dc63          	bgez	a1,80009f2c <__moddi3+0x1c>
80009f18:	40a00533          	neg	a0,a0
80009f1c:	00a037b3          	snez	a5,a0
80009f20:	40b005b3          	neg	a1,a1
80009f24:	40f585b3          	sub	a1,a1,a5
80009f28:	fff00893          	li	a7,-1
80009f2c:	0006da63          	bgez	a3,80009f40 <__moddi3+0x30>
80009f30:	40c00633          	neg	a2,a2
80009f34:	00c037b3          	snez	a5,a2
80009f38:	40d006b3          	neg	a3,a3
80009f3c:	40f686b3          	sub	a3,a3,a5
80009f40:	00060813          	mv	a6,a2
80009f44:	00068313          	mv	t1,a3
80009f48:	00050793          	mv	a5,a0
80009f4c:	00058713          	mv	a4,a1
80009f50:	24069863          	bnez	a3,8000a1a0 <__moddi3+0x290>
80009f54:	8000d6b7          	lui	a3,0x8000d
80009f58:	dd868693          	addi	a3,a3,-552 # 8000cdd8 <__global_pointer$+0xffffeba8>
80009f5c:	0ec5f863          	bleu	a2,a1,8000a04c <__moddi3+0x13c>
80009f60:	00010e37          	lui	t3,0x10
80009f64:	0dc67a63          	bleu	t3,a2,8000a038 <__moddi3+0x128>
80009f68:	0ff00e13          	li	t3,255
80009f6c:	00ce7463          	bleu	a2,t3,80009f74 <__moddi3+0x64>
80009f70:	00800313          	li	t1,8
80009f74:	00665e33          	srl	t3,a2,t1
80009f78:	01c686b3          	add	a3,a3,t3
80009f7c:	0006ce03          	lbu	t3,0(a3)
80009f80:	006e0e33          	add	t3,t3,t1
80009f84:	02000313          	li	t1,32
80009f88:	41c30333          	sub	t1,t1,t3
80009f8c:	00030c63          	beqz	t1,80009fa4 <__moddi3+0x94>
80009f90:	006595b3          	sll	a1,a1,t1
80009f94:	01c55e33          	srl	t3,a0,t3
80009f98:	00661833          	sll	a6,a2,t1
80009f9c:	00be6733          	or	a4,t3,a1
80009fa0:	006517b3          	sll	a5,a0,t1
80009fa4:	01085593          	srli	a1,a6,0x10
80009fa8:	02b77633          	remu	a2,a4,a1
80009fac:	01081513          	slli	a0,a6,0x10
80009fb0:	01055513          	srli	a0,a0,0x10
80009fb4:	0107d693          	srli	a3,a5,0x10
80009fb8:	02b75733          	divu	a4,a4,a1
80009fbc:	01061613          	slli	a2,a2,0x10
80009fc0:	00d666b3          	or	a3,a2,a3
80009fc4:	02e50733          	mul	a4,a0,a4
80009fc8:	00e6fa63          	bleu	a4,a3,80009fdc <__moddi3+0xcc>
80009fcc:	010686b3          	add	a3,a3,a6
80009fd0:	0106e663          	bltu	a3,a6,80009fdc <__moddi3+0xcc>
80009fd4:	00e6f463          	bleu	a4,a3,80009fdc <__moddi3+0xcc>
80009fd8:	010686b3          	add	a3,a3,a6
80009fdc:	40e686b3          	sub	a3,a3,a4
80009fe0:	02b6f733          	remu	a4,a3,a1
80009fe4:	01079793          	slli	a5,a5,0x10
80009fe8:	0107d793          	srli	a5,a5,0x10
80009fec:	02b6d6b3          	divu	a3,a3,a1
80009ff0:	02d506b3          	mul	a3,a0,a3
80009ff4:	01071513          	slli	a0,a4,0x10
80009ff8:	00f567b3          	or	a5,a0,a5
80009ffc:	00d7fa63          	bleu	a3,a5,8000a010 <__moddi3+0x100>
8000a000:	010787b3          	add	a5,a5,a6
8000a004:	0107e663          	bltu	a5,a6,8000a010 <__moddi3+0x100>
8000a008:	00d7f463          	bleu	a3,a5,8000a010 <__moddi3+0x100>
8000a00c:	010787b3          	add	a5,a5,a6
8000a010:	40d787b3          	sub	a5,a5,a3
8000a014:	0067d533          	srl	a0,a5,t1
8000a018:	00000593          	li	a1,0
8000a01c:	00088c63          	beqz	a7,8000a034 <__moddi3+0x124>
8000a020:	40a007b3          	neg	a5,a0
8000a024:	00f03733          	snez	a4,a5
8000a028:	40b005b3          	neg	a1,a1
8000a02c:	00078513          	mv	a0,a5
8000a030:	40e585b3          	sub	a1,a1,a4
8000a034:	00008067          	ret
8000a038:	01000e37          	lui	t3,0x1000
8000a03c:	01000313          	li	t1,16
8000a040:	f3c66ae3          	bltu	a2,t3,80009f74 <__moddi3+0x64>
8000a044:	01800313          	li	t1,24
8000a048:	f2dff06f          	j	80009f74 <__moddi3+0x64>
8000a04c:	00061663          	bnez	a2,8000a058 <__moddi3+0x148>
8000a050:	00100813          	li	a6,1
8000a054:	02685833          	divu	a6,a6,t1
8000a058:	00010737          	lui	a4,0x10
8000a05c:	0ae87263          	bleu	a4,a6,8000a100 <__moddi3+0x1f0>
8000a060:	0ff00713          	li	a4,255
8000a064:	01077463          	bleu	a6,a4,8000a06c <__moddi3+0x15c>
8000a068:	00800313          	li	t1,8
8000a06c:	00685733          	srl	a4,a6,t1
8000a070:	00e686b3          	add	a3,a3,a4
8000a074:	0006ce03          	lbu	t3,0(a3)
8000a078:	006e0e33          	add	t3,t3,t1
8000a07c:	02000313          	li	t1,32
8000a080:	41c30333          	sub	t1,t1,t3
8000a084:	08031863          	bnez	t1,8000a114 <__moddi3+0x204>
8000a088:	410585b3          	sub	a1,a1,a6
8000a08c:	01085693          	srli	a3,a6,0x10
8000a090:	01081513          	slli	a0,a6,0x10
8000a094:	01055513          	srli	a0,a0,0x10
8000a098:	0107d613          	srli	a2,a5,0x10
8000a09c:	02d5f733          	remu	a4,a1,a3
8000a0a0:	02d5d5b3          	divu	a1,a1,a3
8000a0a4:	01071713          	slli	a4,a4,0x10
8000a0a8:	00c76733          	or	a4,a4,a2
8000a0ac:	02b505b3          	mul	a1,a0,a1
8000a0b0:	00b77a63          	bleu	a1,a4,8000a0c4 <__moddi3+0x1b4>
8000a0b4:	01070733          	add	a4,a4,a6
8000a0b8:	01076663          	bltu	a4,a6,8000a0c4 <__moddi3+0x1b4>
8000a0bc:	00b77463          	bleu	a1,a4,8000a0c4 <__moddi3+0x1b4>
8000a0c0:	01070733          	add	a4,a4,a6
8000a0c4:	40b705b3          	sub	a1,a4,a1
8000a0c8:	02d5f733          	remu	a4,a1,a3
8000a0cc:	01079793          	slli	a5,a5,0x10
8000a0d0:	0107d793          	srli	a5,a5,0x10
8000a0d4:	02d5d5b3          	divu	a1,a1,a3
8000a0d8:	02b505b3          	mul	a1,a0,a1
8000a0dc:	01071513          	slli	a0,a4,0x10
8000a0e0:	00f567b3          	or	a5,a0,a5
8000a0e4:	00b7fa63          	bleu	a1,a5,8000a0f8 <__moddi3+0x1e8>
8000a0e8:	010787b3          	add	a5,a5,a6
8000a0ec:	0107e663          	bltu	a5,a6,8000a0f8 <__moddi3+0x1e8>
8000a0f0:	00b7f463          	bleu	a1,a5,8000a0f8 <__moddi3+0x1e8>
8000a0f4:	010787b3          	add	a5,a5,a6
8000a0f8:	40b787b3          	sub	a5,a5,a1
8000a0fc:	f19ff06f          	j	8000a014 <__moddi3+0x104>
8000a100:	01000737          	lui	a4,0x1000
8000a104:	01000313          	li	t1,16
8000a108:	f6e862e3          	bltu	a6,a4,8000a06c <__moddi3+0x15c>
8000a10c:	01800313          	li	t1,24
8000a110:	f5dff06f          	j	8000a06c <__moddi3+0x15c>
8000a114:	00681833          	sll	a6,a6,t1
8000a118:	01c5deb3          	srl	t4,a1,t3
8000a11c:	006517b3          	sll	a5,a0,t1
8000a120:	01c55e33          	srl	t3,a0,t3
8000a124:	01085513          	srli	a0,a6,0x10
8000a128:	02aed6b3          	divu	a3,t4,a0
8000a12c:	006595b3          	sll	a1,a1,t1
8000a130:	00be6e33          	or	t3,t3,a1
8000a134:	01081593          	slli	a1,a6,0x10
8000a138:	0105d593          	srli	a1,a1,0x10
8000a13c:	010e5613          	srli	a2,t3,0x10
8000a140:	02aef733          	remu	a4,t4,a0
8000a144:	02d586b3          	mul	a3,a1,a3
8000a148:	01071713          	slli	a4,a4,0x10
8000a14c:	00c76733          	or	a4,a4,a2
8000a150:	00d77a63          	bleu	a3,a4,8000a164 <__moddi3+0x254>
8000a154:	01070733          	add	a4,a4,a6
8000a158:	01076663          	bltu	a4,a6,8000a164 <__moddi3+0x254>
8000a15c:	00d77463          	bleu	a3,a4,8000a164 <__moddi3+0x254>
8000a160:	01070733          	add	a4,a4,a6
8000a164:	40d70633          	sub	a2,a4,a3
8000a168:	02a67733          	remu	a4,a2,a0
8000a16c:	010e1e13          	slli	t3,t3,0x10
8000a170:	010e5e13          	srli	t3,t3,0x10
8000a174:	02a65633          	divu	a2,a2,a0
8000a178:	01071713          	slli	a4,a4,0x10
8000a17c:	02c58633          	mul	a2,a1,a2
8000a180:	01c765b3          	or	a1,a4,t3
8000a184:	00c5fa63          	bleu	a2,a1,8000a198 <__moddi3+0x288>
8000a188:	010585b3          	add	a1,a1,a6
8000a18c:	0105e663          	bltu	a1,a6,8000a198 <__moddi3+0x288>
8000a190:	00c5f463          	bleu	a2,a1,8000a198 <__moddi3+0x288>
8000a194:	010585b3          	add	a1,a1,a6
8000a198:	40c585b3          	sub	a1,a1,a2
8000a19c:	ef1ff06f          	j	8000a08c <__moddi3+0x17c>
8000a1a0:	e6d5eee3          	bltu	a1,a3,8000a01c <__moddi3+0x10c>
8000a1a4:	00010837          	lui	a6,0x10
8000a1a8:	0506fc63          	bleu	a6,a3,8000a200 <__moddi3+0x2f0>
8000a1ac:	0ff00e93          	li	t4,255
8000a1b0:	00deb833          	sltu	a6,t4,a3
8000a1b4:	00381813          	slli	a6,a6,0x3
8000a1b8:	8000de37          	lui	t3,0x8000d
8000a1bc:	dd8e0e13          	addi	t3,t3,-552 # 8000cdd8 <__global_pointer$+0xffffeba8>
8000a1c0:	0106d333          	srl	t1,a3,a6
8000a1c4:	01c30333          	add	t1,t1,t3
8000a1c8:	00034e83          	lbu	t4,0(t1)
8000a1cc:	02000e13          	li	t3,32
8000a1d0:	010e8eb3          	add	t4,t4,a6
8000a1d4:	41de0e33          	sub	t3,t3,t4
8000a1d8:	020e1e63          	bnez	t3,8000a214 <__moddi3+0x304>
8000a1dc:	00b6e463          	bltu	a3,a1,8000a1e4 <__moddi3+0x2d4>
8000a1e0:	00c56a63          	bltu	a0,a2,8000a1f4 <__moddi3+0x2e4>
8000a1e4:	40c507b3          	sub	a5,a0,a2
8000a1e8:	40d586b3          	sub	a3,a1,a3
8000a1ec:	00f53533          	sltu	a0,a0,a5
8000a1f0:	40a68733          	sub	a4,a3,a0
8000a1f4:	00078513          	mv	a0,a5
8000a1f8:	00070593          	mv	a1,a4
8000a1fc:	e21ff06f          	j	8000a01c <__moddi3+0x10c>
8000a200:	01000337          	lui	t1,0x1000
8000a204:	01000813          	li	a6,16
8000a208:	fa66e8e3          	bltu	a3,t1,8000a1b8 <__moddi3+0x2a8>
8000a20c:	01800813          	li	a6,24
8000a210:	fa9ff06f          	j	8000a1b8 <__moddi3+0x2a8>
8000a214:	01d65733          	srl	a4,a2,t4
8000a218:	01c696b3          	sll	a3,a3,t3
8000a21c:	00d766b3          	or	a3,a4,a3
8000a220:	01d5d7b3          	srl	a5,a1,t4
8000a224:	01d55733          	srl	a4,a0,t4
8000a228:	01c595b3          	sll	a1,a1,t3
8000a22c:	00b76733          	or	a4,a4,a1
8000a230:	0106d593          	srli	a1,a3,0x10
8000a234:	02b7f333          	remu	t1,a5,a1
8000a238:	01069f13          	slli	t5,a3,0x10
8000a23c:	010f5f13          	srli	t5,t5,0x10
8000a240:	01075813          	srli	a6,a4,0x10
8000a244:	01c61633          	sll	a2,a2,t3
8000a248:	01c51533          	sll	a0,a0,t3
8000a24c:	02b7d7b3          	divu	a5,a5,a1
8000a250:	01031313          	slli	t1,t1,0x10
8000a254:	01036833          	or	a6,t1,a6
8000a258:	02ff0fb3          	mul	t6,t5,a5
8000a25c:	00078313          	mv	t1,a5
8000a260:	01f87e63          	bleu	t6,a6,8000a27c <__moddi3+0x36c>
8000a264:	00d80833          	add	a6,a6,a3
8000a268:	fff78313          	addi	t1,a5,-1
8000a26c:	00d86863          	bltu	a6,a3,8000a27c <__moddi3+0x36c>
8000a270:	01f87663          	bleu	t6,a6,8000a27c <__moddi3+0x36c>
8000a274:	ffe78313          	addi	t1,a5,-2
8000a278:	00d80833          	add	a6,a6,a3
8000a27c:	41f80833          	sub	a6,a6,t6
8000a280:	02b87fb3          	remu	t6,a6,a1
8000a284:	02b85833          	divu	a6,a6,a1
8000a288:	010f9f93          	slli	t6,t6,0x10
8000a28c:	030f05b3          	mul	a1,t5,a6
8000a290:	01071f13          	slli	t5,a4,0x10
8000a294:	010f5f13          	srli	t5,t5,0x10
8000a298:	01efef33          	or	t5,t6,t5
8000a29c:	00080713          	mv	a4,a6
8000a2a0:	00bf7e63          	bleu	a1,t5,8000a2bc <__moddi3+0x3ac>
8000a2a4:	00df0f33          	add	t5,t5,a3
8000a2a8:	fff80713          	addi	a4,a6,-1 # ffff <buflen.2800+0xff7b>
8000a2ac:	00df6863          	bltu	t5,a3,8000a2bc <__moddi3+0x3ac>
8000a2b0:	00bf7663          	bleu	a1,t5,8000a2bc <__moddi3+0x3ac>
8000a2b4:	ffe80713          	addi	a4,a6,-2
8000a2b8:	00df0f33          	add	t5,t5,a3
8000a2bc:	01031313          	slli	t1,t1,0x10
8000a2c0:	00010fb7          	lui	t6,0x10
8000a2c4:	00e36333          	or	t1,t1,a4
8000a2c8:	ffff8793          	addi	a5,t6,-1 # ffff <buflen.2800+0xff7b>
8000a2cc:	01065813          	srli	a6,a2,0x10
8000a2d0:	40bf0f33          	sub	t5,t5,a1
8000a2d4:	00f375b3          	and	a1,t1,a5
8000a2d8:	01035313          	srli	t1,t1,0x10
8000a2dc:	00f677b3          	and	a5,a2,a5
8000a2e0:	02f58733          	mul	a4,a1,a5
8000a2e4:	02f307b3          	mul	a5,t1,a5
8000a2e8:	030585b3          	mul	a1,a1,a6
8000a2ec:	03030333          	mul	t1,t1,a6
8000a2f0:	00f585b3          	add	a1,a1,a5
8000a2f4:	01075813          	srli	a6,a4,0x10
8000a2f8:	00b80833          	add	a6,a6,a1
8000a2fc:	00f87463          	bleu	a5,a6,8000a304 <__moddi3+0x3f4>
8000a300:	01f30333          	add	t1,t1,t6
8000a304:	000107b7          	lui	a5,0x10
8000a308:	fff78793          	addi	a5,a5,-1 # ffff <buflen.2800+0xff7b>
8000a30c:	01085593          	srli	a1,a6,0x10
8000a310:	00f87833          	and	a6,a6,a5
8000a314:	01081813          	slli	a6,a6,0x10
8000a318:	00f77733          	and	a4,a4,a5
8000a31c:	006585b3          	add	a1,a1,t1
8000a320:	00e80733          	add	a4,a6,a4
8000a324:	00bf6663          	bltu	t5,a1,8000a330 <__moddi3+0x420>
8000a328:	00bf1e63          	bne	t5,a1,8000a344 <__moddi3+0x434>
8000a32c:	00e57c63          	bleu	a4,a0,8000a344 <__moddi3+0x434>
8000a330:	40c70633          	sub	a2,a4,a2
8000a334:	00c73733          	sltu	a4,a4,a2
8000a338:	40d585b3          	sub	a1,a1,a3
8000a33c:	40e585b3          	sub	a1,a1,a4
8000a340:	00060713          	mv	a4,a2
8000a344:	40e50733          	sub	a4,a0,a4
8000a348:	00e53533          	sltu	a0,a0,a4
8000a34c:	40bf05b3          	sub	a1,t5,a1
8000a350:	40a585b3          	sub	a1,a1,a0
8000a354:	01d597b3          	sll	a5,a1,t4
8000a358:	01c75733          	srl	a4,a4,t3
8000a35c:	00e7e533          	or	a0,a5,a4
8000a360:	01c5d5b3          	srl	a1,a1,t3
8000a364:	cb9ff06f          	j	8000a01c <__moddi3+0x10c>

8000a368 <__udivdi3>:
8000a368:	00058793          	mv	a5,a1
8000a36c:	00060813          	mv	a6,a2
8000a370:	00068893          	mv	a7,a3
8000a374:	00050313          	mv	t1,a0
8000a378:	28069663          	bnez	a3,8000a604 <__udivdi3+0x29c>
8000a37c:	8000d737          	lui	a4,0x8000d
8000a380:	dd870713          	addi	a4,a4,-552 # 8000cdd8 <__global_pointer$+0xffffeba8>
8000a384:	0ec5f663          	bleu	a2,a1,8000a470 <__udivdi3+0x108>
8000a388:	000106b7          	lui	a3,0x10
8000a38c:	0cd67863          	bleu	a3,a2,8000a45c <__udivdi3+0xf4>
8000a390:	0ff00693          	li	a3,255
8000a394:	00c6b6b3          	sltu	a3,a3,a2
8000a398:	00369693          	slli	a3,a3,0x3
8000a39c:	00d658b3          	srl	a7,a2,a3
8000a3a0:	01170733          	add	a4,a4,a7
8000a3a4:	00074703          	lbu	a4,0(a4)
8000a3a8:	00d706b3          	add	a3,a4,a3
8000a3ac:	02000713          	li	a4,32
8000a3b0:	40d70733          	sub	a4,a4,a3
8000a3b4:	00070c63          	beqz	a4,8000a3cc <__udivdi3+0x64>
8000a3b8:	00e797b3          	sll	a5,a5,a4
8000a3bc:	00d556b3          	srl	a3,a0,a3
8000a3c0:	00e61833          	sll	a6,a2,a4
8000a3c4:	00f6e5b3          	or	a1,a3,a5
8000a3c8:	00e51333          	sll	t1,a0,a4
8000a3cc:	01085513          	srli	a0,a6,0x10
8000a3d0:	02a5d7b3          	divu	a5,a1,a0
8000a3d4:	01081613          	slli	a2,a6,0x10
8000a3d8:	01065613          	srli	a2,a2,0x10
8000a3dc:	01035693          	srli	a3,t1,0x10
8000a3e0:	02a5f733          	remu	a4,a1,a0
8000a3e4:	02f605b3          	mul	a1,a2,a5
8000a3e8:	01071713          	slli	a4,a4,0x10
8000a3ec:	00d766b3          	or	a3,a4,a3
8000a3f0:	00078713          	mv	a4,a5
8000a3f4:	00b6fe63          	bleu	a1,a3,8000a410 <__udivdi3+0xa8>
8000a3f8:	010686b3          	add	a3,a3,a6
8000a3fc:	fff78713          	addi	a4,a5,-1
8000a400:	0106e863          	bltu	a3,a6,8000a410 <__udivdi3+0xa8>
8000a404:	00b6f663          	bleu	a1,a3,8000a410 <__udivdi3+0xa8>
8000a408:	ffe78713          	addi	a4,a5,-2
8000a40c:	010686b3          	add	a3,a3,a6
8000a410:	40b686b3          	sub	a3,a3,a1
8000a414:	02a6f7b3          	remu	a5,a3,a0
8000a418:	01031313          	slli	t1,t1,0x10
8000a41c:	01035313          	srli	t1,t1,0x10
8000a420:	02a6d6b3          	divu	a3,a3,a0
8000a424:	01079793          	slli	a5,a5,0x10
8000a428:	0067e333          	or	t1,a5,t1
8000a42c:	02d605b3          	mul	a1,a2,a3
8000a430:	00068513          	mv	a0,a3
8000a434:	00b37c63          	bleu	a1,t1,8000a44c <__udivdi3+0xe4>
8000a438:	00680333          	add	t1,a6,t1
8000a43c:	fff68513          	addi	a0,a3,-1 # ffff <buflen.2800+0xff7b>
8000a440:	01036663          	bltu	t1,a6,8000a44c <__udivdi3+0xe4>
8000a444:	00b37463          	bleu	a1,t1,8000a44c <__udivdi3+0xe4>
8000a448:	ffe68513          	addi	a0,a3,-2
8000a44c:	01071713          	slli	a4,a4,0x10
8000a450:	00a76733          	or	a4,a4,a0
8000a454:	00000593          	li	a1,0
8000a458:	0e40006f          	j	8000a53c <__udivdi3+0x1d4>
8000a45c:	010008b7          	lui	a7,0x1000
8000a460:	01000693          	li	a3,16
8000a464:	f3166ce3          	bltu	a2,a7,8000a39c <__udivdi3+0x34>
8000a468:	01800693          	li	a3,24
8000a46c:	f31ff06f          	j	8000a39c <__udivdi3+0x34>
8000a470:	00061663          	bnez	a2,8000a47c <__udivdi3+0x114>
8000a474:	00100693          	li	a3,1
8000a478:	02c6d833          	divu	a6,a3,a2
8000a47c:	000106b7          	lui	a3,0x10
8000a480:	0cd87263          	bleu	a3,a6,8000a544 <__udivdi3+0x1dc>
8000a484:	0ff00693          	li	a3,255
8000a488:	0106f463          	bleu	a6,a3,8000a490 <__udivdi3+0x128>
8000a48c:	00800893          	li	a7,8
8000a490:	011856b3          	srl	a3,a6,a7
8000a494:	00d70733          	add	a4,a4,a3
8000a498:	00074683          	lbu	a3,0(a4)
8000a49c:	02000713          	li	a4,32
8000a4a0:	011686b3          	add	a3,a3,a7
8000a4a4:	40d70733          	sub	a4,a4,a3
8000a4a8:	0a071863          	bnez	a4,8000a558 <__udivdi3+0x1f0>
8000a4ac:	410787b3          	sub	a5,a5,a6
8000a4b0:	00100593          	li	a1,1
8000a4b4:	01085613          	srli	a2,a6,0x10
8000a4b8:	01081893          	slli	a7,a6,0x10
8000a4bc:	0108d893          	srli	a7,a7,0x10
8000a4c0:	01035693          	srli	a3,t1,0x10
8000a4c4:	02c7f733          	remu	a4,a5,a2
8000a4c8:	02c7d7b3          	divu	a5,a5,a2
8000a4cc:	01071713          	slli	a4,a4,0x10
8000a4d0:	00d766b3          	or	a3,a4,a3
8000a4d4:	02f88533          	mul	a0,a7,a5
8000a4d8:	00078713          	mv	a4,a5
8000a4dc:	00a6fe63          	bleu	a0,a3,8000a4f8 <__udivdi3+0x190>
8000a4e0:	010686b3          	add	a3,a3,a6
8000a4e4:	fff78713          	addi	a4,a5,-1
8000a4e8:	0106e863          	bltu	a3,a6,8000a4f8 <__udivdi3+0x190>
8000a4ec:	00a6f663          	bleu	a0,a3,8000a4f8 <__udivdi3+0x190>
8000a4f0:	ffe78713          	addi	a4,a5,-2
8000a4f4:	010686b3          	add	a3,a3,a6
8000a4f8:	40a686b3          	sub	a3,a3,a0
8000a4fc:	02c6f7b3          	remu	a5,a3,a2
8000a500:	01031313          	slli	t1,t1,0x10
8000a504:	01035313          	srli	t1,t1,0x10
8000a508:	02c6d6b3          	divu	a3,a3,a2
8000a50c:	01079793          	slli	a5,a5,0x10
8000a510:	0067e333          	or	t1,a5,t1
8000a514:	02d888b3          	mul	a7,a7,a3
8000a518:	00068513          	mv	a0,a3
8000a51c:	01137c63          	bleu	a7,t1,8000a534 <__udivdi3+0x1cc>
8000a520:	00680333          	add	t1,a6,t1
8000a524:	fff68513          	addi	a0,a3,-1 # ffff <buflen.2800+0xff7b>
8000a528:	01036663          	bltu	t1,a6,8000a534 <__udivdi3+0x1cc>
8000a52c:	01137463          	bleu	a7,t1,8000a534 <__udivdi3+0x1cc>
8000a530:	ffe68513          	addi	a0,a3,-2
8000a534:	01071713          	slli	a4,a4,0x10
8000a538:	00a76733          	or	a4,a4,a0
8000a53c:	00070513          	mv	a0,a4
8000a540:	00008067          	ret
8000a544:	010006b7          	lui	a3,0x1000
8000a548:	01000893          	li	a7,16
8000a54c:	f4d862e3          	bltu	a6,a3,8000a490 <__udivdi3+0x128>
8000a550:	01800893          	li	a7,24
8000a554:	f3dff06f          	j	8000a490 <__udivdi3+0x128>
8000a558:	00e81833          	sll	a6,a6,a4
8000a55c:	00d7d5b3          	srl	a1,a5,a3
8000a560:	00e51333          	sll	t1,a0,a4
8000a564:	00d556b3          	srl	a3,a0,a3
8000a568:	01085513          	srli	a0,a6,0x10
8000a56c:	00e797b3          	sll	a5,a5,a4
8000a570:	02a5f733          	remu	a4,a1,a0
8000a574:	00f6e8b3          	or	a7,a3,a5
8000a578:	01081793          	slli	a5,a6,0x10
8000a57c:	0107d793          	srli	a5,a5,0x10
8000a580:	0108d613          	srli	a2,a7,0x10
8000a584:	02a5d5b3          	divu	a1,a1,a0
8000a588:	01071713          	slli	a4,a4,0x10
8000a58c:	00c76733          	or	a4,a4,a2
8000a590:	02b786b3          	mul	a3,a5,a1
8000a594:	00058613          	mv	a2,a1
8000a598:	00d77e63          	bleu	a3,a4,8000a5b4 <__udivdi3+0x24c>
8000a59c:	01070733          	add	a4,a4,a6
8000a5a0:	fff58613          	addi	a2,a1,-1
8000a5a4:	01076863          	bltu	a4,a6,8000a5b4 <__udivdi3+0x24c>
8000a5a8:	00d77663          	bleu	a3,a4,8000a5b4 <__udivdi3+0x24c>
8000a5ac:	ffe58613          	addi	a2,a1,-2
8000a5b0:	01070733          	add	a4,a4,a6
8000a5b4:	40d706b3          	sub	a3,a4,a3
8000a5b8:	02a6f733          	remu	a4,a3,a0
8000a5bc:	01089893          	slli	a7,a7,0x10
8000a5c0:	0108d893          	srli	a7,a7,0x10
8000a5c4:	02a6d6b3          	divu	a3,a3,a0
8000a5c8:	01071713          	slli	a4,a4,0x10
8000a5cc:	02d785b3          	mul	a1,a5,a3
8000a5d0:	011767b3          	or	a5,a4,a7
8000a5d4:	00068713          	mv	a4,a3
8000a5d8:	00b7fe63          	bleu	a1,a5,8000a5f4 <__udivdi3+0x28c>
8000a5dc:	010787b3          	add	a5,a5,a6
8000a5e0:	fff68713          	addi	a4,a3,-1 # ffffff <buflen.2800+0xffff7b>
8000a5e4:	0107e863          	bltu	a5,a6,8000a5f4 <__udivdi3+0x28c>
8000a5e8:	00b7f663          	bleu	a1,a5,8000a5f4 <__udivdi3+0x28c>
8000a5ec:	ffe68713          	addi	a4,a3,-2
8000a5f0:	010787b3          	add	a5,a5,a6
8000a5f4:	40b787b3          	sub	a5,a5,a1
8000a5f8:	01061593          	slli	a1,a2,0x10
8000a5fc:	00e5e5b3          	or	a1,a1,a4
8000a600:	eb5ff06f          	j	8000a4b4 <__udivdi3+0x14c>
8000a604:	18d5e663          	bltu	a1,a3,8000a790 <__udivdi3+0x428>
8000a608:	00010737          	lui	a4,0x10
8000a60c:	04e6f463          	bleu	a4,a3,8000a654 <__udivdi3+0x2ec>
8000a610:	0ff00813          	li	a6,255
8000a614:	00d83733          	sltu	a4,a6,a3
8000a618:	00371713          	slli	a4,a4,0x3
8000a61c:	8000d837          	lui	a6,0x8000d
8000a620:	dd880813          	addi	a6,a6,-552 # 8000cdd8 <__global_pointer$+0xffffeba8>
8000a624:	00e6d5b3          	srl	a1,a3,a4
8000a628:	010585b3          	add	a1,a1,a6
8000a62c:	0005c803          	lbu	a6,0(a1)
8000a630:	02000593          	li	a1,32
8000a634:	00e80833          	add	a6,a6,a4
8000a638:	410585b3          	sub	a1,a1,a6
8000a63c:	02059663          	bnez	a1,8000a668 <__udivdi3+0x300>
8000a640:	00100713          	li	a4,1
8000a644:	eef6ece3          	bltu	a3,a5,8000a53c <__udivdi3+0x1d4>
8000a648:	00c53533          	sltu	a0,a0,a2
8000a64c:	00154713          	xori	a4,a0,1
8000a650:	eedff06f          	j	8000a53c <__udivdi3+0x1d4>
8000a654:	010005b7          	lui	a1,0x1000
8000a658:	01000713          	li	a4,16
8000a65c:	fcb6e0e3          	bltu	a3,a1,8000a61c <__udivdi3+0x2b4>
8000a660:	01800713          	li	a4,24
8000a664:	fb9ff06f          	j	8000a61c <__udivdi3+0x2b4>
8000a668:	01065733          	srl	a4,a2,a6
8000a66c:	00b696b3          	sll	a3,a3,a1
8000a670:	00d766b3          	or	a3,a4,a3
8000a674:	0106de93          	srli	t4,a3,0x10
8000a678:	0107d733          	srl	a4,a5,a6
8000a67c:	03d778b3          	remu	a7,a4,t4
8000a680:	00b797b3          	sll	a5,a5,a1
8000a684:	01055833          	srl	a6,a0,a6
8000a688:	00f86333          	or	t1,a6,a5
8000a68c:	01069793          	slli	a5,a3,0x10
8000a690:	0107d793          	srli	a5,a5,0x10
8000a694:	01035813          	srli	a6,t1,0x10
8000a698:	00b61633          	sll	a2,a2,a1
8000a69c:	03d75733          	divu	a4,a4,t4
8000a6a0:	01089893          	slli	a7,a7,0x10
8000a6a4:	0108e833          	or	a6,a7,a6
8000a6a8:	02e78f33          	mul	t5,a5,a4
8000a6ac:	00070e13          	mv	t3,a4
8000a6b0:	01e87e63          	bleu	t5,a6,8000a6cc <__udivdi3+0x364>
8000a6b4:	00d80833          	add	a6,a6,a3
8000a6b8:	fff70e13          	addi	t3,a4,-1 # ffff <buflen.2800+0xff7b>
8000a6bc:	00d86863          	bltu	a6,a3,8000a6cc <__udivdi3+0x364>
8000a6c0:	01e87663          	bleu	t5,a6,8000a6cc <__udivdi3+0x364>
8000a6c4:	ffe70e13          	addi	t3,a4,-2
8000a6c8:	00d80833          	add	a6,a6,a3
8000a6cc:	41e80833          	sub	a6,a6,t5
8000a6d0:	03d878b3          	remu	a7,a6,t4
8000a6d4:	03d85833          	divu	a6,a6,t4
8000a6d8:	01089893          	slli	a7,a7,0x10
8000a6dc:	03078eb3          	mul	t4,a5,a6
8000a6e0:	01031793          	slli	a5,t1,0x10
8000a6e4:	0107d793          	srli	a5,a5,0x10
8000a6e8:	00f8e7b3          	or	a5,a7,a5
8000a6ec:	00080713          	mv	a4,a6
8000a6f0:	01d7fe63          	bleu	t4,a5,8000a70c <__udivdi3+0x3a4>
8000a6f4:	00d787b3          	add	a5,a5,a3
8000a6f8:	fff80713          	addi	a4,a6,-1
8000a6fc:	00d7e863          	bltu	a5,a3,8000a70c <__udivdi3+0x3a4>
8000a700:	01d7f663          	bleu	t4,a5,8000a70c <__udivdi3+0x3a4>
8000a704:	ffe80713          	addi	a4,a6,-2
8000a708:	00d787b3          	add	a5,a5,a3
8000a70c:	010e1e13          	slli	t3,t3,0x10
8000a710:	41d787b3          	sub	a5,a5,t4
8000a714:	00010eb7          	lui	t4,0x10
8000a718:	00ee6733          	or	a4,t3,a4
8000a71c:	fffe8813          	addi	a6,t4,-1 # ffff <buflen.2800+0xff7b>
8000a720:	01077333          	and	t1,a4,a6
8000a724:	01075893          	srli	a7,a4,0x10
8000a728:	01067833          	and	a6,a2,a6
8000a72c:	01065613          	srli	a2,a2,0x10
8000a730:	03030e33          	mul	t3,t1,a6
8000a734:	03088833          	mul	a6,a7,a6
8000a738:	010e5693          	srli	a3,t3,0x10
8000a73c:	02c30333          	mul	t1,t1,a2
8000a740:	01030333          	add	t1,t1,a6
8000a744:	006686b3          	add	a3,a3,t1
8000a748:	02c888b3          	mul	a7,a7,a2
8000a74c:	0106f463          	bleu	a6,a3,8000a754 <__udivdi3+0x3ec>
8000a750:	01d888b3          	add	a7,a7,t4
8000a754:	0106d613          	srli	a2,a3,0x10
8000a758:	011608b3          	add	a7,a2,a7
8000a75c:	0317e663          	bltu	a5,a7,8000a788 <__udivdi3+0x420>
8000a760:	cf179ae3          	bne	a5,a7,8000a454 <__udivdi3+0xec>
8000a764:	000107b7          	lui	a5,0x10
8000a768:	fff78793          	addi	a5,a5,-1 # ffff <buflen.2800+0xff7b>
8000a76c:	00f6f6b3          	and	a3,a3,a5
8000a770:	01069693          	slli	a3,a3,0x10
8000a774:	00fe7e33          	and	t3,t3,a5
8000a778:	00b51533          	sll	a0,a0,a1
8000a77c:	01c686b3          	add	a3,a3,t3
8000a780:	00000593          	li	a1,0
8000a784:	dad57ce3          	bleu	a3,a0,8000a53c <__udivdi3+0x1d4>
8000a788:	fff70713          	addi	a4,a4,-1
8000a78c:	cc9ff06f          	j	8000a454 <__udivdi3+0xec>
8000a790:	00000593          	li	a1,0
8000a794:	00000713          	li	a4,0
8000a798:	da5ff06f          	j	8000a53c <__udivdi3+0x1d4>

8000a79c <__umoddi3>:
8000a79c:	00060893          	mv	a7,a2
8000a7a0:	00068713          	mv	a4,a3
8000a7a4:	00050793          	mv	a5,a0
8000a7a8:	00058813          	mv	a6,a1
8000a7ac:	22069c63          	bnez	a3,8000a9e4 <__umoddi3+0x248>
8000a7b0:	8000d6b7          	lui	a3,0x8000d
8000a7b4:	dd868693          	addi	a3,a3,-552 # 8000cdd8 <__global_pointer$+0xffffeba8>
8000a7b8:	0cc5fc63          	bleu	a2,a1,8000a890 <__umoddi3+0xf4>
8000a7bc:	00010337          	lui	t1,0x10
8000a7c0:	0a667e63          	bleu	t1,a2,8000a87c <__umoddi3+0xe0>
8000a7c4:	0ff00313          	li	t1,255
8000a7c8:	00c37463          	bleu	a2,t1,8000a7d0 <__umoddi3+0x34>
8000a7cc:	00800713          	li	a4,8
8000a7d0:	00e65333          	srl	t1,a2,a4
8000a7d4:	006686b3          	add	a3,a3,t1
8000a7d8:	0006ce03          	lbu	t3,0(a3)
8000a7dc:	02000313          	li	t1,32
8000a7e0:	00ee0e33          	add	t3,t3,a4
8000a7e4:	41c30333          	sub	t1,t1,t3
8000a7e8:	00030c63          	beqz	t1,8000a800 <__umoddi3+0x64>
8000a7ec:	006595b3          	sll	a1,a1,t1
8000a7f0:	01c55e33          	srl	t3,a0,t3
8000a7f4:	006618b3          	sll	a7,a2,t1
8000a7f8:	00be6833          	or	a6,t3,a1
8000a7fc:	006517b3          	sll	a5,a0,t1
8000a800:	0108d613          	srli	a2,a7,0x10
8000a804:	02c87733          	remu	a4,a6,a2
8000a808:	01089513          	slli	a0,a7,0x10
8000a80c:	01055513          	srli	a0,a0,0x10
8000a810:	0107d693          	srli	a3,a5,0x10
8000a814:	02c85833          	divu	a6,a6,a2
8000a818:	01071713          	slli	a4,a4,0x10
8000a81c:	00d766b3          	or	a3,a4,a3
8000a820:	03050833          	mul	a6,a0,a6
8000a824:	0106fa63          	bleu	a6,a3,8000a838 <__umoddi3+0x9c>
8000a828:	011686b3          	add	a3,a3,a7
8000a82c:	0116e663          	bltu	a3,a7,8000a838 <__umoddi3+0x9c>
8000a830:	0106f463          	bleu	a6,a3,8000a838 <__umoddi3+0x9c>
8000a834:	011686b3          	add	a3,a3,a7
8000a838:	410686b3          	sub	a3,a3,a6
8000a83c:	02c6f733          	remu	a4,a3,a2
8000a840:	01079793          	slli	a5,a5,0x10
8000a844:	0107d793          	srli	a5,a5,0x10
8000a848:	02c6d6b3          	divu	a3,a3,a2
8000a84c:	02d506b3          	mul	a3,a0,a3
8000a850:	01071513          	slli	a0,a4,0x10
8000a854:	00f567b3          	or	a5,a0,a5
8000a858:	00d7fa63          	bleu	a3,a5,8000a86c <__umoddi3+0xd0>
8000a85c:	011787b3          	add	a5,a5,a7
8000a860:	0117e663          	bltu	a5,a7,8000a86c <__umoddi3+0xd0>
8000a864:	00d7f463          	bleu	a3,a5,8000a86c <__umoddi3+0xd0>
8000a868:	011787b3          	add	a5,a5,a7
8000a86c:	40d787b3          	sub	a5,a5,a3
8000a870:	0067d533          	srl	a0,a5,t1
8000a874:	00000593          	li	a1,0
8000a878:	00008067          	ret
8000a87c:	01000337          	lui	t1,0x1000
8000a880:	01000713          	li	a4,16
8000a884:	f46666e3          	bltu	a2,t1,8000a7d0 <__umoddi3+0x34>
8000a888:	01800713          	li	a4,24
8000a88c:	f45ff06f          	j	8000a7d0 <__umoddi3+0x34>
8000a890:	00061663          	bnez	a2,8000a89c <__umoddi3+0x100>
8000a894:	00100613          	li	a2,1
8000a898:	031658b3          	divu	a7,a2,a7
8000a89c:	00010637          	lui	a2,0x10
8000a8a0:	0ac8f263          	bleu	a2,a7,8000a944 <__umoddi3+0x1a8>
8000a8a4:	0ff00613          	li	a2,255
8000a8a8:	01167463          	bleu	a7,a2,8000a8b0 <__umoddi3+0x114>
8000a8ac:	00800713          	li	a4,8
8000a8b0:	00e8d633          	srl	a2,a7,a4
8000a8b4:	00c686b3          	add	a3,a3,a2
8000a8b8:	0006ce03          	lbu	t3,0(a3)
8000a8bc:	02000313          	li	t1,32
8000a8c0:	00ee0e33          	add	t3,t3,a4
8000a8c4:	41c30333          	sub	t1,t1,t3
8000a8c8:	08031863          	bnez	t1,8000a958 <__umoddi3+0x1bc>
8000a8cc:	411585b3          	sub	a1,a1,a7
8000a8d0:	0108d713          	srli	a4,a7,0x10
8000a8d4:	01089513          	slli	a0,a7,0x10
8000a8d8:	01055513          	srli	a0,a0,0x10
8000a8dc:	0107d613          	srli	a2,a5,0x10
8000a8e0:	02e5f6b3          	remu	a3,a1,a4
8000a8e4:	02e5d5b3          	divu	a1,a1,a4
8000a8e8:	01069693          	slli	a3,a3,0x10
8000a8ec:	00c6e6b3          	or	a3,a3,a2
8000a8f0:	02b505b3          	mul	a1,a0,a1
8000a8f4:	00b6fa63          	bleu	a1,a3,8000a908 <__umoddi3+0x16c>
8000a8f8:	011686b3          	add	a3,a3,a7
8000a8fc:	0116e663          	bltu	a3,a7,8000a908 <__umoddi3+0x16c>
8000a900:	00b6f463          	bleu	a1,a3,8000a908 <__umoddi3+0x16c>
8000a904:	011686b3          	add	a3,a3,a7
8000a908:	40b685b3          	sub	a1,a3,a1
8000a90c:	02e5f6b3          	remu	a3,a1,a4
8000a910:	01079793          	slli	a5,a5,0x10
8000a914:	0107d793          	srli	a5,a5,0x10
8000a918:	02e5d5b3          	divu	a1,a1,a4
8000a91c:	02b505b3          	mul	a1,a0,a1
8000a920:	01069513          	slli	a0,a3,0x10
8000a924:	00f567b3          	or	a5,a0,a5
8000a928:	00b7fa63          	bleu	a1,a5,8000a93c <__umoddi3+0x1a0>
8000a92c:	011787b3          	add	a5,a5,a7
8000a930:	0117e663          	bltu	a5,a7,8000a93c <__umoddi3+0x1a0>
8000a934:	00b7f463          	bleu	a1,a5,8000a93c <__umoddi3+0x1a0>
8000a938:	011787b3          	add	a5,a5,a7
8000a93c:	40b787b3          	sub	a5,a5,a1
8000a940:	f31ff06f          	j	8000a870 <__umoddi3+0xd4>
8000a944:	01000637          	lui	a2,0x1000
8000a948:	01000713          	li	a4,16
8000a94c:	f6c8e2e3          	bltu	a7,a2,8000a8b0 <__umoddi3+0x114>
8000a950:	01800713          	li	a4,24
8000a954:	f5dff06f          	j	8000a8b0 <__umoddi3+0x114>
8000a958:	006898b3          	sll	a7,a7,t1
8000a95c:	01c5d733          	srl	a4,a1,t3
8000a960:	006517b3          	sll	a5,a0,t1
8000a964:	01c55e33          	srl	t3,a0,t3
8000a968:	0108d513          	srli	a0,a7,0x10
8000a96c:	02a776b3          	remu	a3,a4,a0
8000a970:	006595b3          	sll	a1,a1,t1
8000a974:	00be6e33          	or	t3,t3,a1
8000a978:	01089593          	slli	a1,a7,0x10
8000a97c:	0105d593          	srli	a1,a1,0x10
8000a980:	010e5613          	srli	a2,t3,0x10
8000a984:	02a75733          	divu	a4,a4,a0
8000a988:	01069693          	slli	a3,a3,0x10
8000a98c:	00c6e6b3          	or	a3,a3,a2
8000a990:	02e58733          	mul	a4,a1,a4
8000a994:	00e6fa63          	bleu	a4,a3,8000a9a8 <__umoddi3+0x20c>
8000a998:	011686b3          	add	a3,a3,a7
8000a99c:	0116e663          	bltu	a3,a7,8000a9a8 <__umoddi3+0x20c>
8000a9a0:	00e6f463          	bleu	a4,a3,8000a9a8 <__umoddi3+0x20c>
8000a9a4:	011686b3          	add	a3,a3,a7
8000a9a8:	40e68633          	sub	a2,a3,a4
8000a9ac:	02a676b3          	remu	a3,a2,a0
8000a9b0:	010e1e13          	slli	t3,t3,0x10
8000a9b4:	010e5e13          	srli	t3,t3,0x10
8000a9b8:	02a65633          	divu	a2,a2,a0
8000a9bc:	01069693          	slli	a3,a3,0x10
8000a9c0:	02c58633          	mul	a2,a1,a2
8000a9c4:	01c6e5b3          	or	a1,a3,t3
8000a9c8:	00c5fa63          	bleu	a2,a1,8000a9dc <__umoddi3+0x240>
8000a9cc:	011585b3          	add	a1,a1,a7
8000a9d0:	0115e663          	bltu	a1,a7,8000a9dc <__umoddi3+0x240>
8000a9d4:	00c5f463          	bleu	a2,a1,8000a9dc <__umoddi3+0x240>
8000a9d8:	011585b3          	add	a1,a1,a7
8000a9dc:	40c585b3          	sub	a1,a1,a2
8000a9e0:	ef1ff06f          	j	8000a8d0 <__umoddi3+0x134>
8000a9e4:	e8d5eae3          	bltu	a1,a3,8000a878 <__umoddi3+0xdc>
8000a9e8:	00010737          	lui	a4,0x10
8000a9ec:	04e6fc63          	bleu	a4,a3,8000aa44 <__umoddi3+0x2a8>
8000a9f0:	0ff00e93          	li	t4,255
8000a9f4:	00deb733          	sltu	a4,t4,a3
8000a9f8:	00371713          	slli	a4,a4,0x3
8000a9fc:	8000d337          	lui	t1,0x8000d
8000aa00:	00e6d8b3          	srl	a7,a3,a4
8000aa04:	dd830313          	addi	t1,t1,-552 # 8000cdd8 <__global_pointer$+0xffffeba8>
8000aa08:	006888b3          	add	a7,a7,t1
8000aa0c:	0008ce83          	lbu	t4,0(a7) # 1000000 <buflen.2800+0xffff7c>
8000aa10:	02000e13          	li	t3,32
8000aa14:	00ee8eb3          	add	t4,t4,a4
8000aa18:	41de0e33          	sub	t3,t3,t4
8000aa1c:	020e1e63          	bnez	t3,8000aa58 <__umoddi3+0x2bc>
8000aa20:	00b6e463          	bltu	a3,a1,8000aa28 <__umoddi3+0x28c>
8000aa24:	00c56a63          	bltu	a0,a2,8000aa38 <__umoddi3+0x29c>
8000aa28:	40c507b3          	sub	a5,a0,a2
8000aa2c:	40d585b3          	sub	a1,a1,a3
8000aa30:	00f53533          	sltu	a0,a0,a5
8000aa34:	40a58833          	sub	a6,a1,a0
8000aa38:	00078513          	mv	a0,a5
8000aa3c:	00080593          	mv	a1,a6
8000aa40:	e39ff06f          	j	8000a878 <__umoddi3+0xdc>
8000aa44:	010008b7          	lui	a7,0x1000
8000aa48:	01000713          	li	a4,16
8000aa4c:	fb16e8e3          	bltu	a3,a7,8000a9fc <__umoddi3+0x260>
8000aa50:	01800713          	li	a4,24
8000aa54:	fa9ff06f          	j	8000a9fc <__umoddi3+0x260>
8000aa58:	01d65733          	srl	a4,a2,t4
8000aa5c:	01c696b3          	sll	a3,a3,t3
8000aa60:	00d766b3          	or	a3,a4,a3
8000aa64:	01d557b3          	srl	a5,a0,t4
8000aa68:	01d5d733          	srl	a4,a1,t4
8000aa6c:	01c595b3          	sll	a1,a1,t3
8000aa70:	00b7e7b3          	or	a5,a5,a1
8000aa74:	0106d593          	srli	a1,a3,0x10
8000aa78:	02b77333          	remu	t1,a4,a1
8000aa7c:	01069f13          	slli	t5,a3,0x10
8000aa80:	010f5f13          	srli	t5,t5,0x10
8000aa84:	0107d893          	srli	a7,a5,0x10
8000aa88:	01c61633          	sll	a2,a2,t3
8000aa8c:	01c51533          	sll	a0,a0,t3
8000aa90:	02b75733          	divu	a4,a4,a1
8000aa94:	01031313          	slli	t1,t1,0x10
8000aa98:	011368b3          	or	a7,t1,a7
8000aa9c:	02ef0833          	mul	a6,t5,a4
8000aaa0:	00070313          	mv	t1,a4
8000aaa4:	0108fe63          	bleu	a6,a7,8000aac0 <__umoddi3+0x324>
8000aaa8:	00d888b3          	add	a7,a7,a3
8000aaac:	fff70313          	addi	t1,a4,-1 # ffff <buflen.2800+0xff7b>
8000aab0:	00d8e863          	bltu	a7,a3,8000aac0 <__umoddi3+0x324>
8000aab4:	0108f663          	bleu	a6,a7,8000aac0 <__umoddi3+0x324>
8000aab8:	ffe70313          	addi	t1,a4,-2
8000aabc:	00d888b3          	add	a7,a7,a3
8000aac0:	410888b3          	sub	a7,a7,a6
8000aac4:	02b8ffb3          	remu	t6,a7,a1
8000aac8:	02b8d8b3          	divu	a7,a7,a1
8000aacc:	010f9f93          	slli	t6,t6,0x10
8000aad0:	031f05b3          	mul	a1,t5,a7
8000aad4:	01079f13          	slli	t5,a5,0x10
8000aad8:	010f5f13          	srli	t5,t5,0x10
8000aadc:	01efef33          	or	t5,t6,t5
8000aae0:	00088713          	mv	a4,a7
8000aae4:	00bf7e63          	bleu	a1,t5,8000ab00 <__umoddi3+0x364>
8000aae8:	00df0f33          	add	t5,t5,a3
8000aaec:	fff88713          	addi	a4,a7,-1 # ffffff <buflen.2800+0xffff7b>
8000aaf0:	00df6863          	bltu	t5,a3,8000ab00 <__umoddi3+0x364>
8000aaf4:	00bf7663          	bleu	a1,t5,8000ab00 <__umoddi3+0x364>
8000aaf8:	ffe88713          	addi	a4,a7,-2
8000aafc:	00df0f33          	add	t5,t5,a3
8000ab00:	01031313          	slli	t1,t1,0x10
8000ab04:	000108b7          	lui	a7,0x10
8000ab08:	00e36333          	or	t1,t1,a4
8000ab0c:	fff88793          	addi	a5,a7,-1 # ffff <buflen.2800+0xff7b>
8000ab10:	01065813          	srli	a6,a2,0x10
8000ab14:	40bf0f33          	sub	t5,t5,a1
8000ab18:	00f375b3          	and	a1,t1,a5
8000ab1c:	01035313          	srli	t1,t1,0x10
8000ab20:	00f677b3          	and	a5,a2,a5
8000ab24:	02f58733          	mul	a4,a1,a5
8000ab28:	02f307b3          	mul	a5,t1,a5
8000ab2c:	030585b3          	mul	a1,a1,a6
8000ab30:	03030333          	mul	t1,t1,a6
8000ab34:	00f585b3          	add	a1,a1,a5
8000ab38:	01075813          	srli	a6,a4,0x10
8000ab3c:	00b80833          	add	a6,a6,a1
8000ab40:	00f87463          	bleu	a5,a6,8000ab48 <__umoddi3+0x3ac>
8000ab44:	01130333          	add	t1,t1,a7
8000ab48:	000107b7          	lui	a5,0x10
8000ab4c:	fff78793          	addi	a5,a5,-1 # ffff <buflen.2800+0xff7b>
8000ab50:	01085593          	srli	a1,a6,0x10
8000ab54:	00f87833          	and	a6,a6,a5
8000ab58:	01081813          	slli	a6,a6,0x10
8000ab5c:	00f77733          	and	a4,a4,a5
8000ab60:	006585b3          	add	a1,a1,t1
8000ab64:	00e80733          	add	a4,a6,a4
8000ab68:	00bf6663          	bltu	t5,a1,8000ab74 <__umoddi3+0x3d8>
8000ab6c:	00bf1e63          	bne	t5,a1,8000ab88 <__umoddi3+0x3ec>
8000ab70:	00e57c63          	bleu	a4,a0,8000ab88 <__umoddi3+0x3ec>
8000ab74:	40c70633          	sub	a2,a4,a2
8000ab78:	00c73733          	sltu	a4,a4,a2
8000ab7c:	40d585b3          	sub	a1,a1,a3
8000ab80:	40e585b3          	sub	a1,a1,a4
8000ab84:	00060713          	mv	a4,a2
8000ab88:	40e50733          	sub	a4,a0,a4
8000ab8c:	00e53533          	sltu	a0,a0,a4
8000ab90:	40bf05b3          	sub	a1,t5,a1
8000ab94:	40a585b3          	sub	a1,a1,a0
8000ab98:	01d597b3          	sll	a5,a1,t4
8000ab9c:	01c75733          	srl	a4,a4,t3
8000aba0:	00e7e533          	or	a0,a5,a4
8000aba4:	01c5d5b3          	srl	a1,a1,t3
8000aba8:	cd1ff06f          	j	8000a878 <__umoddi3+0xdc>

8000abac <__eqdf2>:
8000abac:	0145d713          	srli	a4,a1,0x14
8000abb0:	001007b7          	lui	a5,0x100
8000abb4:	fff78793          	addi	a5,a5,-1 # fffff <buflen.2800+0xfff7b>
8000abb8:	0146d813          	srli	a6,a3,0x14
8000abbc:	00050313          	mv	t1,a0
8000abc0:	00050e93          	mv	t4,a0
8000abc4:	7ff77713          	andi	a4,a4,2047
8000abc8:	7ff00513          	li	a0,2047
8000abcc:	00b7f8b3          	and	a7,a5,a1
8000abd0:	00060f13          	mv	t5,a2
8000abd4:	00d7f7b3          	and	a5,a5,a3
8000abd8:	01f5d593          	srli	a1,a1,0x1f
8000abdc:	7ff87813          	andi	a6,a6,2047
8000abe0:	01f6d693          	srli	a3,a3,0x1f
8000abe4:	00a71c63          	bne	a4,a0,8000abfc <__eqdf2+0x50>
8000abe8:	0068ee33          	or	t3,a7,t1
8000abec:	00100513          	li	a0,1
8000abf0:	000e1463          	bnez	t3,8000abf8 <__eqdf2+0x4c>
8000abf4:	00e80663          	beq	a6,a4,8000ac00 <__eqdf2+0x54>
8000abf8:	00008067          	ret
8000abfc:	00a81863          	bne	a6,a0,8000ac0c <__eqdf2+0x60>
8000ac00:	00c7e633          	or	a2,a5,a2
8000ac04:	00100513          	li	a0,1
8000ac08:	fe0618e3          	bnez	a2,8000abf8 <__eqdf2+0x4c>
8000ac0c:	00100513          	li	a0,1
8000ac10:	ff0714e3          	bne	a4,a6,8000abf8 <__eqdf2+0x4c>
8000ac14:	fef892e3          	bne	a7,a5,8000abf8 <__eqdf2+0x4c>
8000ac18:	ffee90e3          	bne	t4,t5,8000abf8 <__eqdf2+0x4c>
8000ac1c:	00d58a63          	beq	a1,a3,8000ac30 <__eqdf2+0x84>
8000ac20:	fc071ce3          	bnez	a4,8000abf8 <__eqdf2+0x4c>
8000ac24:	0068e533          	or	a0,a7,t1
8000ac28:	00a03533          	snez	a0,a0
8000ac2c:	00008067          	ret
8000ac30:	00000513          	li	a0,0
8000ac34:	00008067          	ret

8000ac38 <__mulsf3>:
8000ac38:	fe010113          	addi	sp,sp,-32
8000ac3c:	00912a23          	sw	s1,20(sp)
8000ac40:	01212823          	sw	s2,16(sp)
8000ac44:	008004b7          	lui	s1,0x800
8000ac48:	01755913          	srli	s2,a0,0x17
8000ac4c:	01312623          	sw	s3,12(sp)
8000ac50:	01512223          	sw	s5,4(sp)
8000ac54:	fff48493          	addi	s1,s1,-1 # 7fffff <buflen.2800+0x7fff7b>
8000ac58:	00112e23          	sw	ra,28(sp)
8000ac5c:	00812c23          	sw	s0,24(sp)
8000ac60:	01412423          	sw	s4,8(sp)
8000ac64:	0ff97913          	andi	s2,s2,255
8000ac68:	00058a93          	mv	s5,a1
8000ac6c:	00a4f4b3          	and	s1,s1,a0
8000ac70:	01f55993          	srli	s3,a0,0x1f
8000ac74:	08090863          	beqz	s2,8000ad04 <__mulsf3+0xcc>
8000ac78:	0ff00793          	li	a5,255
8000ac7c:	0af90463          	beq	s2,a5,8000ad24 <__mulsf3+0xec>
8000ac80:	00349493          	slli	s1,s1,0x3
8000ac84:	040007b7          	lui	a5,0x4000
8000ac88:	00f4e4b3          	or	s1,s1,a5
8000ac8c:	f8190913          	addi	s2,s2,-127
8000ac90:	00000a13          	li	s4,0
8000ac94:	017ad513          	srli	a0,s5,0x17
8000ac98:	00800437          	lui	s0,0x800
8000ac9c:	fff40413          	addi	s0,s0,-1 # 7fffff <buflen.2800+0x7fff7b>
8000aca0:	0ff57513          	andi	a0,a0,255
8000aca4:	01547433          	and	s0,s0,s5
8000aca8:	01fada93          	srli	s5,s5,0x1f
8000acac:	08050c63          	beqz	a0,8000ad44 <__mulsf3+0x10c>
8000acb0:	0ff00793          	li	a5,255
8000acb4:	0af50863          	beq	a0,a5,8000ad64 <__mulsf3+0x12c>
8000acb8:	00341413          	slli	s0,s0,0x3
8000acbc:	040007b7          	lui	a5,0x4000
8000acc0:	00f46433          	or	s0,s0,a5
8000acc4:	f8150513          	addi	a0,a0,-127
8000acc8:	00000693          	li	a3,0
8000accc:	002a1793          	slli	a5,s4,0x2
8000acd0:	00d7e7b3          	or	a5,a5,a3
8000acd4:	00a90533          	add	a0,s2,a0
8000acd8:	fff78793          	addi	a5,a5,-1 # 3ffffff <buflen.2800+0x3ffff7b>
8000acdc:	00e00713          	li	a4,14
8000ace0:	0159c633          	xor	a2,s3,s5
8000ace4:	00150813          	addi	a6,a0,1
8000ace8:	08f76e63          	bltu	a4,a5,8000ad84 <__mulsf3+0x14c>
8000acec:	8000d737          	lui	a4,0x8000d
8000acf0:	00279793          	slli	a5,a5,0x2
8000acf4:	d9c70713          	addi	a4,a4,-612 # 8000cd9c <__global_pointer$+0xffffeb6c>
8000acf8:	00e787b3          	add	a5,a5,a4
8000acfc:	0007a783          	lw	a5,0(a5)
8000ad00:	00078067          	jr	a5
8000ad04:	02048a63          	beqz	s1,8000ad38 <__mulsf3+0x100>
8000ad08:	00048513          	mv	a0,s1
8000ad0c:	3a8000ef          	jal	ra,8000b0b4 <__clzsi2>
8000ad10:	ffb50793          	addi	a5,a0,-5
8000ad14:	f8a00913          	li	s2,-118
8000ad18:	00f494b3          	sll	s1,s1,a5
8000ad1c:	40a90933          	sub	s2,s2,a0
8000ad20:	f71ff06f          	j	8000ac90 <__mulsf3+0x58>
8000ad24:	0ff00913          	li	s2,255
8000ad28:	00200a13          	li	s4,2
8000ad2c:	f60484e3          	beqz	s1,8000ac94 <__mulsf3+0x5c>
8000ad30:	00300a13          	li	s4,3
8000ad34:	f61ff06f          	j	8000ac94 <__mulsf3+0x5c>
8000ad38:	00000913          	li	s2,0
8000ad3c:	00100a13          	li	s4,1
8000ad40:	f55ff06f          	j	8000ac94 <__mulsf3+0x5c>
8000ad44:	02040a63          	beqz	s0,8000ad78 <__mulsf3+0x140>
8000ad48:	00040513          	mv	a0,s0
8000ad4c:	368000ef          	jal	ra,8000b0b4 <__clzsi2>
8000ad50:	ffb50793          	addi	a5,a0,-5
8000ad54:	00f41433          	sll	s0,s0,a5
8000ad58:	f8a00793          	li	a5,-118
8000ad5c:	40a78533          	sub	a0,a5,a0
8000ad60:	f69ff06f          	j	8000acc8 <__mulsf3+0x90>
8000ad64:	0ff00513          	li	a0,255
8000ad68:	00200693          	li	a3,2
8000ad6c:	f60400e3          	beqz	s0,8000accc <__mulsf3+0x94>
8000ad70:	00300693          	li	a3,3
8000ad74:	f59ff06f          	j	8000accc <__mulsf3+0x94>
8000ad78:	00000513          	li	a0,0
8000ad7c:	00100693          	li	a3,1
8000ad80:	f4dff06f          	j	8000accc <__mulsf3+0x94>
8000ad84:	000107b7          	lui	a5,0x10
8000ad88:	fff78313          	addi	t1,a5,-1 # ffff <buflen.2800+0xff7b>
8000ad8c:	0104d713          	srli	a4,s1,0x10
8000ad90:	01045693          	srli	a3,s0,0x10
8000ad94:	0064f4b3          	and	s1,s1,t1
8000ad98:	00647433          	and	s0,s0,t1
8000ad9c:	028488b3          	mul	a7,s1,s0
8000ada0:	028705b3          	mul	a1,a4,s0
8000ada4:	02d70433          	mul	s0,a4,a3
8000ada8:	029686b3          	mul	a3,a3,s1
8000adac:	0108d493          	srli	s1,a7,0x10
8000adb0:	00b686b3          	add	a3,a3,a1
8000adb4:	00d484b3          	add	s1,s1,a3
8000adb8:	00b4f463          	bleu	a1,s1,8000adc0 <__mulsf3+0x188>
8000adbc:	00f40433          	add	s0,s0,a5
8000adc0:	0064f7b3          	and	a5,s1,t1
8000adc4:	01079793          	slli	a5,a5,0x10
8000adc8:	0068f8b3          	and	a7,a7,t1
8000adcc:	011787b3          	add	a5,a5,a7
8000add0:	00679713          	slli	a4,a5,0x6
8000add4:	0104d493          	srli	s1,s1,0x10
8000add8:	00e03733          	snez	a4,a4
8000addc:	01a7d793          	srli	a5,a5,0x1a
8000ade0:	00848433          	add	s0,s1,s0
8000ade4:	00f767b3          	or	a5,a4,a5
8000ade8:	00641413          	slli	s0,s0,0x6
8000adec:	00f46433          	or	s0,s0,a5
8000adf0:	00441793          	slli	a5,s0,0x4
8000adf4:	0c07de63          	bgez	a5,8000aed0 <__mulsf3+0x298>
8000adf8:	00145793          	srli	a5,s0,0x1
8000adfc:	00147413          	andi	s0,s0,1
8000ae00:	0087e433          	or	s0,a5,s0
8000ae04:	07f80713          	addi	a4,a6,127
8000ae08:	0ce05863          	blez	a4,8000aed8 <__mulsf3+0x2a0>
8000ae0c:	00747793          	andi	a5,s0,7
8000ae10:	00078a63          	beqz	a5,8000ae24 <__mulsf3+0x1ec>
8000ae14:	00f47793          	andi	a5,s0,15
8000ae18:	00400693          	li	a3,4
8000ae1c:	00d78463          	beq	a5,a3,8000ae24 <__mulsf3+0x1ec>
8000ae20:	00440413          	addi	s0,s0,4
8000ae24:	00441793          	slli	a5,s0,0x4
8000ae28:	0007da63          	bgez	a5,8000ae3c <__mulsf3+0x204>
8000ae2c:	f80007b7          	lui	a5,0xf8000
8000ae30:	fff78793          	addi	a5,a5,-1 # f7ffffff <__global_pointer$+0x77ff1dcf>
8000ae34:	00f47433          	and	s0,s0,a5
8000ae38:	08080713          	addi	a4,a6,128
8000ae3c:	0fe00793          	li	a5,254
8000ae40:	0ee7cc63          	blt	a5,a4,8000af38 <__mulsf3+0x300>
8000ae44:	00345793          	srli	a5,s0,0x3
8000ae48:	0300006f          	j	8000ae78 <__mulsf3+0x240>
8000ae4c:	00098613          	mv	a2,s3
8000ae50:	00048413          	mv	s0,s1
8000ae54:	000a0693          	mv	a3,s4
8000ae58:	00200793          	li	a5,2
8000ae5c:	0cf68e63          	beq	a3,a5,8000af38 <__mulsf3+0x300>
8000ae60:	00300793          	li	a5,3
8000ae64:	0cf68263          	beq	a3,a5,8000af28 <__mulsf3+0x2f0>
8000ae68:	00100593          	li	a1,1
8000ae6c:	00000793          	li	a5,0
8000ae70:	00000713          	li	a4,0
8000ae74:	f8b698e3          	bne	a3,a1,8000ae04 <__mulsf3+0x1cc>
8000ae78:	00800437          	lui	s0,0x800
8000ae7c:	fff40413          	addi	s0,s0,-1 # 7fffff <buflen.2800+0x7fff7b>
8000ae80:	80800537          	lui	a0,0x80800
8000ae84:	0087f7b3          	and	a5,a5,s0
8000ae88:	fff50513          	addi	a0,a0,-1 # 807fffff <__global_pointer$+0x7f1dcf>
8000ae8c:	01c12083          	lw	ra,28(sp)
8000ae90:	01812403          	lw	s0,24(sp)
8000ae94:	0ff77713          	andi	a4,a4,255
8000ae98:	00a7f7b3          	and	a5,a5,a0
8000ae9c:	01771713          	slli	a4,a4,0x17
8000aea0:	01f61513          	slli	a0,a2,0x1f
8000aea4:	00e7e7b3          	or	a5,a5,a4
8000aea8:	01412483          	lw	s1,20(sp)
8000aeac:	01012903          	lw	s2,16(sp)
8000aeb0:	00c12983          	lw	s3,12(sp)
8000aeb4:	00812a03          	lw	s4,8(sp)
8000aeb8:	00412a83          	lw	s5,4(sp)
8000aebc:	00a7e533          	or	a0,a5,a0
8000aec0:	02010113          	addi	sp,sp,32
8000aec4:	00008067          	ret
8000aec8:	000a8613          	mv	a2,s5
8000aecc:	f8dff06f          	j	8000ae58 <__mulsf3+0x220>
8000aed0:	00050813          	mv	a6,a0
8000aed4:	f31ff06f          	j	8000ae04 <__mulsf3+0x1cc>
8000aed8:	00100793          	li	a5,1
8000aedc:	40e787b3          	sub	a5,a5,a4
8000aee0:	01b00713          	li	a4,27
8000aee4:	06f74063          	blt	a4,a5,8000af44 <__mulsf3+0x30c>
8000aee8:	09e80813          	addi	a6,a6,158
8000aeec:	00f457b3          	srl	a5,s0,a5
8000aef0:	01041433          	sll	s0,s0,a6
8000aef4:	00803433          	snez	s0,s0
8000aef8:	0087e433          	or	s0,a5,s0
8000aefc:	00747793          	andi	a5,s0,7
8000af00:	00078a63          	beqz	a5,8000af14 <__mulsf3+0x2dc>
8000af04:	00f47793          	andi	a5,s0,15
8000af08:	00400713          	li	a4,4
8000af0c:	00e78463          	beq	a5,a4,8000af14 <__mulsf3+0x2dc>
8000af10:	00440413          	addi	s0,s0,4
8000af14:	00541793          	slli	a5,s0,0x5
8000af18:	0207ca63          	bltz	a5,8000af4c <__mulsf3+0x314>
8000af1c:	00345793          	srli	a5,s0,0x3
8000af20:	00000713          	li	a4,0
8000af24:	f55ff06f          	j	8000ae78 <__mulsf3+0x240>
8000af28:	004007b7          	lui	a5,0x400
8000af2c:	0ff00713          	li	a4,255
8000af30:	00000613          	li	a2,0
8000af34:	f45ff06f          	j	8000ae78 <__mulsf3+0x240>
8000af38:	00000793          	li	a5,0
8000af3c:	0ff00713          	li	a4,255
8000af40:	f39ff06f          	j	8000ae78 <__mulsf3+0x240>
8000af44:	00000793          	li	a5,0
8000af48:	fd9ff06f          	j	8000af20 <__mulsf3+0x2e8>
8000af4c:	00000793          	li	a5,0
8000af50:	00100713          	li	a4,1
8000af54:	f25ff06f          	j	8000ae78 <__mulsf3+0x240>

8000af58 <__fixunssfsi>:
8000af58:	01755793          	srli	a5,a0,0x17
8000af5c:	00800637          	lui	a2,0x800
8000af60:	fff60693          	addi	a3,a2,-1 # 7fffff <buflen.2800+0x7fff7b>
8000af64:	0ff7f793          	andi	a5,a5,255
8000af68:	07e00593          	li	a1,126
8000af6c:	00a6f6b3          	and	a3,a3,a0
8000af70:	01f55713          	srli	a4,a0,0x1f
8000af74:	00000513          	li	a0,0
8000af78:	04f5f063          	bleu	a5,a1,8000afb8 <__fixunssfsi+0x60>
8000af7c:	00071863          	bnez	a4,8000af8c <__fixunssfsi+0x34>
8000af80:	09e00713          	li	a4,158
8000af84:	fff00513          	li	a0,-1
8000af88:	00f77463          	bleu	a5,a4,8000af90 <__fixunssfsi+0x38>
8000af8c:	00008067          	ret
8000af90:	09500713          	li	a4,149
8000af94:	00c6e533          	or	a0,a3,a2
8000af98:	00f75863          	ble	a5,a4,8000afa8 <__fixunssfsi+0x50>
8000af9c:	f6a78793          	addi	a5,a5,-150 # 3fff6a <buflen.2800+0x3ffee6>
8000afa0:	00f51533          	sll	a0,a0,a5
8000afa4:	00008067          	ret
8000afa8:	09600713          	li	a4,150
8000afac:	40f707b3          	sub	a5,a4,a5
8000afb0:	00f55533          	srl	a0,a0,a5
8000afb4:	00008067          	ret
8000afb8:	00008067          	ret

8000afbc <__floatunsisf>:
8000afbc:	ff010113          	addi	sp,sp,-16
8000afc0:	00812423          	sw	s0,8(sp)
8000afc4:	00112623          	sw	ra,12(sp)
8000afc8:	00050413          	mv	s0,a0
8000afcc:	00000793          	li	a5,0
8000afd0:	02050463          	beqz	a0,8000aff8 <__floatunsisf+0x3c>
8000afd4:	0e0000ef          	jal	ra,8000b0b4 <__clzsi2>
8000afd8:	09e00793          	li	a5,158
8000afdc:	40a787b3          	sub	a5,a5,a0
8000afe0:	09600713          	li	a4,150
8000afe4:	04f74a63          	blt	a4,a5,8000b038 <__floatunsisf+0x7c>
8000afe8:	00800713          	li	a4,8
8000afec:	00a75663          	ble	a0,a4,8000aff8 <__floatunsisf+0x3c>
8000aff0:	ff850513          	addi	a0,a0,-8
8000aff4:	00a41433          	sll	s0,s0,a0
8000aff8:	00800537          	lui	a0,0x800
8000affc:	fff50513          	addi	a0,a0,-1 # 7fffff <buflen.2800+0x7fff7b>
8000b000:	00a47433          	and	s0,s0,a0
8000b004:	80800537          	lui	a0,0x80800
8000b008:	fff50513          	addi	a0,a0,-1 # 807fffff <__global_pointer$+0x7f1dcf>
8000b00c:	0ff7f793          	andi	a5,a5,255
8000b010:	00a47433          	and	s0,s0,a0
8000b014:	01779793          	slli	a5,a5,0x17
8000b018:	80000537          	lui	a0,0x80000
8000b01c:	00f46433          	or	s0,s0,a5
8000b020:	fff54513          	not	a0,a0
8000b024:	00a47533          	and	a0,s0,a0
8000b028:	00c12083          	lw	ra,12(sp)
8000b02c:	00812403          	lw	s0,8(sp)
8000b030:	01010113          	addi	sp,sp,16
8000b034:	00008067          	ret
8000b038:	09900713          	li	a4,153
8000b03c:	02f75063          	ble	a5,a4,8000b05c <__floatunsisf+0xa0>
8000b040:	01b50713          	addi	a4,a0,27 # 8000001b <__global_pointer$+0xffff1deb>
8000b044:	00500693          	li	a3,5
8000b048:	00e41733          	sll	a4,s0,a4
8000b04c:	40a686b3          	sub	a3,a3,a0
8000b050:	00e03733          	snez	a4,a4
8000b054:	00d45433          	srl	s0,s0,a3
8000b058:	00876433          	or	s0,a4,s0
8000b05c:	00500713          	li	a4,5
8000b060:	00a75663          	ble	a0,a4,8000b06c <__floatunsisf+0xb0>
8000b064:	ffb50713          	addi	a4,a0,-5
8000b068:	00e41433          	sll	s0,s0,a4
8000b06c:	fc000737          	lui	a4,0xfc000
8000b070:	fff70713          	addi	a4,a4,-1 # fbffffff <__global_pointer$+0x7bff1dcf>
8000b074:	00747693          	andi	a3,s0,7
8000b078:	00e47733          	and	a4,s0,a4
8000b07c:	00068a63          	beqz	a3,8000b090 <__floatunsisf+0xd4>
8000b080:	00f47413          	andi	s0,s0,15
8000b084:	00400693          	li	a3,4
8000b088:	00d40463          	beq	s0,a3,8000b090 <__floatunsisf+0xd4>
8000b08c:	00470713          	addi	a4,a4,4
8000b090:	00571693          	slli	a3,a4,0x5
8000b094:	0006dc63          	bgez	a3,8000b0ac <__floatunsisf+0xf0>
8000b098:	fc0007b7          	lui	a5,0xfc000
8000b09c:	fff78793          	addi	a5,a5,-1 # fbffffff <__global_pointer$+0x7bff1dcf>
8000b0a0:	00f77733          	and	a4,a4,a5
8000b0a4:	09f00793          	li	a5,159
8000b0a8:	40a787b3          	sub	a5,a5,a0
8000b0ac:	00375413          	srli	s0,a4,0x3
8000b0b0:	f49ff06f          	j	8000aff8 <__floatunsisf+0x3c>

8000b0b4 <__clzsi2>:
8000b0b4:	000107b7          	lui	a5,0x10
8000b0b8:	02f57a63          	bleu	a5,a0,8000b0ec <__clzsi2+0x38>
8000b0bc:	0ff00793          	li	a5,255
8000b0c0:	00a7b7b3          	sltu	a5,a5,a0
8000b0c4:	00379793          	slli	a5,a5,0x3
8000b0c8:	02000713          	li	a4,32
8000b0cc:	40f70733          	sub	a4,a4,a5
8000b0d0:	00f557b3          	srl	a5,a0,a5
8000b0d4:	8000d537          	lui	a0,0x8000d
8000b0d8:	dd850513          	addi	a0,a0,-552 # 8000cdd8 <__global_pointer$+0xffffeba8>
8000b0dc:	00a787b3          	add	a5,a5,a0
8000b0e0:	0007c503          	lbu	a0,0(a5) # 10000 <buflen.2800+0xff7c>
8000b0e4:	40a70533          	sub	a0,a4,a0
8000b0e8:	00008067          	ret
8000b0ec:	01000737          	lui	a4,0x1000
8000b0f0:	01000793          	li	a5,16
8000b0f4:	fce56ae3          	bltu	a0,a4,8000b0c8 <__clzsi2+0x14>
8000b0f8:	01800793          	li	a5,24
8000b0fc:	fcdff06f          	j	8000b0c8 <__clzsi2+0x14>

8000b100 <atoi>:
8000b100:	00a00613          	li	a2,10
8000b104:	00000593          	li	a1,0
8000b108:	7150006f          	j	8000c01c <strtol>

8000b10c <_atoi_r>:
8000b10c:	00a00693          	li	a3,10
8000b110:	00000613          	li	a2,0
8000b114:	6d90006f          	j	8000bfec <_strtol_r>

8000b118 <atoll>:
8000b118:	00a00613          	li	a2,10
8000b11c:	00000593          	li	a1,0
8000b120:	1bc0106f          	j	8000c2dc <strtoll>

8000b124 <_atoll_r>:
8000b124:	00a00693          	li	a3,10
8000b128:	00000613          	li	a2,0
8000b12c:	1800106f          	j	8000c2ac <_strtoll_r>

8000b130 <calloc>:
8000b130:	00058613          	mv	a2,a1
8000b134:	00050593          	mv	a1,a0
8000b138:	8341a503          	lw	a0,-1996(gp) # 8000da64 <_impure_ptr>
8000b13c:	0040006f          	j	8000b140 <_calloc_r>

8000b140 <_calloc_r>:
8000b140:	02c585b3          	mul	a1,a1,a2
8000b144:	ff010113          	addi	sp,sp,-16
8000b148:	00812423          	sw	s0,8(sp)
8000b14c:	00112623          	sw	ra,12(sp)
8000b150:	0a4000ef          	jal	ra,8000b1f4 <_malloc_r>
8000b154:	00050413          	mv	s0,a0
8000b158:	04050263          	beqz	a0,8000b19c <_calloc_r+0x5c>
8000b15c:	ffc52603          	lw	a2,-4(a0)
8000b160:	02400713          	li	a4,36
8000b164:	ffc67613          	andi	a2,a2,-4
8000b168:	ffc60613          	addi	a2,a2,-4
8000b16c:	06c76263          	bltu	a4,a2,8000b1d0 <_calloc_r+0x90>
8000b170:	01300693          	li	a3,19
8000b174:	00050793          	mv	a5,a0
8000b178:	00c6fc63          	bleu	a2,a3,8000b190 <_calloc_r+0x50>
8000b17c:	00052023          	sw	zero,0(a0)
8000b180:	00052223          	sw	zero,4(a0)
8000b184:	01b00793          	li	a5,27
8000b188:	02c7e463          	bltu	a5,a2,8000b1b0 <_calloc_r+0x70>
8000b18c:	00850793          	addi	a5,a0,8
8000b190:	0007a023          	sw	zero,0(a5)
8000b194:	0007a223          	sw	zero,4(a5)
8000b198:	0007a423          	sw	zero,8(a5)
8000b19c:	00040513          	mv	a0,s0
8000b1a0:	00c12083          	lw	ra,12(sp)
8000b1a4:	00812403          	lw	s0,8(sp)
8000b1a8:	01010113          	addi	sp,sp,16
8000b1ac:	00008067          	ret
8000b1b0:	00052423          	sw	zero,8(a0)
8000b1b4:	00052623          	sw	zero,12(a0)
8000b1b8:	01050793          	addi	a5,a0,16
8000b1bc:	fce61ae3          	bne	a2,a4,8000b190 <_calloc_r+0x50>
8000b1c0:	00052823          	sw	zero,16(a0)
8000b1c4:	01850793          	addi	a5,a0,24
8000b1c8:	00052a23          	sw	zero,20(a0)
8000b1cc:	fc5ff06f          	j	8000b190 <_calloc_r+0x50>
8000b1d0:	00000593          	li	a1,0
8000b1d4:	d10fe0ef          	jal	ra,800096e4 <memset>
8000b1d8:	fc5ff06f          	j	8000b19c <_calloc_r+0x5c>

8000b1dc <malloc>:
8000b1dc:	00050593          	mv	a1,a0
8000b1e0:	8341a503          	lw	a0,-1996(gp) # 8000da64 <_impure_ptr>
8000b1e4:	0100006f          	j	8000b1f4 <_malloc_r>

8000b1e8 <free>:
8000b1e8:	00050593          	mv	a1,a0
8000b1ec:	8341a503          	lw	a0,-1996(gp) # 8000da64 <_impure_ptr>
8000b1f0:	2240106f          	j	8000c414 <_free_r>

8000b1f4 <_malloc_r>:
8000b1f4:	fd010113          	addi	sp,sp,-48
8000b1f8:	02112623          	sw	ra,44(sp)
8000b1fc:	02812423          	sw	s0,40(sp)
8000b200:	02912223          	sw	s1,36(sp)
8000b204:	03212023          	sw	s2,32(sp)
8000b208:	01312e23          	sw	s3,28(sp)
8000b20c:	01412c23          	sw	s4,24(sp)
8000b210:	01512a23          	sw	s5,20(sp)
8000b214:	01612823          	sw	s6,16(sp)
8000b218:	01712623          	sw	s7,12(sp)
8000b21c:	01812423          	sw	s8,8(sp)
8000b220:	00b58793          	addi	a5,a1,11 # 100000b <buflen.2800+0xffff87>
8000b224:	01600713          	li	a4,22
8000b228:	04f77463          	bleu	a5,a4,8000b270 <_malloc_r+0x7c>
8000b22c:	ff87f493          	andi	s1,a5,-8
8000b230:	0404d263          	bgez	s1,8000b274 <_malloc_r+0x80>
8000b234:	00c00793          	li	a5,12
8000b238:	00f52023          	sw	a5,0(a0)
8000b23c:	00000513          	li	a0,0
8000b240:	02c12083          	lw	ra,44(sp)
8000b244:	02812403          	lw	s0,40(sp)
8000b248:	02412483          	lw	s1,36(sp)
8000b24c:	02012903          	lw	s2,32(sp)
8000b250:	01c12983          	lw	s3,28(sp)
8000b254:	01812a03          	lw	s4,24(sp)
8000b258:	01412a83          	lw	s5,20(sp)
8000b25c:	01012b03          	lw	s6,16(sp)
8000b260:	00c12b83          	lw	s7,12(sp)
8000b264:	00812c03          	lw	s8,8(sp)
8000b268:	03010113          	addi	sp,sp,48
8000b26c:	00008067          	ret
8000b270:	01000493          	li	s1,16
8000b274:	fcb4e0e3          	bltu	s1,a1,8000b234 <_malloc_r+0x40>
8000b278:	00050993          	mv	s3,a0
8000b27c:	5bc000ef          	jal	ra,8000b838 <__malloc_lock>
8000b280:	8000d937          	lui	s2,0x8000d
8000b284:	1f700793          	li	a5,503
8000b288:	4b890913          	addi	s2,s2,1208 # 8000d4b8 <__global_pointer$+0xfffff288>
8000b28c:	0497ea63          	bltu	a5,s1,8000b2e0 <_malloc_r+0xec>
8000b290:	00848713          	addi	a4,s1,8
8000b294:	00e90733          	add	a4,s2,a4
8000b298:	00472403          	lw	s0,4(a4) # 1000004 <buflen.2800+0xffff80>
8000b29c:	ff870693          	addi	a3,a4,-8
8000b2a0:	0034d793          	srli	a5,s1,0x3
8000b2a4:	00d41863          	bne	s0,a3,8000b2b4 <_malloc_r+0xc0>
8000b2a8:	00c72403          	lw	s0,12(a4)
8000b2ac:	00278793          	addi	a5,a5,2
8000b2b0:	08870063          	beq	a4,s0,8000b330 <_malloc_r+0x13c>
8000b2b4:	00442783          	lw	a5,4(s0)
8000b2b8:	00c42703          	lw	a4,12(s0)
8000b2bc:	00842683          	lw	a3,8(s0)
8000b2c0:	ffc7f793          	andi	a5,a5,-4
8000b2c4:	00f407b3          	add	a5,s0,a5
8000b2c8:	00e6a623          	sw	a4,12(a3)
8000b2cc:	00d72423          	sw	a3,8(a4)
8000b2d0:	0047a703          	lw	a4,4(a5)
8000b2d4:	00176713          	ori	a4,a4,1
8000b2d8:	00e7a223          	sw	a4,4(a5)
8000b2dc:	0a80006f          	j	8000b384 <_malloc_r+0x190>
8000b2e0:	0094d713          	srli	a4,s1,0x9
8000b2e4:	03f00793          	li	a5,63
8000b2e8:	00070a63          	beqz	a4,8000b2fc <_malloc_r+0x108>
8000b2ec:	00400793          	li	a5,4
8000b2f0:	0ae7e263          	bltu	a5,a4,8000b394 <_malloc_r+0x1a0>
8000b2f4:	0064d793          	srli	a5,s1,0x6
8000b2f8:	03878793          	addi	a5,a5,56
8000b2fc:	00178713          	addi	a4,a5,1
8000b300:	00371713          	slli	a4,a4,0x3
8000b304:	00e90733          	add	a4,s2,a4
8000b308:	00472403          	lw	s0,4(a4)
8000b30c:	ff870593          	addi	a1,a4,-8
8000b310:	00f00513          	li	a0,15
8000b314:	00b40c63          	beq	s0,a1,8000b32c <_malloc_r+0x138>
8000b318:	00442703          	lw	a4,4(s0)
8000b31c:	ffc77713          	andi	a4,a4,-4
8000b320:	40970633          	sub	a2,a4,s1
8000b324:	0cc55063          	ble	a2,a0,8000b3e4 <_malloc_r+0x1f0>
8000b328:	fff78793          	addi	a5,a5,-1
8000b32c:	00178793          	addi	a5,a5,1
8000b330:	01092403          	lw	s0,16(s2)
8000b334:	8000d5b7          	lui	a1,0x8000d
8000b338:	00890693          	addi	a3,s2,8
8000b33c:	4c058593          	addi	a1,a1,1216 # 8000d4c0 <__global_pointer$+0xfffff290>
8000b340:	12d40863          	beq	s0,a3,8000b470 <_malloc_r+0x27c>
8000b344:	00442703          	lw	a4,4(s0)
8000b348:	00f00613          	li	a2,15
8000b34c:	ffc77713          	andi	a4,a4,-4
8000b350:	40970533          	sub	a0,a4,s1
8000b354:	0aa65a63          	ble	a0,a2,8000b408 <_malloc_r+0x214>
8000b358:	0014e793          	ori	a5,s1,1
8000b35c:	00f42223          	sw	a5,4(s0)
8000b360:	00940633          	add	a2,s0,s1
8000b364:	00c92a23          	sw	a2,20(s2)
8000b368:	00c92823          	sw	a2,16(s2)
8000b36c:	00156793          	ori	a5,a0,1
8000b370:	00d62623          	sw	a3,12(a2)
8000b374:	00d62423          	sw	a3,8(a2)
8000b378:	00f62223          	sw	a5,4(a2)
8000b37c:	00e40733          	add	a4,s0,a4
8000b380:	00a72023          	sw	a0,0(a4)
8000b384:	00098513          	mv	a0,s3
8000b388:	4b4000ef          	jal	ra,8000b83c <__malloc_unlock>
8000b38c:	00840513          	addi	a0,s0,8
8000b390:	eb1ff06f          	j	8000b240 <_malloc_r+0x4c>
8000b394:	01400793          	li	a5,20
8000b398:	00e7e663          	bltu	a5,a4,8000b3a4 <_malloc_r+0x1b0>
8000b39c:	05b70793          	addi	a5,a4,91
8000b3a0:	f5dff06f          	j	8000b2fc <_malloc_r+0x108>
8000b3a4:	05400793          	li	a5,84
8000b3a8:	00e7e863          	bltu	a5,a4,8000b3b8 <_malloc_r+0x1c4>
8000b3ac:	00c4d793          	srli	a5,s1,0xc
8000b3b0:	06e78793          	addi	a5,a5,110
8000b3b4:	f49ff06f          	j	8000b2fc <_malloc_r+0x108>
8000b3b8:	15400793          	li	a5,340
8000b3bc:	00e7e863          	bltu	a5,a4,8000b3cc <_malloc_r+0x1d8>
8000b3c0:	00f4d793          	srli	a5,s1,0xf
8000b3c4:	07778793          	addi	a5,a5,119
8000b3c8:	f35ff06f          	j	8000b2fc <_malloc_r+0x108>
8000b3cc:	55400693          	li	a3,1364
8000b3d0:	07e00793          	li	a5,126
8000b3d4:	f2e6e4e3          	bltu	a3,a4,8000b2fc <_malloc_r+0x108>
8000b3d8:	0124d793          	srli	a5,s1,0x12
8000b3dc:	07c78793          	addi	a5,a5,124
8000b3e0:	f1dff06f          	j	8000b2fc <_malloc_r+0x108>
8000b3e4:	00c42683          	lw	a3,12(s0)
8000b3e8:	00064c63          	bltz	a2,8000b400 <_malloc_r+0x20c>
8000b3ec:	00842783          	lw	a5,8(s0)
8000b3f0:	00d7a623          	sw	a3,12(a5)
8000b3f4:	00f6a423          	sw	a5,8(a3)
8000b3f8:	00e407b3          	add	a5,s0,a4
8000b3fc:	ed5ff06f          	j	8000b2d0 <_malloc_r+0xdc>
8000b400:	00068413          	mv	s0,a3
8000b404:	f11ff06f          	j	8000b314 <_malloc_r+0x120>
8000b408:	00d92a23          	sw	a3,20(s2)
8000b40c:	00d92823          	sw	a3,16(s2)
8000b410:	00054c63          	bltz	a0,8000b428 <_malloc_r+0x234>
8000b414:	00e40733          	add	a4,s0,a4
8000b418:	00472783          	lw	a5,4(a4)
8000b41c:	0017e793          	ori	a5,a5,1
8000b420:	00f72223          	sw	a5,4(a4)
8000b424:	f61ff06f          	j	8000b384 <_malloc_r+0x190>
8000b428:	1ff00693          	li	a3,511
8000b42c:	00492803          	lw	a6,4(s2)
8000b430:	16e6e663          	bltu	a3,a4,8000b59c <_malloc_r+0x3a8>
8000b434:	00375713          	srli	a4,a4,0x3
8000b438:	40275613          	srai	a2,a4,0x2
8000b43c:	00100693          	li	a3,1
8000b440:	00170713          	addi	a4,a4,1
8000b444:	00c696b3          	sll	a3,a3,a2
8000b448:	00371713          	slli	a4,a4,0x3
8000b44c:	00e90733          	add	a4,s2,a4
8000b450:	0106e6b3          	or	a3,a3,a6
8000b454:	00d92223          	sw	a3,4(s2)
8000b458:	00072683          	lw	a3,0(a4)
8000b45c:	ff870613          	addi	a2,a4,-8
8000b460:	00c42623          	sw	a2,12(s0)
8000b464:	00d42423          	sw	a3,8(s0)
8000b468:	00872023          	sw	s0,0(a4)
8000b46c:	0086a623          	sw	s0,12(a3)
8000b470:	4027d713          	srai	a4,a5,0x2
8000b474:	00100313          	li	t1,1
8000b478:	00e31333          	sll	t1,t1,a4
8000b47c:	00492703          	lw	a4,4(s2)
8000b480:	06676a63          	bltu	a4,t1,8000b4f4 <_malloc_r+0x300>
8000b484:	006776b3          	and	a3,a4,t1
8000b488:	00069c63          	bnez	a3,8000b4a0 <_malloc_r+0x2ac>
8000b48c:	ffc7f793          	andi	a5,a5,-4
8000b490:	00131313          	slli	t1,t1,0x1
8000b494:	006776b3          	and	a3,a4,t1
8000b498:	00478793          	addi	a5,a5,4
8000b49c:	fe068ae3          	beqz	a3,8000b490 <_malloc_r+0x29c>
8000b4a0:	00f00e13          	li	t3,15
8000b4a4:	00379693          	slli	a3,a5,0x3
8000b4a8:	00d906b3          	add	a3,s2,a3
8000b4ac:	00068813          	mv	a6,a3
8000b4b0:	00078513          	mv	a0,a5
8000b4b4:	00c82403          	lw	s0,12(a6)
8000b4b8:	1b041263          	bne	s0,a6,8000b65c <_malloc_r+0x468>
8000b4bc:	00150513          	addi	a0,a0,1
8000b4c0:	00357713          	andi	a4,a0,3
8000b4c4:	00880813          	addi	a6,a6,8
8000b4c8:	fe0716e3          	bnez	a4,8000b4b4 <_malloc_r+0x2c0>
8000b4cc:	0037f713          	andi	a4,a5,3
8000b4d0:	20071463          	bnez	a4,8000b6d8 <_malloc_r+0x4e4>
8000b4d4:	00492703          	lw	a4,4(s2)
8000b4d8:	fff34793          	not	a5,t1
8000b4dc:	00f777b3          	and	a5,a4,a5
8000b4e0:	00f92223          	sw	a5,4(s2)
8000b4e4:	00492703          	lw	a4,4(s2)
8000b4e8:	00131313          	slli	t1,t1,0x1
8000b4ec:	00676463          	bltu	a4,t1,8000b4f4 <_malloc_r+0x300>
8000b4f0:	20031863          	bnez	t1,8000b700 <_malloc_r+0x50c>
8000b4f4:	00892b83          	lw	s7,8(s2)
8000b4f8:	004ba403          	lw	s0,4(s7)
8000b4fc:	ffc47a93          	andi	s5,s0,-4
8000b500:	009ae863          	bltu	s5,s1,8000b510 <_malloc_r+0x31c>
8000b504:	409a8733          	sub	a4,s5,s1
8000b508:	00f00793          	li	a5,15
8000b50c:	30e7ca63          	blt	a5,a4,8000b820 <_malloc_r+0x62c>
8000b510:	8b01a403          	lw	s0,-1872(gp) # 8000dae0 <__malloc_top_pad>
8000b514:	8381a703          	lw	a4,-1992(gp) # 8000da68 <__malloc_sbrk_base>
8000b518:	fff00793          	li	a5,-1
8000b51c:	00848433          	add	s0,s1,s0
8000b520:	1ef71463          	bne	a4,a5,8000b708 <_malloc_r+0x514>
8000b524:	01040413          	addi	s0,s0,16
8000b528:	00040593          	mv	a1,s0
8000b52c:	00098513          	mv	a0,s3
8000b530:	079000ef          	jal	ra,8000bda8 <_sbrk_r>
8000b534:	fff00793          	li	a5,-1
8000b538:	00050b13          	mv	s6,a0
8000b53c:	26f50863          	beq	a0,a5,8000b7ac <_malloc_r+0x5b8>
8000b540:	015b87b3          	add	a5,s7,s5
8000b544:	00f57463          	bleu	a5,a0,8000b54c <_malloc_r+0x358>
8000b548:	272b9263          	bne	s7,s2,8000b7ac <_malloc_r+0x5b8>
8000b54c:	90c18693          	addi	a3,gp,-1780 # 8000db3c <__malloc_current_mallinfo>
8000b550:	0006a703          	lw	a4,0(a3)
8000b554:	90c18c13          	addi	s8,gp,-1780 # 8000db3c <__malloc_current_mallinfo>
8000b558:	00e40733          	add	a4,s0,a4
8000b55c:	00e6a023          	sw	a4,0(a3)
8000b560:	1d679063          	bne	a5,s6,8000b720 <_malloc_r+0x52c>
8000b564:	01479693          	slli	a3,a5,0x14
8000b568:	1a069c63          	bnez	a3,8000b720 <_malloc_r+0x52c>
8000b56c:	00892783          	lw	a5,8(s2)
8000b570:	008a8433          	add	s0,s5,s0
8000b574:	00146413          	ori	s0,s0,1
8000b578:	0087a223          	sw	s0,4(a5)
8000b57c:	000c2783          	lw	a5,0(s8)
8000b580:	8ac1a683          	lw	a3,-1876(gp) # 8000dadc <__malloc_max_sbrked_mem>
8000b584:	00f6f463          	bleu	a5,a3,8000b58c <_malloc_r+0x398>
8000b588:	8af1a623          	sw	a5,-1876(gp) # 8000dadc <__malloc_max_sbrked_mem>
8000b58c:	8a81a683          	lw	a3,-1880(gp) # 8000dad8 <__malloc_max_total_mem>
8000b590:	20f6fe63          	bleu	a5,a3,8000b7ac <_malloc_r+0x5b8>
8000b594:	8af1a423          	sw	a5,-1880(gp) # 8000dad8 <__malloc_max_total_mem>
8000b598:	2140006f          	j	8000b7ac <_malloc_r+0x5b8>
8000b59c:	00975613          	srli	a2,a4,0x9
8000b5a0:	00400693          	li	a3,4
8000b5a4:	04c6e663          	bltu	a3,a2,8000b5f0 <_malloc_r+0x3fc>
8000b5a8:	00675693          	srli	a3,a4,0x6
8000b5ac:	03868693          	addi	a3,a3,56
8000b5b0:	00168613          	addi	a2,a3,1
8000b5b4:	00361613          	slli	a2,a2,0x3
8000b5b8:	00c90633          	add	a2,s2,a2
8000b5bc:	ff860513          	addi	a0,a2,-8
8000b5c0:	00062603          	lw	a2,0(a2)
8000b5c4:	08c51263          	bne	a0,a2,8000b648 <_malloc_r+0x454>
8000b5c8:	4026d693          	srai	a3,a3,0x2
8000b5cc:	00100713          	li	a4,1
8000b5d0:	00d716b3          	sll	a3,a4,a3
8000b5d4:	0106e6b3          	or	a3,a3,a6
8000b5d8:	00d92223          	sw	a3,4(s2)
8000b5dc:	00a42623          	sw	a0,12(s0)
8000b5e0:	00c42423          	sw	a2,8(s0)
8000b5e4:	00852423          	sw	s0,8(a0)
8000b5e8:	00862623          	sw	s0,12(a2)
8000b5ec:	e85ff06f          	j	8000b470 <_malloc_r+0x27c>
8000b5f0:	01400693          	li	a3,20
8000b5f4:	00c6e663          	bltu	a3,a2,8000b600 <_malloc_r+0x40c>
8000b5f8:	05b60693          	addi	a3,a2,91
8000b5fc:	fb5ff06f          	j	8000b5b0 <_malloc_r+0x3bc>
8000b600:	05400693          	li	a3,84
8000b604:	00c6e863          	bltu	a3,a2,8000b614 <_malloc_r+0x420>
8000b608:	00c75693          	srli	a3,a4,0xc
8000b60c:	06e68693          	addi	a3,a3,110
8000b610:	fa1ff06f          	j	8000b5b0 <_malloc_r+0x3bc>
8000b614:	15400693          	li	a3,340
8000b618:	00c6e863          	bltu	a3,a2,8000b628 <_malloc_r+0x434>
8000b61c:	00f75693          	srli	a3,a4,0xf
8000b620:	07768693          	addi	a3,a3,119
8000b624:	f8dff06f          	j	8000b5b0 <_malloc_r+0x3bc>
8000b628:	55400513          	li	a0,1364
8000b62c:	07e00693          	li	a3,126
8000b630:	f8c560e3          	bltu	a0,a2,8000b5b0 <_malloc_r+0x3bc>
8000b634:	01275693          	srli	a3,a4,0x12
8000b638:	07c68693          	addi	a3,a3,124
8000b63c:	f75ff06f          	j	8000b5b0 <_malloc_r+0x3bc>
8000b640:	00862603          	lw	a2,8(a2)
8000b644:	00c50863          	beq	a0,a2,8000b654 <_malloc_r+0x460>
8000b648:	00462683          	lw	a3,4(a2)
8000b64c:	ffc6f693          	andi	a3,a3,-4
8000b650:	fed768e3          	bltu	a4,a3,8000b640 <_malloc_r+0x44c>
8000b654:	00c62503          	lw	a0,12(a2)
8000b658:	f85ff06f          	j	8000b5dc <_malloc_r+0x3e8>
8000b65c:	00442703          	lw	a4,4(s0)
8000b660:	00c42603          	lw	a2,12(s0)
8000b664:	ffc77713          	andi	a4,a4,-4
8000b668:	409708b3          	sub	a7,a4,s1
8000b66c:	051e5063          	ble	a7,t3,8000b6ac <_malloc_r+0x4b8>
8000b670:	0014e793          	ori	a5,s1,1
8000b674:	00f42223          	sw	a5,4(s0)
8000b678:	00842783          	lw	a5,8(s0)
8000b67c:	009406b3          	add	a3,s0,s1
8000b680:	00e40733          	add	a4,s0,a4
8000b684:	00c7a623          	sw	a2,12(a5)
8000b688:	00f62423          	sw	a5,8(a2)
8000b68c:	00d92a23          	sw	a3,20(s2)
8000b690:	00d92823          	sw	a3,16(s2)
8000b694:	0018e793          	ori	a5,a7,1
8000b698:	00b6a623          	sw	a1,12(a3)
8000b69c:	00b6a423          	sw	a1,8(a3)
8000b6a0:	00f6a223          	sw	a5,4(a3)
8000b6a4:	01172023          	sw	a7,0(a4)
8000b6a8:	cddff06f          	j	8000b384 <_malloc_r+0x190>
8000b6ac:	0208c263          	bltz	a7,8000b6d0 <_malloc_r+0x4dc>
8000b6b0:	00e40733          	add	a4,s0,a4
8000b6b4:	00472783          	lw	a5,4(a4)
8000b6b8:	0017e793          	ori	a5,a5,1
8000b6bc:	00f72223          	sw	a5,4(a4)
8000b6c0:	00842783          	lw	a5,8(s0)
8000b6c4:	00c7a623          	sw	a2,12(a5)
8000b6c8:	00f62423          	sw	a5,8(a2)
8000b6cc:	cb9ff06f          	j	8000b384 <_malloc_r+0x190>
8000b6d0:	00060413          	mv	s0,a2
8000b6d4:	de5ff06f          	j	8000b4b8 <_malloc_r+0x2c4>
8000b6d8:	ff868713          	addi	a4,a3,-8
8000b6dc:	0006a683          	lw	a3,0(a3)
8000b6e0:	fff78793          	addi	a5,a5,-1
8000b6e4:	dee684e3          	beq	a3,a4,8000b4cc <_malloc_r+0x2d8>
8000b6e8:	dfdff06f          	j	8000b4e4 <_malloc_r+0x2f0>
8000b6ec:	00478793          	addi	a5,a5,4
8000b6f0:	00131313          	slli	t1,t1,0x1
8000b6f4:	006776b3          	and	a3,a4,t1
8000b6f8:	fe068ae3          	beqz	a3,8000b6ec <_malloc_r+0x4f8>
8000b6fc:	da9ff06f          	j	8000b4a4 <_malloc_r+0x2b0>
8000b700:	00050793          	mv	a5,a0
8000b704:	ff1ff06f          	j	8000b6f4 <_malloc_r+0x500>
8000b708:	000017b7          	lui	a5,0x1
8000b70c:	00f78793          	addi	a5,a5,15 # 100f <buflen.2800+0xf8b>
8000b710:	00f40433          	add	s0,s0,a5
8000b714:	fffff7b7          	lui	a5,0xfffff
8000b718:	00f47433          	and	s0,s0,a5
8000b71c:	e0dff06f          	j	8000b528 <_malloc_r+0x334>
8000b720:	8381a603          	lw	a2,-1992(gp) # 8000da68 <__malloc_sbrk_base>
8000b724:	fff00693          	li	a3,-1
8000b728:	0ad61663          	bne	a2,a3,8000b7d4 <_malloc_r+0x5e0>
8000b72c:	8361ac23          	sw	s6,-1992(gp) # 8000da68 <__malloc_sbrk_base>
8000b730:	007b7593          	andi	a1,s6,7
8000b734:	00058863          	beqz	a1,8000b744 <_malloc_r+0x550>
8000b738:	00800793          	li	a5,8
8000b73c:	40b785b3          	sub	a1,a5,a1
8000b740:	00bb0b33          	add	s6,s6,a1
8000b744:	000017b7          	lui	a5,0x1
8000b748:	00f585b3          	add	a1,a1,a5
8000b74c:	008b0433          	add	s0,s6,s0
8000b750:	fff78793          	addi	a5,a5,-1 # fff <buflen.2800+0xf7b>
8000b754:	00f47433          	and	s0,s0,a5
8000b758:	40858a33          	sub	s4,a1,s0
8000b75c:	000a0593          	mv	a1,s4
8000b760:	00098513          	mv	a0,s3
8000b764:	644000ef          	jal	ra,8000bda8 <_sbrk_r>
8000b768:	fff00793          	li	a5,-1
8000b76c:	00f51663          	bne	a0,a5,8000b778 <_malloc_r+0x584>
8000b770:	000b0513          	mv	a0,s6
8000b774:	00000a13          	li	s4,0
8000b778:	000c2783          	lw	a5,0(s8)
8000b77c:	41650533          	sub	a0,a0,s6
8000b780:	01692423          	sw	s6,8(s2)
8000b784:	014787b3          	add	a5,a5,s4
8000b788:	01450a33          	add	s4,a0,s4
8000b78c:	001a6a13          	ori	s4,s4,1
8000b790:	00fc2023          	sw	a5,0(s8)
8000b794:	014b2223          	sw	s4,4(s6)
8000b798:	df2b82e3          	beq	s7,s2,8000b57c <_malloc_r+0x388>
8000b79c:	00f00713          	li	a4,15
8000b7a0:	05576263          	bltu	a4,s5,8000b7e4 <_malloc_r+0x5f0>
8000b7a4:	00100793          	li	a5,1
8000b7a8:	00fb2223          	sw	a5,4(s6)
8000b7ac:	00892783          	lw	a5,8(s2)
8000b7b0:	0047a783          	lw	a5,4(a5)
8000b7b4:	ffc7f793          	andi	a5,a5,-4
8000b7b8:	40978733          	sub	a4,a5,s1
8000b7bc:	0097e663          	bltu	a5,s1,8000b7c8 <_malloc_r+0x5d4>
8000b7c0:	00f00793          	li	a5,15
8000b7c4:	04e7ce63          	blt	a5,a4,8000b820 <_malloc_r+0x62c>
8000b7c8:	00098513          	mv	a0,s3
8000b7cc:	070000ef          	jal	ra,8000b83c <__malloc_unlock>
8000b7d0:	a6dff06f          	j	8000b23c <_malloc_r+0x48>
8000b7d4:	40fb07b3          	sub	a5,s6,a5
8000b7d8:	00e787b3          	add	a5,a5,a4
8000b7dc:	00fc2023          	sw	a5,0(s8)
8000b7e0:	f51ff06f          	j	8000b730 <_malloc_r+0x53c>
8000b7e4:	004ba783          	lw	a5,4(s7)
8000b7e8:	ff4a8413          	addi	s0,s5,-12
8000b7ec:	ff847413          	andi	s0,s0,-8
8000b7f0:	0017f793          	andi	a5,a5,1
8000b7f4:	0087e7b3          	or	a5,a5,s0
8000b7f8:	00fba223          	sw	a5,4(s7)
8000b7fc:	00500693          	li	a3,5
8000b800:	008b87b3          	add	a5,s7,s0
8000b804:	00d7a223          	sw	a3,4(a5)
8000b808:	00d7a423          	sw	a3,8(a5)
8000b80c:	d68778e3          	bleu	s0,a4,8000b57c <_malloc_r+0x388>
8000b810:	008b8593          	addi	a1,s7,8
8000b814:	00098513          	mv	a0,s3
8000b818:	3fd000ef          	jal	ra,8000c414 <_free_r>
8000b81c:	d61ff06f          	j	8000b57c <_malloc_r+0x388>
8000b820:	00892403          	lw	s0,8(s2)
8000b824:	0014e793          	ori	a5,s1,1
8000b828:	00f42223          	sw	a5,4(s0)
8000b82c:	009407b3          	add	a5,s0,s1
8000b830:	00f92423          	sw	a5,8(s2)
8000b834:	aa1ff06f          	j	8000b2d4 <_malloc_r+0xe0>

8000b838 <__malloc_lock>:
8000b838:	00008067          	ret

8000b83c <__malloc_unlock>:
8000b83c:	00008067          	ret

8000b840 <realloc>:
8000b840:	00058613          	mv	a2,a1
8000b844:	00050593          	mv	a1,a0
8000b848:	8341a503          	lw	a0,-1996(gp) # 8000da64 <_impure_ptr>
8000b84c:	0040006f          	j	8000b850 <_realloc_r>

8000b850 <_realloc_r>:
8000b850:	fc010113          	addi	sp,sp,-64
8000b854:	02812c23          	sw	s0,56(sp)
8000b858:	02112e23          	sw	ra,60(sp)
8000b85c:	00058413          	mv	s0,a1
8000b860:	02912a23          	sw	s1,52(sp)
8000b864:	03212823          	sw	s2,48(sp)
8000b868:	03312623          	sw	s3,44(sp)
8000b86c:	03412423          	sw	s4,40(sp)
8000b870:	03512223          	sw	s5,36(sp)
8000b874:	03612023          	sw	s6,32(sp)
8000b878:	01712e23          	sw	s7,28(sp)
8000b87c:	01812c23          	sw	s8,24(sp)
8000b880:	00060593          	mv	a1,a2
8000b884:	02041a63          	bnez	s0,8000b8b8 <_realloc_r+0x68>
8000b888:	03812403          	lw	s0,56(sp)
8000b88c:	03c12083          	lw	ra,60(sp)
8000b890:	03412483          	lw	s1,52(sp)
8000b894:	03012903          	lw	s2,48(sp)
8000b898:	02c12983          	lw	s3,44(sp)
8000b89c:	02812a03          	lw	s4,40(sp)
8000b8a0:	02412a83          	lw	s5,36(sp)
8000b8a4:	02012b03          	lw	s6,32(sp)
8000b8a8:	01c12b83          	lw	s7,28(sp)
8000b8ac:	01812c03          	lw	s8,24(sp)
8000b8b0:	04010113          	addi	sp,sp,64
8000b8b4:	941ff06f          	j	8000b1f4 <_malloc_r>
8000b8b8:	00050a93          	mv	s5,a0
8000b8bc:	00c12623          	sw	a2,12(sp)
8000b8c0:	f79ff0ef          	jal	ra,8000b838 <__malloc_lock>
8000b8c4:	00c12583          	lw	a1,12(sp)
8000b8c8:	ffc42683          	lw	a3,-4(s0)
8000b8cc:	01600793          	li	a5,22
8000b8d0:	00b58993          	addi	s3,a1,11
8000b8d4:	ff840b93          	addi	s7,s0,-8
8000b8d8:	ffc6f913          	andi	s2,a3,-4
8000b8dc:	0537f663          	bleu	s3,a5,8000b928 <_realloc_r+0xd8>
8000b8e0:	ff89fb13          	andi	s6,s3,-8
8000b8e4:	040b5463          	bgez	s6,8000b92c <_realloc_r+0xdc>
8000b8e8:	00c00793          	li	a5,12
8000b8ec:	00faa023          	sw	a5,0(s5)
8000b8f0:	00000a13          	li	s4,0
8000b8f4:	03c12083          	lw	ra,60(sp)
8000b8f8:	03812403          	lw	s0,56(sp)
8000b8fc:	000a0513          	mv	a0,s4
8000b900:	03412483          	lw	s1,52(sp)
8000b904:	03012903          	lw	s2,48(sp)
8000b908:	02c12983          	lw	s3,44(sp)
8000b90c:	02812a03          	lw	s4,40(sp)
8000b910:	02412a83          	lw	s5,36(sp)
8000b914:	02012b03          	lw	s6,32(sp)
8000b918:	01c12b83          	lw	s7,28(sp)
8000b91c:	01812c03          	lw	s8,24(sp)
8000b920:	04010113          	addi	sp,sp,64
8000b924:	00008067          	ret
8000b928:	01000b13          	li	s6,16
8000b92c:	fabb6ee3          	bltu	s6,a1,8000b8e8 <_realloc_r+0x98>
8000b930:	45695c63          	ble	s6,s2,8000bd88 <_realloc_r+0x538>
8000b934:	8000dc37          	lui	s8,0x8000d
8000b938:	4b8c0713          	addi	a4,s8,1208 # 8000d4b8 <__global_pointer$+0xfffff288>
8000b93c:	00872603          	lw	a2,8(a4)
8000b940:	012b87b3          	add	a5,s7,s2
8000b944:	0047a703          	lw	a4,4(a5)
8000b948:	4b8c0c13          	addi	s8,s8,1208
8000b94c:	00f60c63          	beq	a2,a5,8000b964 <_realloc_r+0x114>
8000b950:	ffe77513          	andi	a0,a4,-2
8000b954:	00a78533          	add	a0,a5,a0
8000b958:	00452503          	lw	a0,4(a0)
8000b95c:	00157513          	andi	a0,a0,1
8000b960:	0a051a63          	bnez	a0,8000ba14 <_realloc_r+0x1c4>
8000b964:	ffc77713          	andi	a4,a4,-4
8000b968:	00e909b3          	add	s3,s2,a4
8000b96c:	04f61063          	bne	a2,a5,8000b9ac <_realloc_r+0x15c>
8000b970:	010b0513          	addi	a0,s6,16
8000b974:	0aa9c463          	blt	s3,a0,8000ba1c <_realloc_r+0x1cc>
8000b978:	016b8bb3          	add	s7,s7,s6
8000b97c:	416989b3          	sub	s3,s3,s6
8000b980:	017c2423          	sw	s7,8(s8)
8000b984:	0019e993          	ori	s3,s3,1
8000b988:	013ba223          	sw	s3,4(s7)
8000b98c:	ffc42983          	lw	s3,-4(s0)
8000b990:	000a8513          	mv	a0,s5
8000b994:	00040a13          	mv	s4,s0
8000b998:	0019f993          	andi	s3,s3,1
8000b99c:	0169e9b3          	or	s3,s3,s6
8000b9a0:	ff342e23          	sw	s3,-4(s0)
8000b9a4:	e99ff0ef          	jal	ra,8000b83c <__malloc_unlock>
8000b9a8:	f4dff06f          	j	8000b8f4 <_realloc_r+0xa4>
8000b9ac:	0769c863          	blt	s3,s6,8000ba1c <_realloc_r+0x1cc>
8000b9b0:	00c7a703          	lw	a4,12(a5)
8000b9b4:	0087a783          	lw	a5,8(a5)
8000b9b8:	00e7a623          	sw	a4,12(a5)
8000b9bc:	00f72423          	sw	a5,8(a4)
8000b9c0:	004ba703          	lw	a4,4(s7)
8000b9c4:	416986b3          	sub	a3,s3,s6
8000b9c8:	00f00613          	li	a2,15
8000b9cc:	00177713          	andi	a4,a4,1
8000b9d0:	013b87b3          	add	a5,s7,s3
8000b9d4:	3ad67e63          	bleu	a3,a2,8000bd90 <_realloc_r+0x540>
8000b9d8:	00eb69b3          	or	s3,s6,a4
8000b9dc:	013ba223          	sw	s3,4(s7)
8000b9e0:	016b85b3          	add	a1,s7,s6
8000b9e4:	0016e693          	ori	a3,a3,1
8000b9e8:	00d5a223          	sw	a3,4(a1)
8000b9ec:	0047a703          	lw	a4,4(a5)
8000b9f0:	00858593          	addi	a1,a1,8
8000b9f4:	000a8513          	mv	a0,s5
8000b9f8:	00176713          	ori	a4,a4,1
8000b9fc:	00e7a223          	sw	a4,4(a5)
8000ba00:	215000ef          	jal	ra,8000c414 <_free_r>
8000ba04:	000a8513          	mv	a0,s5
8000ba08:	e35ff0ef          	jal	ra,8000b83c <__malloc_unlock>
8000ba0c:	008b8a13          	addi	s4,s7,8
8000ba10:	ee5ff06f          	j	8000b8f4 <_realloc_r+0xa4>
8000ba14:	00000713          	li	a4,0
8000ba18:	00000793          	li	a5,0
8000ba1c:	0016f693          	andi	a3,a3,1
8000ba20:	28069263          	bnez	a3,8000bca4 <_realloc_r+0x454>
8000ba24:	ff842483          	lw	s1,-8(s0)
8000ba28:	409b84b3          	sub	s1,s7,s1
8000ba2c:	0044aa03          	lw	s4,4(s1)
8000ba30:	ffca7a13          	andi	s4,s4,-4
8000ba34:	012a0a33          	add	s4,s4,s2
8000ba38:	1a078c63          	beqz	a5,8000bbf0 <_realloc_r+0x3a0>
8000ba3c:	014709b3          	add	s3,a4,s4
8000ba40:	0ef61663          	bne	a2,a5,8000bb2c <_realloc_r+0x2dc>
8000ba44:	010b0793          	addi	a5,s6,16
8000ba48:	1af9c463          	blt	s3,a5,8000bbf0 <_realloc_r+0x3a0>
8000ba4c:	0084a703          	lw	a4,8(s1)
8000ba50:	00c4a783          	lw	a5,12(s1)
8000ba54:	ffc90613          	addi	a2,s2,-4
8000ba58:	00848a13          	addi	s4,s1,8
8000ba5c:	00f72623          	sw	a5,12(a4)
8000ba60:	00e7a423          	sw	a4,8(a5)
8000ba64:	02400713          	li	a4,36
8000ba68:	0ac76a63          	bltu	a4,a2,8000bb1c <_realloc_r+0x2cc>
8000ba6c:	01300693          	li	a3,19
8000ba70:	000a0793          	mv	a5,s4
8000ba74:	02c6f263          	bleu	a2,a3,8000ba98 <_realloc_r+0x248>
8000ba78:	00042783          	lw	a5,0(s0)
8000ba7c:	00f4a423          	sw	a5,8(s1)
8000ba80:	00442783          	lw	a5,4(s0)
8000ba84:	00f4a623          	sw	a5,12(s1)
8000ba88:	01b00793          	li	a5,27
8000ba8c:	04c7ea63          	bltu	a5,a2,8000bae0 <_realloc_r+0x290>
8000ba90:	00840413          	addi	s0,s0,8
8000ba94:	01048793          	addi	a5,s1,16
8000ba98:	00042703          	lw	a4,0(s0)
8000ba9c:	00e7a023          	sw	a4,0(a5)
8000baa0:	00442703          	lw	a4,4(s0)
8000baa4:	00e7a223          	sw	a4,4(a5)
8000baa8:	00842703          	lw	a4,8(s0)
8000baac:	00e7a423          	sw	a4,8(a5)
8000bab0:	016487b3          	add	a5,s1,s6
8000bab4:	416989b3          	sub	s3,s3,s6
8000bab8:	00fc2423          	sw	a5,8(s8)
8000babc:	0019e993          	ori	s3,s3,1
8000bac0:	0137a223          	sw	s3,4(a5)
8000bac4:	0044a783          	lw	a5,4(s1)
8000bac8:	0017f793          	andi	a5,a5,1
8000bacc:	0167e9b3          	or	s3,a5,s6
8000bad0:	0134a223          	sw	s3,4(s1)
8000bad4:	000a8513          	mv	a0,s5
8000bad8:	d65ff0ef          	jal	ra,8000b83c <__malloc_unlock>
8000badc:	e19ff06f          	j	8000b8f4 <_realloc_r+0xa4>
8000bae0:	00842783          	lw	a5,8(s0)
8000bae4:	00f4a823          	sw	a5,16(s1)
8000bae8:	00c42783          	lw	a5,12(s0)
8000baec:	00f4aa23          	sw	a5,20(s1)
8000baf0:	00e60863          	beq	a2,a4,8000bb00 <_realloc_r+0x2b0>
8000baf4:	01040413          	addi	s0,s0,16
8000baf8:	01848793          	addi	a5,s1,24
8000bafc:	f9dff06f          	j	8000ba98 <_realloc_r+0x248>
8000bb00:	01042783          	lw	a5,16(s0)
8000bb04:	01840413          	addi	s0,s0,24
8000bb08:	00f4ac23          	sw	a5,24(s1)
8000bb0c:	ffc42703          	lw	a4,-4(s0)
8000bb10:	02048793          	addi	a5,s1,32
8000bb14:	00e4ae23          	sw	a4,28(s1)
8000bb18:	f81ff06f          	j	8000ba98 <_realloc_r+0x248>
8000bb1c:	00040593          	mv	a1,s0
8000bb20:	000a0513          	mv	a0,s4
8000bb24:	489000ef          	jal	ra,8000c7ac <memmove>
8000bb28:	f89ff06f          	j	8000bab0 <_realloc_r+0x260>
8000bb2c:	0d69c263          	blt	s3,s6,8000bbf0 <_realloc_r+0x3a0>
8000bb30:	00c7a703          	lw	a4,12(a5)
8000bb34:	0087a783          	lw	a5,8(a5)
8000bb38:	ffc90613          	addi	a2,s2,-4
8000bb3c:	00848513          	addi	a0,s1,8
8000bb40:	00e7a623          	sw	a4,12(a5)
8000bb44:	00f72423          	sw	a5,8(a4)
8000bb48:	0084a703          	lw	a4,8(s1)
8000bb4c:	00c4a783          	lw	a5,12(s1)
8000bb50:	00f72623          	sw	a5,12(a4)
8000bb54:	00e7a423          	sw	a4,8(a5)
8000bb58:	02400793          	li	a5,36
8000bb5c:	08c7e463          	bltu	a5,a2,8000bbe4 <_realloc_r+0x394>
8000bb60:	01300713          	li	a4,19
8000bb64:	02c77263          	bleu	a2,a4,8000bb88 <_realloc_r+0x338>
8000bb68:	00042703          	lw	a4,0(s0)
8000bb6c:	00e4a423          	sw	a4,8(s1)
8000bb70:	00442703          	lw	a4,4(s0)
8000bb74:	00e4a623          	sw	a4,12(s1)
8000bb78:	01b00713          	li	a4,27
8000bb7c:	02c76663          	bltu	a4,a2,8000bba8 <_realloc_r+0x358>
8000bb80:	00840413          	addi	s0,s0,8
8000bb84:	01048513          	addi	a0,s1,16
8000bb88:	00042783          	lw	a5,0(s0)
8000bb8c:	00f52023          	sw	a5,0(a0)
8000bb90:	00442783          	lw	a5,4(s0)
8000bb94:	00f52223          	sw	a5,4(a0)
8000bb98:	00842783          	lw	a5,8(s0)
8000bb9c:	00f52423          	sw	a5,8(a0)
8000bba0:	00048b93          	mv	s7,s1
8000bba4:	e1dff06f          	j	8000b9c0 <_realloc_r+0x170>
8000bba8:	00842703          	lw	a4,8(s0)
8000bbac:	00e4a823          	sw	a4,16(s1)
8000bbb0:	00c42703          	lw	a4,12(s0)
8000bbb4:	00e4aa23          	sw	a4,20(s1)
8000bbb8:	00f60863          	beq	a2,a5,8000bbc8 <_realloc_r+0x378>
8000bbbc:	01040413          	addi	s0,s0,16
8000bbc0:	01848513          	addi	a0,s1,24
8000bbc4:	fc5ff06f          	j	8000bb88 <_realloc_r+0x338>
8000bbc8:	01042783          	lw	a5,16(s0)
8000bbcc:	02048513          	addi	a0,s1,32
8000bbd0:	01840413          	addi	s0,s0,24
8000bbd4:	00f4ac23          	sw	a5,24(s1)
8000bbd8:	ffc42783          	lw	a5,-4(s0)
8000bbdc:	00f4ae23          	sw	a5,28(s1)
8000bbe0:	fa9ff06f          	j	8000bb88 <_realloc_r+0x338>
8000bbe4:	00040593          	mv	a1,s0
8000bbe8:	3c5000ef          	jal	ra,8000c7ac <memmove>
8000bbec:	fb5ff06f          	j	8000bba0 <_realloc_r+0x350>
8000bbf0:	0b6a4a63          	blt	s4,s6,8000bca4 <_realloc_r+0x454>
8000bbf4:	00c4a783          	lw	a5,12(s1)
8000bbf8:	0084a703          	lw	a4,8(s1)
8000bbfc:	ffc90613          	addi	a2,s2,-4
8000bc00:	00848513          	addi	a0,s1,8
8000bc04:	00f72623          	sw	a5,12(a4)
8000bc08:	00e7a423          	sw	a4,8(a5)
8000bc0c:	02400793          	li	a5,36
8000bc10:	08c7e463          	bltu	a5,a2,8000bc98 <_realloc_r+0x448>
8000bc14:	01300713          	li	a4,19
8000bc18:	02c77263          	bleu	a2,a4,8000bc3c <_realloc_r+0x3ec>
8000bc1c:	00042703          	lw	a4,0(s0)
8000bc20:	00e4a423          	sw	a4,8(s1)
8000bc24:	00442703          	lw	a4,4(s0)
8000bc28:	00e4a623          	sw	a4,12(s1)
8000bc2c:	01b00713          	li	a4,27
8000bc30:	02c76663          	bltu	a4,a2,8000bc5c <_realloc_r+0x40c>
8000bc34:	00840413          	addi	s0,s0,8
8000bc38:	01048513          	addi	a0,s1,16
8000bc3c:	00042783          	lw	a5,0(s0)
8000bc40:	00f52023          	sw	a5,0(a0)
8000bc44:	00442783          	lw	a5,4(s0)
8000bc48:	00f52223          	sw	a5,4(a0)
8000bc4c:	00842783          	lw	a5,8(s0)
8000bc50:	00f52423          	sw	a5,8(a0)
8000bc54:	000a0993          	mv	s3,s4
8000bc58:	f49ff06f          	j	8000bba0 <_realloc_r+0x350>
8000bc5c:	00842703          	lw	a4,8(s0)
8000bc60:	00e4a823          	sw	a4,16(s1)
8000bc64:	00c42703          	lw	a4,12(s0)
8000bc68:	00e4aa23          	sw	a4,20(s1)
8000bc6c:	00f60863          	beq	a2,a5,8000bc7c <_realloc_r+0x42c>
8000bc70:	01040413          	addi	s0,s0,16
8000bc74:	01848513          	addi	a0,s1,24
8000bc78:	fc5ff06f          	j	8000bc3c <_realloc_r+0x3ec>
8000bc7c:	01042783          	lw	a5,16(s0)
8000bc80:	02048513          	addi	a0,s1,32
8000bc84:	01840413          	addi	s0,s0,24
8000bc88:	00f4ac23          	sw	a5,24(s1)
8000bc8c:	ffc42783          	lw	a5,-4(s0)
8000bc90:	00f4ae23          	sw	a5,28(s1)
8000bc94:	fa9ff06f          	j	8000bc3c <_realloc_r+0x3ec>
8000bc98:	00040593          	mv	a1,s0
8000bc9c:	311000ef          	jal	ra,8000c7ac <memmove>
8000bca0:	fb5ff06f          	j	8000bc54 <_realloc_r+0x404>
8000bca4:	000a8513          	mv	a0,s5
8000bca8:	d4cff0ef          	jal	ra,8000b1f4 <_malloc_r>
8000bcac:	00050a13          	mv	s4,a0
8000bcb0:	e20502e3          	beqz	a0,8000bad4 <_realloc_r+0x284>
8000bcb4:	ffc42783          	lw	a5,-4(s0)
8000bcb8:	ff850713          	addi	a4,a0,-8
8000bcbc:	ffe7f793          	andi	a5,a5,-2
8000bcc0:	00fb87b3          	add	a5,s7,a5
8000bcc4:	00e79a63          	bne	a5,a4,8000bcd8 <_realloc_r+0x488>
8000bcc8:	ffc52983          	lw	s3,-4(a0)
8000bccc:	ffc9f993          	andi	s3,s3,-4
8000bcd0:	012989b3          	add	s3,s3,s2
8000bcd4:	cedff06f          	j	8000b9c0 <_realloc_r+0x170>
8000bcd8:	ffc90613          	addi	a2,s2,-4
8000bcdc:	02400793          	li	a5,36
8000bce0:	08c7ee63          	bltu	a5,a2,8000bd7c <_realloc_r+0x52c>
8000bce4:	01300713          	li	a4,19
8000bce8:	08c77463          	bleu	a2,a4,8000bd70 <_realloc_r+0x520>
8000bcec:	00042703          	lw	a4,0(s0)
8000bcf0:	00e52023          	sw	a4,0(a0)
8000bcf4:	00442703          	lw	a4,4(s0)
8000bcf8:	00e52223          	sw	a4,4(a0)
8000bcfc:	01b00713          	li	a4,27
8000bd00:	02c76a63          	bltu	a4,a2,8000bd34 <_realloc_r+0x4e4>
8000bd04:	00840713          	addi	a4,s0,8
8000bd08:	00850793          	addi	a5,a0,8
8000bd0c:	00072683          	lw	a3,0(a4)
8000bd10:	00d7a023          	sw	a3,0(a5)
8000bd14:	00472683          	lw	a3,4(a4)
8000bd18:	00d7a223          	sw	a3,4(a5)
8000bd1c:	00872703          	lw	a4,8(a4)
8000bd20:	00e7a423          	sw	a4,8(a5)
8000bd24:	00040593          	mv	a1,s0
8000bd28:	000a8513          	mv	a0,s5
8000bd2c:	6e8000ef          	jal	ra,8000c414 <_free_r>
8000bd30:	da5ff06f          	j	8000bad4 <_realloc_r+0x284>
8000bd34:	00842703          	lw	a4,8(s0)
8000bd38:	00e52423          	sw	a4,8(a0)
8000bd3c:	00c42703          	lw	a4,12(s0)
8000bd40:	00e52623          	sw	a4,12(a0)
8000bd44:	00f60863          	beq	a2,a5,8000bd54 <_realloc_r+0x504>
8000bd48:	01040713          	addi	a4,s0,16
8000bd4c:	01050793          	addi	a5,a0,16
8000bd50:	fbdff06f          	j	8000bd0c <_realloc_r+0x4bc>
8000bd54:	01042783          	lw	a5,16(s0)
8000bd58:	01840713          	addi	a4,s0,24
8000bd5c:	00f52823          	sw	a5,16(a0)
8000bd60:	01442683          	lw	a3,20(s0)
8000bd64:	01850793          	addi	a5,a0,24
8000bd68:	00d52a23          	sw	a3,20(a0)
8000bd6c:	fa1ff06f          	j	8000bd0c <_realloc_r+0x4bc>
8000bd70:	00050793          	mv	a5,a0
8000bd74:	00040713          	mv	a4,s0
8000bd78:	f95ff06f          	j	8000bd0c <_realloc_r+0x4bc>
8000bd7c:	00040593          	mv	a1,s0
8000bd80:	22d000ef          	jal	ra,8000c7ac <memmove>
8000bd84:	fa1ff06f          	j	8000bd24 <_realloc_r+0x4d4>
8000bd88:	00090993          	mv	s3,s2
8000bd8c:	c35ff06f          	j	8000b9c0 <_realloc_r+0x170>
8000bd90:	00e9e9b3          	or	s3,s3,a4
8000bd94:	013ba223          	sw	s3,4(s7)
8000bd98:	0047a703          	lw	a4,4(a5)
8000bd9c:	00176713          	ori	a4,a4,1
8000bda0:	00e7a223          	sw	a4,4(a5)
8000bda4:	c61ff06f          	j	8000ba04 <_realloc_r+0x1b4>

8000bda8 <_sbrk_r>:
8000bda8:	ff010113          	addi	sp,sp,-16
8000bdac:	00812423          	sw	s0,8(sp)
8000bdb0:	00912223          	sw	s1,4(sp)
8000bdb4:	00050493          	mv	s1,a0
8000bdb8:	00058513          	mv	a0,a1
8000bdbc:	00112623          	sw	ra,12(sp)
8000bdc0:	9201aa23          	sw	zero,-1740(gp) # 8000db64 <errno>
8000bdc4:	c6dfd0ef          	jal	ra,80009a30 <_sbrk>
8000bdc8:	fff00793          	li	a5,-1
8000bdcc:	00f51863          	bne	a0,a5,8000bddc <_sbrk_r+0x34>
8000bdd0:	9341a783          	lw	a5,-1740(gp) # 8000db64 <errno>
8000bdd4:	00078463          	beqz	a5,8000bddc <_sbrk_r+0x34>
8000bdd8:	00f4a023          	sw	a5,0(s1)
8000bddc:	00c12083          	lw	ra,12(sp)
8000bde0:	00812403          	lw	s0,8(sp)
8000bde4:	00412483          	lw	s1,4(sp)
8000bde8:	01010113          	addi	sp,sp,16
8000bdec:	00008067          	ret

8000bdf0 <strncmp>:
8000bdf0:	02060a63          	beqz	a2,8000be24 <strncmp+0x34>
8000bdf4:	00150713          	addi	a4,a0,1
8000bdf8:	00c50533          	add	a0,a0,a2
8000bdfc:	fff74783          	lbu	a5,-1(a4)
8000be00:	0005c683          	lbu	a3,0(a1)
8000be04:	00d78663          	beq	a5,a3,8000be10 <strncmp+0x20>
8000be08:	40d78533          	sub	a0,a5,a3
8000be0c:	00008067          	ret
8000be10:	fea70ce3          	beq	a4,a0,8000be08 <strncmp+0x18>
8000be14:	00170713          	addi	a4,a4,1
8000be18:	fe0788e3          	beqz	a5,8000be08 <strncmp+0x18>
8000be1c:	00158593          	addi	a1,a1,1
8000be20:	fddff06f          	j	8000bdfc <strncmp+0xc>
8000be24:	00000513          	li	a0,0
8000be28:	00008067          	ret

8000be2c <_strtol_l.isra.0>:
8000be2c:	fd010113          	addi	sp,sp,-48
8000be30:	03212023          	sw	s2,32(sp)
8000be34:	01312e23          	sw	s3,28(sp)
8000be38:	02112623          	sw	ra,44(sp)
8000be3c:	02812423          	sw	s0,40(sp)
8000be40:	02912223          	sw	s1,36(sp)
8000be44:	00050993          	mv	s3,a0
8000be48:	00058913          	mv	s2,a1
8000be4c:	00190493          	addi	s1,s2,1
8000be50:	fff4c403          	lbu	s0,-1(s1)
8000be54:	00070513          	mv	a0,a4
8000be58:	00d12623          	sw	a3,12(sp)
8000be5c:	00c12423          	sw	a2,8(sp)
8000be60:	00b12223          	sw	a1,4(sp)
8000be64:	00e12023          	sw	a4,0(sp)
8000be68:	099000ef          	jal	ra,8000c700 <__locale_ctype_ptr_l>
8000be6c:	00850533          	add	a0,a0,s0
8000be70:	00154783          	lbu	a5,1(a0)
8000be74:	00012703          	lw	a4,0(sp)
8000be78:	00412583          	lw	a1,4(sp)
8000be7c:	0087f793          	andi	a5,a5,8
8000be80:	00812603          	lw	a2,8(sp)
8000be84:	00c12683          	lw	a3,12(sp)
8000be88:	0a079663          	bnez	a5,8000bf34 <_strtol_l.isra.0+0x108>
8000be8c:	02d00793          	li	a5,45
8000be90:	0af41663          	bne	s0,a5,8000bf3c <_strtol_l.isra.0+0x110>
8000be94:	00194783          	lbu	a5,1(s2)
8000be98:	00290493          	addi	s1,s2,2
8000be9c:	00100313          	li	t1,1
8000bea0:	12068e63          	beqz	a3,8000bfdc <_strtol_l.isra.0+0x1b0>
8000bea4:	01000713          	li	a4,16
8000bea8:	02e69463          	bne	a3,a4,8000bed0 <_strtol_l.isra.0+0xa4>
8000beac:	03000713          	li	a4,48
8000beb0:	02e79063          	bne	a5,a4,8000bed0 <_strtol_l.isra.0+0xa4>
8000beb4:	0004c783          	lbu	a5,0(s1)
8000beb8:	05800713          	li	a4,88
8000bebc:	0df7f793          	andi	a5,a5,223
8000bec0:	10e79663          	bne	a5,a4,8000bfcc <_strtol_l.isra.0+0x1a0>
8000bec4:	0014c783          	lbu	a5,1(s1)
8000bec8:	01000693          	li	a3,16
8000becc:	00248493          	addi	s1,s1,2
8000bed0:	800008b7          	lui	a7,0x80000
8000bed4:	00031463          	bnez	t1,8000bedc <_strtol_l.isra.0+0xb0>
8000bed8:	fff8c893          	not	a7,a7
8000bedc:	02d8ff33          	remu	t5,a7,a3
8000bee0:	00000813          	li	a6,0
8000bee4:	00000513          	li	a0,0
8000bee8:	00900f93          	li	t6,9
8000beec:	01900e93          	li	t4,25
8000bef0:	fff00293          	li	t0,-1
8000bef4:	02d8de33          	divu	t3,a7,a3
8000bef8:	fd078713          	addi	a4,a5,-48
8000befc:	06efe063          	bltu	t6,a4,8000bf5c <_strtol_l.isra.0+0x130>
8000bf00:	00070793          	mv	a5,a4
8000bf04:	06d7dc63          	ble	a3,a5,8000bf7c <_strtol_l.isra.0+0x150>
8000bf08:	02580063          	beq	a6,t0,8000bf28 <_strtol_l.isra.0+0xfc>
8000bf0c:	fff00813          	li	a6,-1
8000bf10:	00ae6c63          	bltu	t3,a0,8000bf28 <_strtol_l.isra.0+0xfc>
8000bf14:	00ae1463          	bne	t3,a0,8000bf1c <_strtol_l.isra.0+0xf0>
8000bf18:	00ff4863          	blt	t5,a5,8000bf28 <_strtol_l.isra.0+0xfc>
8000bf1c:	00100813          	li	a6,1
8000bf20:	02a68533          	mul	a0,a3,a0
8000bf24:	00a78533          	add	a0,a5,a0
8000bf28:	00148493          	addi	s1,s1,1
8000bf2c:	fff4c783          	lbu	a5,-1(s1)
8000bf30:	fc9ff06f          	j	8000bef8 <_strtol_l.isra.0+0xcc>
8000bf34:	00048913          	mv	s2,s1
8000bf38:	f15ff06f          	j	8000be4c <_strtol_l.isra.0+0x20>
8000bf3c:	02b00793          	li	a5,43
8000bf40:	00f40863          	beq	s0,a5,8000bf50 <_strtol_l.isra.0+0x124>
8000bf44:	00040793          	mv	a5,s0
8000bf48:	00000313          	li	t1,0
8000bf4c:	f55ff06f          	j	8000bea0 <_strtol_l.isra.0+0x74>
8000bf50:	00290493          	addi	s1,s2,2
8000bf54:	00194783          	lbu	a5,1(s2)
8000bf58:	ff1ff06f          	j	8000bf48 <_strtol_l.isra.0+0x11c>
8000bf5c:	fbf78713          	addi	a4,a5,-65
8000bf60:	00eee663          	bltu	t4,a4,8000bf6c <_strtol_l.isra.0+0x140>
8000bf64:	fc978793          	addi	a5,a5,-55
8000bf68:	f9dff06f          	j	8000bf04 <_strtol_l.isra.0+0xd8>
8000bf6c:	f9f78713          	addi	a4,a5,-97
8000bf70:	00eee663          	bltu	t4,a4,8000bf7c <_strtol_l.isra.0+0x150>
8000bf74:	fa978793          	addi	a5,a5,-87
8000bf78:	f8dff06f          	j	8000bf04 <_strtol_l.isra.0+0xd8>
8000bf7c:	fff00793          	li	a5,-1
8000bf80:	02f81863          	bne	a6,a5,8000bfb0 <_strtol_l.isra.0+0x184>
8000bf84:	02200793          	li	a5,34
8000bf88:	00f9a023          	sw	a5,0(s3)
8000bf8c:	00088513          	mv	a0,a7
8000bf90:	02061863          	bnez	a2,8000bfc0 <_strtol_l.isra.0+0x194>
8000bf94:	02c12083          	lw	ra,44(sp)
8000bf98:	02812403          	lw	s0,40(sp)
8000bf9c:	02412483          	lw	s1,36(sp)
8000bfa0:	02012903          	lw	s2,32(sp)
8000bfa4:	01c12983          	lw	s3,28(sp)
8000bfa8:	03010113          	addi	sp,sp,48
8000bfac:	00008067          	ret
8000bfb0:	00030463          	beqz	t1,8000bfb8 <_strtol_l.isra.0+0x18c>
8000bfb4:	40a00533          	neg	a0,a0
8000bfb8:	fc060ee3          	beqz	a2,8000bf94 <_strtol_l.isra.0+0x168>
8000bfbc:	00080463          	beqz	a6,8000bfc4 <_strtol_l.isra.0+0x198>
8000bfc0:	fff48593          	addi	a1,s1,-1
8000bfc4:	00b62023          	sw	a1,0(a2)
8000bfc8:	fcdff06f          	j	8000bf94 <_strtol_l.isra.0+0x168>
8000bfcc:	03000793          	li	a5,48
8000bfd0:	f00690e3          	bnez	a3,8000bed0 <_strtol_l.isra.0+0xa4>
8000bfd4:	00800693          	li	a3,8
8000bfd8:	ef9ff06f          	j	8000bed0 <_strtol_l.isra.0+0xa4>
8000bfdc:	03000713          	li	a4,48
8000bfe0:	ece78ae3          	beq	a5,a4,8000beb4 <_strtol_l.isra.0+0x88>
8000bfe4:	00a00693          	li	a3,10
8000bfe8:	ee9ff06f          	j	8000bed0 <_strtol_l.isra.0+0xa4>

8000bfec <_strtol_r>:
8000bfec:	8341a783          	lw	a5,-1996(gp) # 8000da64 <_impure_ptr>
8000bff0:	0347a703          	lw	a4,52(a5)
8000bff4:	00071663          	bnez	a4,8000c000 <_strtol_r+0x14>
8000bff8:	8000e737          	lui	a4,0x8000e
8000bffc:	8c070713          	addi	a4,a4,-1856 # 8000d8c0 <__global_pointer$+0xfffff690>
8000c000:	e2dff06f          	j	8000be2c <_strtol_l.isra.0>

8000c004 <strtol_l>:
8000c004:	00068713          	mv	a4,a3
8000c008:	00060693          	mv	a3,a2
8000c00c:	00058613          	mv	a2,a1
8000c010:	00050593          	mv	a1,a0
8000c014:	8341a503          	lw	a0,-1996(gp) # 8000da64 <_impure_ptr>
8000c018:	e15ff06f          	j	8000be2c <_strtol_l.isra.0>

8000c01c <strtol>:
8000c01c:	8341a783          	lw	a5,-1996(gp) # 8000da64 <_impure_ptr>
8000c020:	00060693          	mv	a3,a2
8000c024:	0347a703          	lw	a4,52(a5)
8000c028:	00071663          	bnez	a4,8000c034 <strtol+0x18>
8000c02c:	8000e737          	lui	a4,0x8000e
8000c030:	8c070713          	addi	a4,a4,-1856 # 8000d8c0 <__global_pointer$+0xfffff690>
8000c034:	00058613          	mv	a2,a1
8000c038:	00050593          	mv	a1,a0
8000c03c:	00078513          	mv	a0,a5
8000c040:	dedff06f          	j	8000be2c <_strtol_l.isra.0>

8000c044 <_strtoll_l.isra.0>:
8000c044:	fc010113          	addi	sp,sp,-64
8000c048:	02812c23          	sw	s0,56(sp)
8000c04c:	02912a23          	sw	s1,52(sp)
8000c050:	03312623          	sw	s3,44(sp)
8000c054:	03512223          	sw	s5,36(sp)
8000c058:	03612023          	sw	s6,32(sp)
8000c05c:	02112e23          	sw	ra,60(sp)
8000c060:	03212823          	sw	s2,48(sp)
8000c064:	03412423          	sw	s4,40(sp)
8000c068:	01712e23          	sw	s7,28(sp)
8000c06c:	01812c23          	sw	s8,24(sp)
8000c070:	01912a23          	sw	s9,20(sp)
8000c074:	01a12823          	sw	s10,16(sp)
8000c078:	00050493          	mv	s1,a0
8000c07c:	00058a93          	mv	s5,a1
8000c080:	00060b13          	mv	s6,a2
8000c084:	00068993          	mv	s3,a3
8000c088:	00058413          	mv	s0,a1
8000c08c:	00140a13          	addi	s4,s0,1
8000c090:	fffa4903          	lbu	s2,-1(s4)
8000c094:	00070513          	mv	a0,a4
8000c098:	00e12623          	sw	a4,12(sp)
8000c09c:	664000ef          	jal	ra,8000c700 <__locale_ctype_ptr_l>
8000c0a0:	01250533          	add	a0,a0,s2
8000c0a4:	00154783          	lbu	a5,1(a0)
8000c0a8:	00c12703          	lw	a4,12(sp)
8000c0ac:	0087f793          	andi	a5,a5,8
8000c0b0:	12079263          	bnez	a5,8000c1d4 <_strtoll_l.isra.0+0x190>
8000c0b4:	02d00793          	li	a5,45
8000c0b8:	12f91263          	bne	s2,a5,8000c1dc <_strtoll_l.isra.0+0x198>
8000c0bc:	00144903          	lbu	s2,1(s0)
8000c0c0:	00240a13          	addi	s4,s0,2
8000c0c4:	00100b93          	li	s7,1
8000c0c8:	1c098a63          	beqz	s3,8000c29c <_strtoll_l.isra.0+0x258>
8000c0cc:	01000793          	li	a5,16
8000c0d0:	02f99463          	bne	s3,a5,8000c0f8 <_strtoll_l.isra.0+0xb4>
8000c0d4:	03000713          	li	a4,48
8000c0d8:	02e91063          	bne	s2,a4,8000c0f8 <_strtoll_l.isra.0+0xb4>
8000c0dc:	000a4783          	lbu	a5,0(s4)
8000c0e0:	05800713          	li	a4,88
8000c0e4:	0df7f793          	andi	a5,a5,223
8000c0e8:	1ae79263          	bne	a5,a4,8000c28c <_strtoll_l.isra.0+0x248>
8000c0ec:	001a4903          	lbu	s2,1(s4)
8000c0f0:	01000993          	li	s3,16
8000c0f4:	002a0a13          	addi	s4,s4,2
8000c0f8:	00000c13          	li	s8,0
8000c0fc:	80000437          	lui	s0,0x80000
8000c100:	000b9663          	bnez	s7,8000c10c <_strtoll_l.isra.0+0xc8>
8000c104:	fff00c13          	li	s8,-1
8000c108:	fff44413          	not	s0,s0
8000c10c:	41f9dc93          	srai	s9,s3,0x1f
8000c110:	00098613          	mv	a2,s3
8000c114:	000c8693          	mv	a3,s9
8000c118:	000c0513          	mv	a0,s8
8000c11c:	00040593          	mv	a1,s0
8000c120:	e7cfe0ef          	jal	ra,8000a79c <__umoddi3>
8000c124:	00050d13          	mv	s10,a0
8000c128:	00098613          	mv	a2,s3
8000c12c:	000c8693          	mv	a3,s9
8000c130:	000c0513          	mv	a0,s8
8000c134:	00040593          	mv	a1,s0
8000c138:	a30fe0ef          	jal	ra,8000a368 <__udivdi3>
8000c13c:	00050313          	mv	t1,a0
8000c140:	00058893          	mv	a7,a1
8000c144:	00000713          	li	a4,0
8000c148:	00000513          	li	a0,0
8000c14c:	00000593          	li	a1,0
8000c150:	00900e93          	li	t4,9
8000c154:	01900e13          	li	t3,25
8000c158:	fff00f13          	li	t5,-1
8000c15c:	fd090793          	addi	a5,s2,-48
8000c160:	00fef863          	bleu	a5,t4,8000c170 <_strtoll_l.isra.0+0x12c>
8000c164:	fbf90793          	addi	a5,s2,-65
8000c168:	08fe6863          	bltu	t3,a5,8000c1f8 <_strtoll_l.isra.0+0x1b4>
8000c16c:	fc990793          	addi	a5,s2,-55
8000c170:	0b37d063          	ble	s3,a5,8000c210 <_strtoll_l.isra.0+0x1cc>
8000c174:	05e70a63          	beq	a4,t5,8000c1c8 <_strtoll_l.isra.0+0x184>
8000c178:	08b8e863          	bltu	a7,a1,8000c208 <_strtoll_l.isra.0+0x1c4>
8000c17c:	01159463          	bne	a1,a7,8000c184 <_strtoll_l.isra.0+0x140>
8000c180:	08a36463          	bltu	t1,a0,8000c208 <_strtoll_l.isra.0+0x1c4>
8000c184:	00a31863          	bne	t1,a0,8000c194 <_strtoll_l.isra.0+0x150>
8000c188:	00b89663          	bne	a7,a1,8000c194 <_strtoll_l.isra.0+0x150>
8000c18c:	fff00713          	li	a4,-1
8000c190:	02fd4c63          	blt	s10,a5,8000c1c8 <_strtoll_l.isra.0+0x184>
8000c194:	02ac8733          	mul	a4,s9,a0
8000c198:	41f7d813          	srai	a6,a5,0x1f
8000c19c:	033585b3          	mul	a1,a1,s3
8000c1a0:	02a98633          	mul	a2,s3,a0
8000c1a4:	00b70733          	add	a4,a4,a1
8000c1a8:	02a9b533          	mulhu	a0,s3,a0
8000c1ac:	00c786b3          	add	a3,a5,a2
8000c1b0:	00f6b7b3          	sltu	a5,a3,a5
8000c1b4:	00a70733          	add	a4,a4,a0
8000c1b8:	00e80733          	add	a4,a6,a4
8000c1bc:	00e785b3          	add	a1,a5,a4
8000c1c0:	00068513          	mv	a0,a3
8000c1c4:	00100713          	li	a4,1
8000c1c8:	001a0a13          	addi	s4,s4,1
8000c1cc:	fffa4903          	lbu	s2,-1(s4)
8000c1d0:	f8dff06f          	j	8000c15c <_strtoll_l.isra.0+0x118>
8000c1d4:	000a0413          	mv	s0,s4
8000c1d8:	eb5ff06f          	j	8000c08c <_strtoll_l.isra.0+0x48>
8000c1dc:	02b00793          	li	a5,43
8000c1e0:	00f90663          	beq	s2,a5,8000c1ec <_strtoll_l.isra.0+0x1a8>
8000c1e4:	00000b93          	li	s7,0
8000c1e8:	ee1ff06f          	j	8000c0c8 <_strtoll_l.isra.0+0x84>
8000c1ec:	00240a13          	addi	s4,s0,2 # 80000002 <__global_pointer$+0xffff1dd2>
8000c1f0:	00144903          	lbu	s2,1(s0)
8000c1f4:	ff1ff06f          	j	8000c1e4 <_strtoll_l.isra.0+0x1a0>
8000c1f8:	f9f90793          	addi	a5,s2,-97
8000c1fc:	00fe6a63          	bltu	t3,a5,8000c210 <_strtoll_l.isra.0+0x1cc>
8000c200:	fa990793          	addi	a5,s2,-87
8000c204:	f6dff06f          	j	8000c170 <_strtoll_l.isra.0+0x12c>
8000c208:	fff00713          	li	a4,-1
8000c20c:	fbdff06f          	j	8000c1c8 <_strtoll_l.isra.0+0x184>
8000c210:	fff00793          	li	a5,-1
8000c214:	04f71863          	bne	a4,a5,8000c264 <_strtoll_l.isra.0+0x220>
8000c218:	02200793          	li	a5,34
8000c21c:	00f4a023          	sw	a5,0(s1)
8000c220:	000c0513          	mv	a0,s8
8000c224:	00040593          	mv	a1,s0
8000c228:	040b1c63          	bnez	s6,8000c280 <_strtoll_l.isra.0+0x23c>
8000c22c:	03c12083          	lw	ra,60(sp)
8000c230:	03812403          	lw	s0,56(sp)
8000c234:	03412483          	lw	s1,52(sp)
8000c238:	03012903          	lw	s2,48(sp)
8000c23c:	02c12983          	lw	s3,44(sp)
8000c240:	02812a03          	lw	s4,40(sp)
8000c244:	02412a83          	lw	s5,36(sp)
8000c248:	02012b03          	lw	s6,32(sp)
8000c24c:	01c12b83          	lw	s7,28(sp)
8000c250:	01812c03          	lw	s8,24(sp)
8000c254:	01412c83          	lw	s9,20(sp)
8000c258:	01012d03          	lw	s10,16(sp)
8000c25c:	04010113          	addi	sp,sp,64
8000c260:	00008067          	ret
8000c264:	000b8a63          	beqz	s7,8000c278 <_strtoll_l.isra.0+0x234>
8000c268:	40a00533          	neg	a0,a0
8000c26c:	00a037b3          	snez	a5,a0
8000c270:	40b005b3          	neg	a1,a1
8000c274:	40f585b3          	sub	a1,a1,a5
8000c278:	fa0b0ae3          	beqz	s6,8000c22c <_strtoll_l.isra.0+0x1e8>
8000c27c:	00070463          	beqz	a4,8000c284 <_strtoll_l.isra.0+0x240>
8000c280:	fffa0a93          	addi	s5,s4,-1
8000c284:	015b2023          	sw	s5,0(s6)
8000c288:	fa5ff06f          	j	8000c22c <_strtoll_l.isra.0+0x1e8>
8000c28c:	03000913          	li	s2,48
8000c290:	e60994e3          	bnez	s3,8000c0f8 <_strtoll_l.isra.0+0xb4>
8000c294:	00800993          	li	s3,8
8000c298:	e61ff06f          	j	8000c0f8 <_strtoll_l.isra.0+0xb4>
8000c29c:	03000713          	li	a4,48
8000c2a0:	e2e90ee3          	beq	s2,a4,8000c0dc <_strtoll_l.isra.0+0x98>
8000c2a4:	00a00993          	li	s3,10
8000c2a8:	e51ff06f          	j	8000c0f8 <_strtoll_l.isra.0+0xb4>

8000c2ac <_strtoll_r>:
8000c2ac:	8341a783          	lw	a5,-1996(gp) # 8000da64 <_impure_ptr>
8000c2b0:	0347a703          	lw	a4,52(a5)
8000c2b4:	00071663          	bnez	a4,8000c2c0 <_strtoll_r+0x14>
8000c2b8:	8000e737          	lui	a4,0x8000e
8000c2bc:	8c070713          	addi	a4,a4,-1856 # 8000d8c0 <__global_pointer$+0xfffff690>
8000c2c0:	d85ff06f          	j	8000c044 <_strtoll_l.isra.0>

8000c2c4 <strtoll_l>:
8000c2c4:	00068713          	mv	a4,a3
8000c2c8:	00060693          	mv	a3,a2
8000c2cc:	00058613          	mv	a2,a1
8000c2d0:	00050593          	mv	a1,a0
8000c2d4:	8341a503          	lw	a0,-1996(gp) # 8000da64 <_impure_ptr>
8000c2d8:	d6dff06f          	j	8000c044 <_strtoll_l.isra.0>

8000c2dc <strtoll>:
8000c2dc:	8341a783          	lw	a5,-1996(gp) # 8000da64 <_impure_ptr>
8000c2e0:	00060693          	mv	a3,a2
8000c2e4:	0347a703          	lw	a4,52(a5)
8000c2e8:	00071663          	bnez	a4,8000c2f4 <strtoll+0x18>
8000c2ec:	8000e737          	lui	a4,0x8000e
8000c2f0:	8c070713          	addi	a4,a4,-1856 # 8000d8c0 <__global_pointer$+0xfffff690>
8000c2f4:	00058613          	mv	a2,a1
8000c2f8:	00050593          	mv	a1,a0
8000c2fc:	00078513          	mv	a0,a5
8000c300:	d45ff06f          	j	8000c044 <_strtoll_l.isra.0>

8000c304 <_malloc_trim_r>:
8000c304:	fd010113          	addi	sp,sp,-48
8000c308:	03212023          	sw	s2,32(sp)
8000c30c:	8000d937          	lui	s2,0x8000d
8000c310:	02812423          	sw	s0,40(sp)
8000c314:	02912223          	sw	s1,36(sp)
8000c318:	01312e23          	sw	s3,28(sp)
8000c31c:	00b12623          	sw	a1,12(sp)
8000c320:	02112623          	sw	ra,44(sp)
8000c324:	00050993          	mv	s3,a0
8000c328:	4b890913          	addi	s2,s2,1208 # 8000d4b8 <__global_pointer$+0xfffff288>
8000c32c:	d0cff0ef          	jal	ra,8000b838 <__malloc_lock>
8000c330:	00892783          	lw	a5,8(s2)
8000c334:	00c12583          	lw	a1,12(sp)
8000c338:	0047a483          	lw	s1,4(a5)
8000c33c:	000017b7          	lui	a5,0x1
8000c340:	fef78413          	addi	s0,a5,-17 # fef <buflen.2800+0xf6b>
8000c344:	ffc4f493          	andi	s1,s1,-4
8000c348:	40b40433          	sub	s0,s0,a1
8000c34c:	00940433          	add	s0,s0,s1
8000c350:	00c45413          	srli	s0,s0,0xc
8000c354:	fff40413          	addi	s0,s0,-1
8000c358:	00c41413          	slli	s0,s0,0xc
8000c35c:	02f45663          	ble	a5,s0,8000c388 <_malloc_trim_r+0x84>
8000c360:	00098513          	mv	a0,s3
8000c364:	cd8ff0ef          	jal	ra,8000b83c <__malloc_unlock>
8000c368:	00000513          	li	a0,0
8000c36c:	02c12083          	lw	ra,44(sp)
8000c370:	02812403          	lw	s0,40(sp)
8000c374:	02412483          	lw	s1,36(sp)
8000c378:	02012903          	lw	s2,32(sp)
8000c37c:	01c12983          	lw	s3,28(sp)
8000c380:	03010113          	addi	sp,sp,48
8000c384:	00008067          	ret
8000c388:	00000593          	li	a1,0
8000c38c:	00098513          	mv	a0,s3
8000c390:	a19ff0ef          	jal	ra,8000bda8 <_sbrk_r>
8000c394:	00892783          	lw	a5,8(s2)
8000c398:	009787b3          	add	a5,a5,s1
8000c39c:	fcf512e3          	bne	a0,a5,8000c360 <_malloc_trim_r+0x5c>
8000c3a0:	408005b3          	neg	a1,s0
8000c3a4:	00098513          	mv	a0,s3
8000c3a8:	a01ff0ef          	jal	ra,8000bda8 <_sbrk_r>
8000c3ac:	fff00793          	li	a5,-1
8000c3b0:	02f51c63          	bne	a0,a5,8000c3e8 <_malloc_trim_r+0xe4>
8000c3b4:	00000593          	li	a1,0
8000c3b8:	00098513          	mv	a0,s3
8000c3bc:	9edff0ef          	jal	ra,8000bda8 <_sbrk_r>
8000c3c0:	00892703          	lw	a4,8(s2)
8000c3c4:	00f00693          	li	a3,15
8000c3c8:	40e507b3          	sub	a5,a0,a4
8000c3cc:	f8f6dae3          	ble	a5,a3,8000c360 <_malloc_trim_r+0x5c>
8000c3d0:	8381a683          	lw	a3,-1992(gp) # 8000da68 <__malloc_sbrk_base>
8000c3d4:	0017e793          	ori	a5,a5,1
8000c3d8:	00f72223          	sw	a5,4(a4)
8000c3dc:	40d50533          	sub	a0,a0,a3
8000c3e0:	90a1a623          	sw	a0,-1780(gp) # 8000db3c <__malloc_current_mallinfo>
8000c3e4:	f7dff06f          	j	8000c360 <_malloc_trim_r+0x5c>
8000c3e8:	00892783          	lw	a5,8(s2)
8000c3ec:	408484b3          	sub	s1,s1,s0
8000c3f0:	0014e493          	ori	s1,s1,1
8000c3f4:	0097a223          	sw	s1,4(a5)
8000c3f8:	90c1a783          	lw	a5,-1780(gp) # 8000db3c <__malloc_current_mallinfo>
8000c3fc:	00098513          	mv	a0,s3
8000c400:	40878433          	sub	s0,a5,s0
8000c404:	9081a623          	sw	s0,-1780(gp) # 8000db3c <__malloc_current_mallinfo>
8000c408:	c34ff0ef          	jal	ra,8000b83c <__malloc_unlock>
8000c40c:	00100513          	li	a0,1
8000c410:	f5dff06f          	j	8000c36c <_malloc_trim_r+0x68>

8000c414 <_free_r>:
8000c414:	24058c63          	beqz	a1,8000c66c <_free_r+0x258>
8000c418:	ff010113          	addi	sp,sp,-16
8000c41c:	00812423          	sw	s0,8(sp)
8000c420:	00912223          	sw	s1,4(sp)
8000c424:	00050413          	mv	s0,a0
8000c428:	00058493          	mv	s1,a1
8000c42c:	00112623          	sw	ra,12(sp)
8000c430:	c08ff0ef          	jal	ra,8000b838 <__malloc_lock>
8000c434:	ffc4a503          	lw	a0,-4(s1)
8000c438:	8000d637          	lui	a2,0x8000d
8000c43c:	ff848693          	addi	a3,s1,-8
8000c440:	ffe57793          	andi	a5,a0,-2
8000c444:	4b860813          	addi	a6,a2,1208 # 8000d4b8 <__global_pointer$+0xfffff288>
8000c448:	00f685b3          	add	a1,a3,a5
8000c44c:	0045a703          	lw	a4,4(a1)
8000c450:	00882803          	lw	a6,8(a6)
8000c454:	4b860613          	addi	a2,a2,1208
8000c458:	ffc77713          	andi	a4,a4,-4
8000c45c:	00157513          	andi	a0,a0,1
8000c460:	06b81063          	bne	a6,a1,8000c4c0 <_free_r+0xac>
8000c464:	00e787b3          	add	a5,a5,a4
8000c468:	02051063          	bnez	a0,8000c488 <_free_r+0x74>
8000c46c:	ff84a703          	lw	a4,-8(s1)
8000c470:	40e686b3          	sub	a3,a3,a4
8000c474:	0086a583          	lw	a1,8(a3)
8000c478:	00e787b3          	add	a5,a5,a4
8000c47c:	00c6a703          	lw	a4,12(a3)
8000c480:	00e5a623          	sw	a4,12(a1)
8000c484:	00b72423          	sw	a1,8(a4)
8000c488:	0017e713          	ori	a4,a5,1
8000c48c:	00e6a223          	sw	a4,4(a3)
8000c490:	83c1a703          	lw	a4,-1988(gp) # 8000da6c <__malloc_trim_threshold>
8000c494:	00d62423          	sw	a3,8(a2)
8000c498:	00e7e863          	bltu	a5,a4,8000c4a8 <_free_r+0x94>
8000c49c:	8b01a583          	lw	a1,-1872(gp) # 8000dae0 <__malloc_top_pad>
8000c4a0:	00040513          	mv	a0,s0
8000c4a4:	e61ff0ef          	jal	ra,8000c304 <_malloc_trim_r>
8000c4a8:	00040513          	mv	a0,s0
8000c4ac:	00812403          	lw	s0,8(sp)
8000c4b0:	00c12083          	lw	ra,12(sp)
8000c4b4:	00412483          	lw	s1,4(sp)
8000c4b8:	01010113          	addi	sp,sp,16
8000c4bc:	b80ff06f          	j	8000b83c <__malloc_unlock>
8000c4c0:	00e5a223          	sw	a4,4(a1)
8000c4c4:	00000813          	li	a6,0
8000c4c8:	02051663          	bnez	a0,8000c4f4 <_free_r+0xe0>
8000c4cc:	ff84a503          	lw	a0,-8(s1)
8000c4d0:	8000d8b7          	lui	a7,0x8000d
8000c4d4:	4c088893          	addi	a7,a7,1216 # 8000d4c0 <__global_pointer$+0xfffff290>
8000c4d8:	40a686b3          	sub	a3,a3,a0
8000c4dc:	00a787b3          	add	a5,a5,a0
8000c4e0:	0086a503          	lw	a0,8(a3)
8000c4e4:	0b150663          	beq	a0,a7,8000c590 <_free_r+0x17c>
8000c4e8:	00c6a883          	lw	a7,12(a3)
8000c4ec:	01152623          	sw	a7,12(a0)
8000c4f0:	00a8a423          	sw	a0,8(a7)
8000c4f4:	00e58533          	add	a0,a1,a4
8000c4f8:	00452503          	lw	a0,4(a0)
8000c4fc:	00157513          	andi	a0,a0,1
8000c500:	02051863          	bnez	a0,8000c530 <_free_r+0x11c>
8000c504:	00e787b3          	add	a5,a5,a4
8000c508:	0085a703          	lw	a4,8(a1)
8000c50c:	08081663          	bnez	a6,8000c598 <_free_r+0x184>
8000c510:	8000d537          	lui	a0,0x8000d
8000c514:	4c050513          	addi	a0,a0,1216 # 8000d4c0 <__global_pointer$+0xfffff290>
8000c518:	08a71063          	bne	a4,a0,8000c598 <_free_r+0x184>
8000c51c:	00d62a23          	sw	a3,20(a2)
8000c520:	00d62823          	sw	a3,16(a2)
8000c524:	00e6a623          	sw	a4,12(a3)
8000c528:	00e6a423          	sw	a4,8(a3)
8000c52c:	00100813          	li	a6,1
8000c530:	0017e713          	ori	a4,a5,1
8000c534:	00e6a223          	sw	a4,4(a3)
8000c538:	00f68733          	add	a4,a3,a5
8000c53c:	00f72023          	sw	a5,0(a4)
8000c540:	f60814e3          	bnez	a6,8000c4a8 <_free_r+0x94>
8000c544:	1ff00713          	li	a4,511
8000c548:	06f76063          	bltu	a4,a5,8000c5a8 <_free_r+0x194>
8000c54c:	0037d793          	srli	a5,a5,0x3
8000c550:	4027d593          	srai	a1,a5,0x2
8000c554:	00100713          	li	a4,1
8000c558:	00b71733          	sll	a4,a4,a1
8000c55c:	00462583          	lw	a1,4(a2)
8000c560:	00178793          	addi	a5,a5,1
8000c564:	00379793          	slli	a5,a5,0x3
8000c568:	00f607b3          	add	a5,a2,a5
8000c56c:	00b76733          	or	a4,a4,a1
8000c570:	00e62223          	sw	a4,4(a2)
8000c574:	0007a703          	lw	a4,0(a5)
8000c578:	ff878613          	addi	a2,a5,-8
8000c57c:	00c6a623          	sw	a2,12(a3)
8000c580:	00e6a423          	sw	a4,8(a3)
8000c584:	00d7a023          	sw	a3,0(a5)
8000c588:	00d72623          	sw	a3,12(a4)
8000c58c:	f1dff06f          	j	8000c4a8 <_free_r+0x94>
8000c590:	00100813          	li	a6,1
8000c594:	f61ff06f          	j	8000c4f4 <_free_r+0xe0>
8000c598:	00c5a583          	lw	a1,12(a1)
8000c59c:	00b72623          	sw	a1,12(a4)
8000c5a0:	00e5a423          	sw	a4,8(a1)
8000c5a4:	f8dff06f          	j	8000c530 <_free_r+0x11c>
8000c5a8:	0097d593          	srli	a1,a5,0x9
8000c5ac:	00400713          	li	a4,4
8000c5b0:	04b76863          	bltu	a4,a1,8000c600 <_free_r+0x1ec>
8000c5b4:	0067d713          	srli	a4,a5,0x6
8000c5b8:	03870713          	addi	a4,a4,56
8000c5bc:	00170593          	addi	a1,a4,1
8000c5c0:	00359593          	slli	a1,a1,0x3
8000c5c4:	00b605b3          	add	a1,a2,a1
8000c5c8:	ff858513          	addi	a0,a1,-8
8000c5cc:	0005a583          	lw	a1,0(a1)
8000c5d0:	08b51463          	bne	a0,a1,8000c658 <_free_r+0x244>
8000c5d4:	00100793          	li	a5,1
8000c5d8:	40275713          	srai	a4,a4,0x2
8000c5dc:	00e79733          	sll	a4,a5,a4
8000c5e0:	00462783          	lw	a5,4(a2)
8000c5e4:	00f76733          	or	a4,a4,a5
8000c5e8:	00e62223          	sw	a4,4(a2)
8000c5ec:	00a6a623          	sw	a0,12(a3)
8000c5f0:	00b6a423          	sw	a1,8(a3)
8000c5f4:	00d52423          	sw	a3,8(a0)
8000c5f8:	00d5a623          	sw	a3,12(a1)
8000c5fc:	eadff06f          	j	8000c4a8 <_free_r+0x94>
8000c600:	01400713          	li	a4,20
8000c604:	00b76663          	bltu	a4,a1,8000c610 <_free_r+0x1fc>
8000c608:	05b58713          	addi	a4,a1,91
8000c60c:	fb1ff06f          	j	8000c5bc <_free_r+0x1a8>
8000c610:	05400713          	li	a4,84
8000c614:	00b76863          	bltu	a4,a1,8000c624 <_free_r+0x210>
8000c618:	00c7d713          	srli	a4,a5,0xc
8000c61c:	06e70713          	addi	a4,a4,110
8000c620:	f9dff06f          	j	8000c5bc <_free_r+0x1a8>
8000c624:	15400713          	li	a4,340
8000c628:	00b76863          	bltu	a4,a1,8000c638 <_free_r+0x224>
8000c62c:	00f7d713          	srli	a4,a5,0xf
8000c630:	07770713          	addi	a4,a4,119
8000c634:	f89ff06f          	j	8000c5bc <_free_r+0x1a8>
8000c638:	55400513          	li	a0,1364
8000c63c:	07e00713          	li	a4,126
8000c640:	f6b56ee3          	bltu	a0,a1,8000c5bc <_free_r+0x1a8>
8000c644:	0127d713          	srli	a4,a5,0x12
8000c648:	07c70713          	addi	a4,a4,124
8000c64c:	f71ff06f          	j	8000c5bc <_free_r+0x1a8>
8000c650:	0085a583          	lw	a1,8(a1)
8000c654:	00b50863          	beq	a0,a1,8000c664 <_free_r+0x250>
8000c658:	0045a703          	lw	a4,4(a1)
8000c65c:	ffc77713          	andi	a4,a4,-4
8000c660:	fee7e8e3          	bltu	a5,a4,8000c650 <_free_r+0x23c>
8000c664:	00c5a503          	lw	a0,12(a1)
8000c668:	f85ff06f          	j	8000c5ec <_free_r+0x1d8>
8000c66c:	00008067          	ret

8000c670 <_setlocale_r>:
8000c670:	ff010113          	addi	sp,sp,-16
8000c674:	00912223          	sw	s1,4(sp)
8000c678:	00112623          	sw	ra,12(sp)
8000c67c:	00812423          	sw	s0,8(sp)
8000c680:	8000d4b7          	lui	s1,0x8000d
8000c684:	04060263          	beqz	a2,8000c6c8 <_setlocale_r+0x58>
8000c688:	8000d5b7          	lui	a1,0x8000d
8000c68c:	04458593          	addi	a1,a1,68 # 8000d044 <__global_pointer$+0xffffee14>
8000c690:	00060513          	mv	a0,a2
8000c694:	00060413          	mv	s0,a2
8000c698:	9e4fd0ef          	jal	ra,8000987c <strcmp>
8000c69c:	02050663          	beqz	a0,8000c6c8 <_setlocale_r+0x58>
8000c6a0:	04048593          	addi	a1,s1,64 # 8000d040 <__global_pointer$+0xffffee10>
8000c6a4:	00040513          	mv	a0,s0
8000c6a8:	9d4fd0ef          	jal	ra,8000987c <strcmp>
8000c6ac:	00050e63          	beqz	a0,8000c6c8 <_setlocale_r+0x58>
8000c6b0:	8000d5b7          	lui	a1,0x8000d
8000c6b4:	04c58593          	addi	a1,a1,76 # 8000d04c <__global_pointer$+0xffffee1c>
8000c6b8:	00040513          	mv	a0,s0
8000c6bc:	9c0fd0ef          	jal	ra,8000987c <strcmp>
8000c6c0:	00000793          	li	a5,0
8000c6c4:	00051463          	bnez	a0,8000c6cc <_setlocale_r+0x5c>
8000c6c8:	04048793          	addi	a5,s1,64
8000c6cc:	00c12083          	lw	ra,12(sp)
8000c6d0:	00812403          	lw	s0,8(sp)
8000c6d4:	00412483          	lw	s1,4(sp)
8000c6d8:	00078513          	mv	a0,a5
8000c6dc:	01010113          	addi	sp,sp,16
8000c6e0:	00008067          	ret

8000c6e4 <__locale_mb_cur_max>:
8000c6e4:	8341a783          	lw	a5,-1996(gp) # 8000da64 <_impure_ptr>
8000c6e8:	0347a783          	lw	a5,52(a5)
8000c6ec:	00079663          	bnez	a5,8000c6f8 <__locale_mb_cur_max+0x14>
8000c6f0:	8000e7b7          	lui	a5,0x8000e
8000c6f4:	8c078793          	addi	a5,a5,-1856 # 8000d8c0 <__global_pointer$+0xfffff690>
8000c6f8:	1287c503          	lbu	a0,296(a5)
8000c6fc:	00008067          	ret

8000c700 <__locale_ctype_ptr_l>:
8000c700:	0ec52503          	lw	a0,236(a0)
8000c704:	00008067          	ret

8000c708 <__locale_ctype_ptr>:
8000c708:	8341a783          	lw	a5,-1996(gp) # 8000da64 <_impure_ptr>
8000c70c:	0347a783          	lw	a5,52(a5)
8000c710:	00079663          	bnez	a5,8000c71c <__locale_ctype_ptr+0x14>
8000c714:	8000e7b7          	lui	a5,0x8000e
8000c718:	8c078793          	addi	a5,a5,-1856 # 8000d8c0 <__global_pointer$+0xfffff690>
8000c71c:	0ec7a503          	lw	a0,236(a5)
8000c720:	00008067          	ret

8000c724 <setlocale>:
8000c724:	00058613          	mv	a2,a1
8000c728:	00050593          	mv	a1,a0
8000c72c:	8341a503          	lw	a0,-1996(gp) # 8000da64 <_impure_ptr>
8000c730:	f41ff06f          	j	8000c670 <_setlocale_r>

8000c734 <_mbtowc_r>:
8000c734:	8341a783          	lw	a5,-1996(gp) # 8000da64 <_impure_ptr>
8000c738:	0347a783          	lw	a5,52(a5)
8000c73c:	00079663          	bnez	a5,8000c748 <_mbtowc_r+0x14>
8000c740:	8000e7b7          	lui	a5,0x8000e
8000c744:	8c078793          	addi	a5,a5,-1856 # 8000d8c0 <__global_pointer$+0xfffff690>
8000c748:	0e47a303          	lw	t1,228(a5)
8000c74c:	00030067          	jr	t1

8000c750 <__ascii_mbtowc>:
8000c750:	02059a63          	bnez	a1,8000c784 <__ascii_mbtowc+0x34>
8000c754:	ff010113          	addi	sp,sp,-16
8000c758:	00c10593          	addi	a1,sp,12
8000c75c:	00000513          	li	a0,0
8000c760:	00060e63          	beqz	a2,8000c77c <__ascii_mbtowc+0x2c>
8000c764:	ffe00513          	li	a0,-2
8000c768:	00068a63          	beqz	a3,8000c77c <__ascii_mbtowc+0x2c>
8000c76c:	00064783          	lbu	a5,0(a2)
8000c770:	00f5a023          	sw	a5,0(a1)
8000c774:	00064503          	lbu	a0,0(a2)
8000c778:	00a03533          	snez	a0,a0
8000c77c:	01010113          	addi	sp,sp,16
8000c780:	00008067          	ret
8000c784:	00000513          	li	a0,0
8000c788:	02060063          	beqz	a2,8000c7a8 <__ascii_mbtowc+0x58>
8000c78c:	ffe00513          	li	a0,-2
8000c790:	00068c63          	beqz	a3,8000c7a8 <__ascii_mbtowc+0x58>
8000c794:	00064783          	lbu	a5,0(a2)
8000c798:	00f5a023          	sw	a5,0(a1)
8000c79c:	00064503          	lbu	a0,0(a2)
8000c7a0:	00a03533          	snez	a0,a0
8000c7a4:	00008067          	ret
8000c7a8:	00008067          	ret

8000c7ac <memmove>:
8000c7ac:	00c50733          	add	a4,a0,a2
8000c7b0:	00a5e863          	bltu	a1,a0,8000c7c0 <memmove+0x14>
8000c7b4:	00050793          	mv	a5,a0
8000c7b8:	02e79a63          	bne	a5,a4,8000c7ec <memmove+0x40>
8000c7bc:	00008067          	ret
8000c7c0:	00c587b3          	add	a5,a1,a2
8000c7c4:	40f60633          	sub	a2,a2,a5
8000c7c8:	fef576e3          	bleu	a5,a0,8000c7b4 <memmove+0x8>
8000c7cc:	00c786b3          	add	a3,a5,a2
8000c7d0:	00069463          	bnez	a3,8000c7d8 <memmove+0x2c>
8000c7d4:	00008067          	ret
8000c7d8:	fff78793          	addi	a5,a5,-1
8000c7dc:	0007c683          	lbu	a3,0(a5)
8000c7e0:	fff70713          	addi	a4,a4,-1
8000c7e4:	00d70023          	sb	a3,0(a4)
8000c7e8:	fe5ff06f          	j	8000c7cc <memmove+0x20>
8000c7ec:	00158593          	addi	a1,a1,1
8000c7f0:	fff5c683          	lbu	a3,-1(a1)
8000c7f4:	00178793          	addi	a5,a5,1
8000c7f8:	fed78fa3          	sb	a3,-1(a5)
8000c7fc:	fbdff06f          	j	8000c7b8 <memmove+0xc>

8000c800 <cleanup_glue>:
8000c800:	ff010113          	addi	sp,sp,-16
8000c804:	00812423          	sw	s0,8(sp)
8000c808:	00058413          	mv	s0,a1
8000c80c:	0005a583          	lw	a1,0(a1)
8000c810:	00912223          	sw	s1,4(sp)
8000c814:	00112623          	sw	ra,12(sp)
8000c818:	00050493          	mv	s1,a0
8000c81c:	00058463          	beqz	a1,8000c824 <cleanup_glue+0x24>
8000c820:	fe1ff0ef          	jal	ra,8000c800 <cleanup_glue>
8000c824:	00040593          	mv	a1,s0
8000c828:	00812403          	lw	s0,8(sp)
8000c82c:	00c12083          	lw	ra,12(sp)
8000c830:	00048513          	mv	a0,s1
8000c834:	00412483          	lw	s1,4(sp)
8000c838:	01010113          	addi	sp,sp,16
8000c83c:	bd9ff06f          	j	8000c414 <_free_r>

8000c840 <_reclaim_reent>:
8000c840:	8341a783          	lw	a5,-1996(gp) # 8000da64 <_impure_ptr>
8000c844:	10a78263          	beq	a5,a0,8000c948 <_reclaim_reent+0x108>
8000c848:	04c52783          	lw	a5,76(a0)
8000c84c:	fe010113          	addi	sp,sp,-32
8000c850:	00812c23          	sw	s0,24(sp)
8000c854:	00912a23          	sw	s1,20(sp)
8000c858:	01212823          	sw	s2,16(sp)
8000c85c:	00112e23          	sw	ra,28(sp)
8000c860:	01312623          	sw	s3,12(sp)
8000c864:	00050413          	mv	s0,a0
8000c868:	00000493          	li	s1,0
8000c86c:	08000913          	li	s2,128
8000c870:	04079463          	bnez	a5,8000c8b8 <_reclaim_reent+0x78>
8000c874:	04042583          	lw	a1,64(s0)
8000c878:	00058663          	beqz	a1,8000c884 <_reclaim_reent+0x44>
8000c87c:	00040513          	mv	a0,s0
8000c880:	b95ff0ef          	jal	ra,8000c414 <_free_r>
8000c884:	14842583          	lw	a1,328(s0)
8000c888:	04058c63          	beqz	a1,8000c8e0 <_reclaim_reent+0xa0>
8000c88c:	14c40493          	addi	s1,s0,332
8000c890:	04958863          	beq	a1,s1,8000c8e0 <_reclaim_reent+0xa0>
8000c894:	0005a903          	lw	s2,0(a1)
8000c898:	00040513          	mv	a0,s0
8000c89c:	b79ff0ef          	jal	ra,8000c414 <_free_r>
8000c8a0:	00090593          	mv	a1,s2
8000c8a4:	fedff06f          	j	8000c890 <_reclaim_reent+0x50>
8000c8a8:	009585b3          	add	a1,a1,s1
8000c8ac:	0005a583          	lw	a1,0(a1)
8000c8b0:	00059e63          	bnez	a1,8000c8cc <_reclaim_reent+0x8c>
8000c8b4:	00448493          	addi	s1,s1,4
8000c8b8:	04c42583          	lw	a1,76(s0)
8000c8bc:	ff2496e3          	bne	s1,s2,8000c8a8 <_reclaim_reent+0x68>
8000c8c0:	00040513          	mv	a0,s0
8000c8c4:	b51ff0ef          	jal	ra,8000c414 <_free_r>
8000c8c8:	fadff06f          	j	8000c874 <_reclaim_reent+0x34>
8000c8cc:	0005a983          	lw	s3,0(a1)
8000c8d0:	00040513          	mv	a0,s0
8000c8d4:	b41ff0ef          	jal	ra,8000c414 <_free_r>
8000c8d8:	00098593          	mv	a1,s3
8000c8dc:	fd5ff06f          	j	8000c8b0 <_reclaim_reent+0x70>
8000c8e0:	05442583          	lw	a1,84(s0)
8000c8e4:	00058663          	beqz	a1,8000c8f0 <_reclaim_reent+0xb0>
8000c8e8:	00040513          	mv	a0,s0
8000c8ec:	b29ff0ef          	jal	ra,8000c414 <_free_r>
8000c8f0:	03842783          	lw	a5,56(s0)
8000c8f4:	02078c63          	beqz	a5,8000c92c <_reclaim_reent+0xec>
8000c8f8:	03c42783          	lw	a5,60(s0)
8000c8fc:	00040513          	mv	a0,s0
8000c900:	000780e7          	jalr	a5
8000c904:	2e042583          	lw	a1,736(s0)
8000c908:	02058263          	beqz	a1,8000c92c <_reclaim_reent+0xec>
8000c90c:	00040513          	mv	a0,s0
8000c910:	01812403          	lw	s0,24(sp)
8000c914:	01c12083          	lw	ra,28(sp)
8000c918:	01412483          	lw	s1,20(sp)
8000c91c:	01012903          	lw	s2,16(sp)
8000c920:	00c12983          	lw	s3,12(sp)
8000c924:	02010113          	addi	sp,sp,32
8000c928:	ed9ff06f          	j	8000c800 <cleanup_glue>
8000c92c:	01c12083          	lw	ra,28(sp)
8000c930:	01812403          	lw	s0,24(sp)
8000c934:	01412483          	lw	s1,20(sp)
8000c938:	01012903          	lw	s2,16(sp)
8000c93c:	00c12983          	lw	s3,12(sp)
8000c940:	02010113          	addi	sp,sp,32
8000c944:	00008067          	ret
8000c948:	00008067          	ret

8000c94c <_wctomb_r>:
8000c94c:	8341a783          	lw	a5,-1996(gp) # 8000da64 <_impure_ptr>
8000c950:	0347a783          	lw	a5,52(a5)
8000c954:	00079663          	bnez	a5,8000c960 <_wctomb_r+0x14>
8000c958:	8000e7b7          	lui	a5,0x8000e
8000c95c:	8c078793          	addi	a5,a5,-1856 # 8000d8c0 <__global_pointer$+0xfffff690>
8000c960:	0e07a303          	lw	t1,224(a5)
8000c964:	00030067          	jr	t1

8000c968 <__ascii_wctomb>:
8000c968:	02058463          	beqz	a1,8000c990 <__ascii_wctomb+0x28>
8000c96c:	0ff00793          	li	a5,255
8000c970:	00c7fa63          	bleu	a2,a5,8000c984 <__ascii_wctomb+0x1c>
8000c974:	08a00793          	li	a5,138
8000c978:	00f52023          	sw	a5,0(a0)
8000c97c:	fff00513          	li	a0,-1
8000c980:	00008067          	ret
8000c984:	00c58023          	sb	a2,0(a1)
8000c988:	00100513          	li	a0,1
8000c98c:	00008067          	ret
8000c990:	00000513          	li	a0,0
8000c994:	00008067          	ret
